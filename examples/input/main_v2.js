const modulex = {
    fn: (module) => {
        const fn =
            module && module.__esModule ? () => module.default : () => module
        modulex.copy(fn, {a: fn})
        return fn
    },
    copy: (target, source) => {
        for (let key in source) {
            if (modulex.hasOwn(source, key) && !modulex.hasOwn(target, key)) {
                Object.defineProperty(target, key, {
                    enumerable: true,
                    get: source[key],
                })
            }
        }
    },
    hasOwn: (obj, key) => Object.prototype.hasOwnProperty.call(obj, key),
    convert2es: (module) => {
        if ("undefined" != typeof Symbol && Symbol.toStringTag) {
            Object.defineProperty(module, Symbol.toStringTag, {value: "Module"})
        }
        Object.defineProperty(module, "__esModule", {value: true})
    },
}

const mod1 = {}
modulex.convert2es(mod1)
modulex.copy(mod1, {
    IEEE: () => IEEE,
    americanChemicalSociety: () => americanChemicalSociety,
    americanMedicalAssociation: () => americanMedicalAssociation,
    americanPoliticalScienceAssociation: () =>
        americanPoliticalScienceAssociation,
    americanSociologicalAssociation: () => americanSociologicalAssociation,
    apaAnnotatedBibliography: () => apaAnnotatedBibliography,
    chicagoAuthorDate: () => chicagoAuthorDate,
    chicagoFullnoteBibliography: () => chicagoFullnoteBibliography,
    chicagoNoteBibliography: () => chicagoNoteBibliography,
    elsevierHarvardWithoutTitles: () => elsevierHarvardWithoutTitles,
    harvardCiteThemRight: () => harvardCiteThemRight,
    modernHumanitiesResearchAssociation: () =>
        modernHumanitiesResearchAssociation,
    modernLanguageAssociation: () => modernLanguageAssociation,
    nature: () => nature,
})

const mod2 = {}
modulex.convert2es(mod2)
modulex.copy(mod2, {
    accountDelete: () => accountDelete,
    accountGetInfo: () => accountGetInfo,
    accountGetInfoFromServer: () => accountGetInfoFromServer,
    accountGetUid: () => accountGetUid,
    accountGuestSignIn: () => accountGuestSignIn,
    accountHasGuestData: () => accountHasGuestData,
    accountMergeFromGuest: () => accountMergeFromGuest,
    accountRefreshToken: () => accountRefreshToken,
    accountResetPassword_check: () => accountResetPassword_check,
    accountResetPassword_request: () => accountResetPassword_request,
    accountResetPassword_set: () => accountResetPassword_set,
    accountSignIn: () => accountSignIn,
    accountSignOut: () => accountSignOut,
    accountSignUp: () => accountSignUp,
    accountUpdateInfo: () => accountUpdateInfo,
    accountVerifyEmail: () => accountVerifyEmail,
    addAssetsInArticle: () => addAssetsInArticle,
    addBackwardsCites: () => addBackwardsCites,
    addBaseState: () => addBaseState,
    addCachedLocalChangesState: () => addCachedLocalChangesState,
    addChanges: () => addChanges,
    addHierarchicalTags: () => addHierarchicalTags,
    addLocalUpdate: () => addLocalUpdate,
    addMetadataFromRIS: () => addMetadataFromRIS,
    addVersion: () => addVersion,
    allHierarchicalTags: () => allHierarchicalTags,
    attachFileToItem: () => attachFileToItem,
    autoUpdateCancelDownload: () => autoUpdateCancelDownload,
    autoUpdateCheck: () => autoUpdateCheck,
    autoUpdateCloseProgressWin: () => autoUpdateCloseProgressWin,
    autoUpdateDownload: () => autoUpdateDownload,
    autoUpdateInfo: () => autoUpdateInfo,
    autoUpdateInstall: () => autoUpdateInstall,
    autoUpdateOpenProgressWin: () => autoUpdateOpenProgressWin,
    autoUpdateStatus: () => autoUpdateStatus,
    backupDelete: () => backupDelete,
    backupDo: () => backupDo,
    backupGetDir: () => backupGetDir,
    backupGetList: () => backupGetList,
    backupRestoreFrom: () => backupRestoreFrom,
    backupSetDir: () => backupSetDir,
    cancelPaypalOrderPlan: () => cancelPaypalOrderPlan,
    cardAdd: () => cardAdd,
    cardAddCardBooks: () => cardAddCardBooks,
    cardAddFromArticles: () => cardAddFromArticles,
    cardAddMultiply: () => cardAddMultiply,
    cardAll: () => cardAll,
    cardConvertToArticle: () => cardConvertToArticle,
    cardDevAddMany: () => cardDevAddMany,
    cardGetById: () => cardGetById,
    cardGetByPage: () => cardGetByPage,
    cardGetCardBooks: () => cardGetCardBooks,
    cardGetCards: () => cardGetCards,
    cardGetList: () => cardGetList,
    cardMoveToTrashcan: () => cardMoveToTrashcan,
    cardOpenWindow: () => cardOpenWindow,
    checkAppOpenByLatticsFile: () => checkAppOpenByLatticsFile,
    checkUpdate: () => checkUpdate,
    checkUpdateSetSkipVersion: () => checkUpdateSetSkipVersion,
    closeExportWin: () => closeExportWin,
    closeStandaloneWindow: () => closeStandaloneWindow,
    configAll: () => configAll,
    configGet: () => configGet,
    configGetLocale: () => configGetLocale,
    configSet: () => configSet,
    configSetLocale: () => configSetLocale,
    configUpdate: () => configUpdate,
    countGetItemsWords: () => countGetItemsWords,
    countGetItemsWordsAndChars: () => countGetItemsWordsAndChars,
    countGetItemsWordsDetail: () => countGetItemsWordsDetail,
    countGetProjectDetailInfo: () => countGetProjectDetailInfo,
    countGetProjectWords: () => countGetProjectWords,
    countGetProjectWordsAndChars: () => countGetProjectWordsAndChars,
    createCardIfNeed: () => createCardIfNeed,
    deleteBackwardsCites: () => deleteBackwardsCites,
    deleteYChangesById: () => deleteYChangesById,
    docImportByDialog: () => docImportByDialog,
    docImportGetMarkdown: () => docImportGetMarkdown,
    exportAndSavePDF: () => exportAndSavePDF,
    exportArticleToDoc: () => exportArticleToDoc,
    exportArticleToPDF: () => exportArticleToPDF,
    exportArticleToPDFOrign: () => exportArticleToPDFOrign,
    exportArticleToPNG: () => exportArticleToPNG,
    exportProjectToPDF: () => exportProjectToPDF,
    exportWithImagesAndSave: () => exportWithImagesAndSave,
    fileAddAssetFile: () => fileAddAssetFile,
    fileGetAssetPath: () => fileGetAssetPath,
    fileGetFileData: () => fileGetFileData,
    fileImportToAssets: () => fileImportToAssets,
    fileOpen: () => fileOpen,
    fileOpenDir: () => fileOpenDir,
    fileOpenItem: () => fileOpenItem,
    fileOpenItemDir: () => fileOpenItemDir,
    fileUpdateAsset: () => fileUpdateAsset,
    filterTags: () => filterTags,
    flashcardGetTagData: () => flashcardGetTagData,
    flashcardGetTagItems: () => flashcardGetTagItems,
    flashcardStatisticsGetHistory: () => flashcardStatisticsGetHistory,
    flashcardStatisticsGetOpenRecently: () =>
        flashcardStatisticsGetOpenRecently,
    flashcardStatisticsGetShowRecently: () =>
        flashcardStatisticsGetShowRecently,
    flashcardStatisticsGetTotal: () => flashcardStatisticsGetTotal,
    flashcardUpdateLastId: () => flashcardUpdateLastId,
    getAppInstallTime: () => getAppInstallTime,
    getBaseState: () => getBaseState,
    getCachedLocalChangesState: () => getCachedLocalChangesState,
    getDataVersion: () => getDataVersion,
    getDefaultTemplate: () => getDefaultTemplate,
    getFonts: () => getFonts,
    getHasSeenWalkThrough: () => getHasSeenWalkThrough,
    getHierarchicalTag: () => getHierarchicalTag,
    getHierarchicalTags: () => getHierarchicalTags,
    getImageBufferAndType: () => getImageBufferAndType,
    getIsRefreshTokenFailed: () => getIsRefreshTokenFailed,
    getItemWithSpecificKeys: () => getItemWithSpecificKeys,
    getItemsByTagRootId: () => getItemsByTagRootId,
    getLocalChanges: () => getLocalChanges,
    getLocalContentFromState: () => getLocalContentFromState,
    getProsemirrorJSONFromState: () => getProsemirrorJSONFromState,
    getTagAndSubIds: () => getTagAndSubIds,
    getTargetIds: () => getTargetIds,
    getVersion: () => getVersion,
    getYStateFromJSON: () => getYStateFromJSON,
    globalKvDelete: () => globalKvDelete,
    globalKvGet: () => globalKvGet,
    globalKvSet: () => globalKvSet,
    goalGetItem: () => goalGetItem,
    goalGetProject: () => goalGetProject,
    goalUpdate: () => goalUpdate,
    graphAdd: () => graphAdd,
    graphAddExternalCards: () => graphAddExternalCards,
    graphAddFromProjectPackage: () => graphAddFromProjectPackage,
    graphCopyCiteLink: () => graphCopyCiteLink,
    graphExport: () => graphExport,
    graphGet: () => graphGet,
    graphGetExternalCards: () => graphGetExternalCards,
    graphGetProjectGraphById: () => graphGetProjectGraphById,
    graphGetTagData: () => graphGetTagData,
    graphGetTagItems: () => graphGetTagItems,
    graphRemoveExternalCards: () => graphRemoveExternalCards,
    graphUpdate: () => graphUpdate,
    graphUpdateProject: () => graphUpdateProject,
    graphUpdateProjectItemOrder: () => graphUpdateProjectItemOrder,
    handleCopiedLocalImages: () => handleCopiedLocalImages,
    hasLocalUpdate: () => hasLocalUpdate,
    hideExportView: () => hideExportView,
    imagePreviewClose: () => imagePreviewClose,
    imagePreviewShow: () => imagePreviewShow,
    importItem: () => importItem,
    importItems: () => importItems,
    itemAdd: () => itemAdd,
    itemAddFileWithAsset: () => itemAddFileWithAsset,
    itemAddFromImport: () => itemAddFromImport,
    itemAddUnsorted: () => itemAddUnsorted,
    itemAddUnsortedFromCards: () => itemAddUnsortedFromCards,
    itemAll: () => itemAll,
    itemFilePathExist: () => itemFilePathExist,
    itemGet: () => itemGet,
    itemGetBelongProject: () => itemGetBelongProject,
    itemGetByIds: () => itemGetByIds,
    itemGetByPage: () => itemGetByPage,
    itemGetDisplayHTML: () => itemGetDisplayHTML,
    itemGetKeys: () => itemGetKeys,
    itemGetPath: () => itemGetPath,
    itemGetTemplate: () => itemGetTemplate,
    itemGetTreeForShowByIds: () => itemGetTreeForShowByIds,
    itemGetUnlink: () => itemGetUnlink,
    itemGetUnsorted: () => itemGetUnsorted,
    itemGetWithLocalContent: () => itemGetWithLocalContent,
    itemMoveToProject: () => itemMoveToProject,
    itemMoveToTrashcan: () => itemMoveToTrashcan,
    itemOpenInNewWindow: () => itemOpenInNewWindow,
    itemReplaceTag: () => itemReplaceTag,
    itemSheetAdd: () => itemSheetAdd,
    itemTableAdd: () => itemTableAdd,
    itemUpdate: () => itemUpdate,
    itemUpdateBelongsTo: () => itemUpdateBelongsTo,
    itemUpdateContent: () => itemUpdateContent,
    itemUpdateFlashcardGotIt: () => itemUpdateFlashcardGotIt,
    itemUpdateFlashcardHistory: () => itemUpdateFlashcardHistory,
    itemUpdateIcon: () => itemUpdateIcon,
    itemUpdateMiscContent: () => itemUpdateMiscContent,
    itemUpdateOther: () => itemUpdateOther,
    itemUpdateTag: () => itemUpdateTag,
    itemUpdateTagsInContent: () => itemUpdateTagsInContent,
    itemUpdateTitle: () => itemUpdateTitle,
    jsonToProsemirrorNode: () => jsonToProsemirrorNode,
    localKvDelete: () => localKvDelete,
    localKvGet: () => localKvGet,
    localKvSet: () => localKvSet,
    log: () => log,
    makePaypalOrder: () => makePaypalOrder,
    markProjectLoaded: () => markProjectLoaded,
    markdownToHtml: () => markdownToHtml,
    openExportPreviewWin: () => openExportPreviewWin,
    openStandaloneWindow: () => openStandaloneWindow,
    openUrl: () => openUrl,
    pdfExistHighlightAddToCard: () => pdfExistHighlightAddToCard,
    pdfHighlightAdd: () => pdfHighlightAdd,
    pdfHighlightAddToCard: () => pdfHighlightAddToCard,
    pdfHighlightDeleteByBelongs: () => pdfHighlightDeleteByBelongs,
    pdfHighlightDeleteById: () => pdfHighlightDeleteById,
    pdfHighlightGetAll: () => pdfHighlightGetAll,
    pdfHighlightGetById: () => pdfHighlightGetById,
    pdfHighlightUpdate: () => pdfHighlightUpdate,
    pdfHighlightsGetByFileId: () => pdfHighlightsGetByFileId,
    pdfHighlightsGetByFileIdAndPage: () => pdfHighlightsGetByFileIdAndPage,
    ping: () => ping,
    pluginAll: () => pluginAll,
    prefClose: () => prefClose,
    prefShow: () => prefShow,
    projectAdd: () => projectAdd,
    projectAddFromImport: () => projectAddFromImport,
    projectAddItem: () => projectAddItem,
    projectAddItems: () => projectAddItems,
    projectAll: () => projectAll,
    projectCurrentItemTab: () => projectCurrentItemTab,
    projectDuplicateItem: () => projectDuplicateItem,
    projectGet: () => projectGet,
    projectGetHierarchyItems: () => projectGetHierarchyItems,
    projectGetItemIds: () => projectGetItemIds,
    projectGetItems: () => projectGetItems,
    projectGetTree: () => projectGetTree,
    projectGetTreeItem: () => projectGetTreeItem,
    projectLoadPackage: () => projectLoadPackage,
    projectMoveItemToTrashcan: () => projectMoveItemToTrashcan,
    projectMoveItemsToTrashcan: () => projectMoveItemsToTrashcan,
    projectMoveToTrashcan: () => projectMoveToTrashcan,
    projectRemoveItems: () => projectRemoveItems,
    projectSerdeToLocal: () => projectSerdeToLocal,
    projectSetTree: () => projectSetTree,
    projectUpdateIcon: () => projectUpdateIcon,
    projectUpdateIsCollapsed: () => projectUpdateIsCollapsed,
    projectUpdateMetaData: () => projectUpdateMetaData,
    projectUpdateOther: () => projectUpdateOther,
    projectUpdateTitle: () => projectUpdateTitle,
    projectUpdateTree: () => projectUpdateTree,
    purchaseCheckOrderState: () => purchaseCheckOrderState,
    purchaseClose: () => purchaseClose,
    purchaseGetProducts: () => purchaseGetProducts,
    purchaseMASBuyProduct: () => purchaseMASBuyProduct,
    purchaseMASGetProducts: () => purchaseMASGetProducts,
    purchaseMASRestore: () => purchaseMASRestore,
    purchaseMakeAlipayOrder: () => purchaseMakeAlipayOrder,
    purchaseShow: () => purchaseShow,
    relationAdd: () => relationAdd,
    relationDelete: () => relationDelete,
    relationDeleteById: () => relationDeleteById,
    relationGet: () => relationGet,
    relationGetAll: () => relationGetAll,
    relationGetById: () => relationGetById,
    relationMergeOrAdd: () => relationMergeOrAdd,
    relationToggleHideById: () => relationToggleHideById,
    relationUpdate: () => relationUpdate,
    resetProjectChildrenTemplate: () => resetProjectChildrenTemplate,
    resizeExportView: () => resizeExportView,
    saveExportFile: () => saveExportFile,
    sciAddMetadata: () => sciAddMetadata,
    sciDelMetadataById: () => sciDelMetadataById,
    sciDelMetadataByItemId: () => sciDelMetadataByItemId,
    sciGetMetadata: () => sciGetMetadata,
    sciGetMetadataByCardReference: () => sciGetMetadataByCardReference,
    sciGetMetadataByDoi: () => sciGetMetadataByDoi,
    sciGetMetadataByItemId: () => sciGetMetadataByItemId,
    sciUpdateMetadata: () => sciUpdateMetadata,
    searchByKeyWord: () => searchByKeyWord,
    searchByProjectOrTag: () => searchByProjectOrTag,
    sendFeedback: () => sendFeedback,
    setDataVersion: () => setDataVersion,
    setHasSeenWalkThrough: () => setHasSeenWalkThrough,
    showItemOrFolder: () => showItemOrFolder,
    statisticsGetItems: () => statisticsGetItems,
    statisticsGetProjects: () => statisticsGetProjects,
    statisticsGetRecently: () => statisticsGetRecently,
    statisticsGetRecentlyGoals: () => statisticsGetRecentlyGoals,
    statisticsGetRecentlyModifiedContents: () =>
        statisticsGetRecentlyModifiedContents,
    statisticsGetTotal: () => statisticsGetTotal,
    statisticsGetTotalByDate: () => statisticsGetTotalByDate,
    statisticsGetTotalSinceInstall: () => statisticsGetTotalSinceInstall,
    stylesAll: () => stylesAll,
    stylesGet: () => stylesGet,
    stylesSet: () => stylesSet,
    tagAdd: () => tagAdd,
    tagAddFromImport: () => tagAddFromImport,
    tagAll: () => tagAll,
    tagDelete: () => tagDelete,
    tagGet: () => tagGet,
    tagGetByName: () => tagGetByName,
    tagGetHierarchicalName: () => tagGetHierarchicalName,
    tagMoveToRoot: () => tagMoveToRoot,
    tagScan: () => tagScan,
    tagUpdateColor: () => tagUpdateColor,
    tagUpdateName: () => tagUpdateName,
    tagUpdateParent: () => tagUpdateParent,
    templateAdd: () => templateAdd,
    templateAddIfNotExist: () => templateAddIfNotExist,
    templateAll: () => templateAll,
    templateDelete: () => templateDelete,
    templateGet: () => templateGet,
    templateMarkDefault: () => templateMarkDefault,
    templateUpdate: () => templateUpdate,
    themeGetSource: () => themeGetSource,
    themeSetSource: () => themeSetSource,
    trackEvent: () => trackEvent,
    trackPageView: () => trackPageView,
    trackScreenView: () => trackScreenView,
    trashcanAdd: () => trashcanAdd,
    trashcanAll: () => trashcanAll,
    trashcanDelete: () => trashcanDelete,
    trashcanEmpty: () => trashcanEmpty,
    trashcanGet: () => trashcanGet,
    trashcanGetTargetProject: () => trashcanGetTargetProject,
    trashcanRestoreItem: () => trashcanRestoreItem,
    trashcanRestoreItemsTo: () => trashcanRestoreItemsTo,
    updateForwardsCites: () => updateForwardsCites,
    winClose: () => winClose,
    winMaximize: () => winMaximize,
    winMinimize: () => winMinimize,
    writeFileToAssets: () => writeFileToAssets,
    writeImageToClipboard: () => writeImageToClipboard,
})

const r = "add_external_card",
    o = "card_turn_to_article",
    s = "document_update",
    l = "file_import_to_assets",
    c = "global_loading_hide",
    d = "global_loading_show",
    _ = "goal_update_item",
    m = "graph_external_cards_change",
    p = "item_backwards_cites_update",
    u = "item_title_updated",
    h = "item_update_content",
    f = "items_update",
    g = "items_update_tags",
    y = "items_update_tags_in_content",
    b = "project_selected_items_updated",
    w = "project_update",
    v = "projects_serde",
    x = "projects_update",
    k = "projects_update_one",
    A = "purchase_done",
    S = "relation_delete",
    T = "relations_update",
    z = "show_preferences",
    C = "sign_in",
    j = "sign_out",
    P = "tags_updated",
    D = "template_update",
    M = "toggle_editor_shortcut",
    E = "trashcan_add_items",
    I = "trashcan_restore_items",
    L = "trashcan_update",
    B = "unsorted_drag_update",
    O = "update_card_list",
    ping = async (duration = 1000) => {
        await new Promise((resolve) => setTimeout(resolve, duration))
        return "pong"
    },
    F = require("@auramarker/latdb")
var q = modulex.fn(F)

async function N(e) {
    return new Promise((t) => setTimeout(t, e))
}

const U = require("javascript-stringify"),
    G = (e) =>
        ["string", "number", "boolean"].includes(typeof e)
            ? e
            : (0, U.stringify)(e),
    W = require("lodash")
var $ = modulex.fn(W)
const V = require("glob")
var H = modulex.fn(V)
const Y = require("util"),
    J = async (e) => new Promise((t) => setTimeout(t, e)),
    K = (0, Y.promisify)(H()),
    Z = require("chalk")
var Q = modulex.fn(Z)
const X = require("dayjs")
var ee = modulex.fn(X)
const te = require("fs")
var ae = modulex.fn(te)
const ne = require("fs-extra")
var ie = modulex.fn(ne)
const re = require("path")
var oe,
    se,
    le = modulex.fn(re)
let ce =
    (2e3,
        (oe = (e, t, a) => {
            const n = $().throttle(a.value, 2e3)
            return (
                (a.value = function (...e) {
                    return n.apply(this, e)
                }),
                    a
            )
        }),
        (de = (se = class {
            constructor(e, t = !0) {
                ;(this.is_debug = void 0),
                    (this.root_dir = void 0),
                    (this.rw_state = null),
                    (this.n = 0),
                    (this.last_clean_ts = void 0),
                    (this.buffer = []),
                    (this.is_debug = t),
                    (this.root_dir = e),
                    (this.last_clean_ts = new Date().getTime()),
                    ie().ensureDirSync(this.root_dir),
                    this.info("LogManager initialized."),
                    this.cleanOldLogFiles().catch((e) => console.error(e))
            }

            get file() {
                let e = ee()().format("YYYY-MM-DD")
                return re.join(this.root_dir, e + ".log")
            }

            async waitWileRW(e = 1e4) {
                if (!this.rw_state) return
                let t = new Date().getTime()
                for (
                    ;
                    (await J(50), this.rw_state) && !(new Date().getTime() - t > e);
                ) ;
            }

            async dump() {
                await ie().ensureDir(this.root_dir),
                    await this.waitWileRW(),
                    (this.rw_state = "w")
                const e = this.buffer.join("")
                ;(this.buffer = []),
                    await te.promises.appendFile(this.file, e, "utf-8"),
                    (this.rw_state = null),
                new Date().getTime() - this.last_clean_ts > 432e5 &&
                this.cleanOldLogFiles().catch((e) => console.error(e))
            }

            async append(e) {
                ;(e = e.trimEnd() + "\n"),
                    this.buffer.push(e),
                    this.n++,
                    this.dump().catch((e) => console.error(e))
            }

            async log(e, ...t) {
                let a = `${ee()().format("YYYY-MM-DD HH:mm:ss")} ${
                    e ? `[${e}]` : ""
                } ${t.map(G).join(" ")}`
                if (this.is_debug)
                    switch (e) {
                        case "info":
                            console.log(Q().blue(a))
                            break
                        case "success":
                            console.log(Q().green(a))
                            break
                        case "warning":
                            console.log(Q().yellow(a))
                            break
                        case "error":
                            console.log(Q().red(a))
                            break
                        case "debug":
                            console.log(Q().bgCyan(a))
                            break
                        default:
                            console.log(a)
                    }
                "debug" !== e && (await this.append(a))
            }

            info(...e) {
                this.log("info", ...e).catch((e) => console.error(e))
            }

            success(...e) {
                this.log("success", ...e).catch((e) => console.error(e))
            }

            warning(...e) {
                this.log("warning", ...e).catch((e) => console.error(e))
            }

            error(...e) {
                this.log("error", ...e).catch((e) => console.error(e))
            }

            debug(...e) {
                this.log("debug", ...e).catch((e) => console.error(e))
            }

            async getFileList() {
                let e = await K(re.join(this.root_dir, "*.log"))
                return e.sort(), e
            }

            async cleanOldLogFiles() {
                this.last_clean_ts = new Date().getTime()
                let e = await this.getFileList(),
                    t = e.length
                if (!(t <= 7)) {
                    for (let a = 0; a < t - 7; a++) {
                        let t = e[a]
                        t !== this.file &&
                        ie().existsSync(t) &&
                        (await te.promises.rm(t))
                    }
                    this.info("old log files has been cleaned.")
                }
            }
        }).prototype),
        (_e = "dump"),
        (me = [oe]),
        (pe = Object.getOwnPropertyDescriptor(se.prototype, "dump")),
        (ue = se.prototype),
        (he = {}),
        Object.keys(pe).forEach(function (e) {
            he[e] = pe[e]
        }),
        (he.enumerable = !!he.enumerable),
        (he.configurable = !!he.configurable),
    ("value" in he || he.initializer) && (he.writable = !0),
        (he = me
            .slice()
            .reverse()
            .reduce(function (e, t) {
                return t(de, _e, e) || e
            }, he)),
    ue &&
    void 0 !== he.initializer &&
    ((he.value = he.initializer ? he.initializer.call(ue) : void 0),
        (he.initializer = void 0)),
    void 0 === he.initializer &&
    (Object.defineProperty(de, _e, he), (he = null)),
        se)
var de, _e, me, pe, ue, he
const fe = require("electron")
let ge = le().join(fe.app.getPath("logs"), "lat_log"),
    ye = new ce(ge, !1)
ye.info(`log_dir: ${ge}`)
const be = (e, ...t) => {
        fe.ipcMain &&
        (ye.info(`broadcast: [${e}]`),
            fe.ipcMain.emit("x_broadcast", null, {event: e, args: t}))
    },
    we = (e) => {
        let t = []
        return (
            e?.map((e) => {
                t.push(e), e.children && (t = [...t, ...we(e.children)])
            }),
                t
        )
    },
    ve = (e, t) => we(e).find((e) => t(e)),
    xe = (e, t) => we(e).filter(t),
    ke = (e, t) => {
        for (; ;) {
            let a = e.findIndex(t)
            if (!(a >= 0)) break
            e.splice(a, 1)
        }
        e.map((e) => ke(e.children || [], t))
    },
    Ae = (e, t, a) => {
        let n = a ? we(e).filter(a) : we(e),
            i = t.map((e) => n.findIndex((t) => t.id === e)),
            r = Math.min(...i),
            o = Math.max(...i)
        return n[o + 1] || n[r - 1]
    }

function Se(e, t) {
    if (e.findIndex((e) => e.id === t) > -1) return e
    let a = we(e)
    for (let e of a)
        if (
            Array.isArray(e.children) &&
            e.children.findIndex((e) => e.id === t) > -1
        )
            return e.children
    return e
}

function Te(e, t) {
    return we(e).find((e) => e.children?.find((e) => e.id === t)) || null
}

function ze(e, t) {
    let a = [],
        n = t
    for (; ;) {
        let t = Te(e, n)
        if (!t) break
        a.unshift(t), (n = t.id)
    }
    return a
}

const Ce = async (e) => {
    console.log(`read data from file: ${e} ...`),
        (e = le().join(__dirname, "data", e))
    try {
        return await ie().readJSON(e)
    } catch (_err) {
        return ye.error(`read data from file: ${e} failed!`), ye.error(_err), {}
    }
}
const je = [
    async function () {
        ;(await configGet("auto_backup")) &&
        (await (async function () {
            let e = await localKvGet("last_auto_backup_time_ms"),
                t = Date.now()
            if (!e || "number" != typeof e || e > t) return !0
            let a = await configGet("auto_backup_time"),
                n = t - e
            return "1d" === a
                ? n >= 864e5
                : "7d" === a
                    ? n >= 6048e5
                    : n >= 864e5
        })()) &&
        (ye.info("auto backup..."),
            await backupDo(),
            await localKvSet("last_auto_backup_time_ms", Date.now()),
            ye.info("auto backup done."))
    },
]

async function Pe() {
    for (let e of je)
        try {
            await e()
        } catch (_err) {
            ye.error(_err)
        }
    setTimeout(Pe, 1e4)
}

const De = {
        _key: "zh-CN",
        _name: "简体中文",
        about: "关于",
        about_us: "关于我们",
        account_delete_confirm: "确实要删除账号吗？",
        account_delete_confirm_message:
            "注意，本项操作将彻底删除你的账号以及数据，且不可恢复，请提前备份或导出数据。",
        account_settings: "账户设置",
        add_card: "新建卡片",
        addition_add_memo: "添加备忘",
        addition_add_tag: "添加标签",
        addition_add_project: "添加项目",
        addition_pin_to_right: "固定到右侧",
        addition_un_pin_to_right: "取消固定",
        addition_forward_link: "前向链接",
        addition_backward_link: "反向链接",
        addition_table_of_contents: "目录",
        all_cards: "所有卡片",
        all_files: "所有文件",
        already_a_member: "已有账号？",
        appearance: "外观",
        article: "文章",
        articles: "文章",
        auto_update_relaunch: "重启更新",
        backup: "备份",
        backup_before: "请先设置备份文件夹",
        backup_choose_folder: "选择文件夹",
        backup_enable_auto: "开启自动备份",
        backup_history: "备份记录",
        backup_now: "立刻备份",
        backup_restore: "恢复备份",
        backup_restore_from: "从这个备份恢复",
        cancel: "取消",
        cancel_cited: "取消引用",
        card: "卡片",
        cards: "卡片",
        card_library: "卡片库",
        change: "修改",
        change_backup_dir: "修改备份路径",
        change_display_name: "修改显示名称",
        change_icon: "更换图标",
        change_plan: "更改计划",
        choose_payment_method: "选择支付方式",
        cite: "引用",
        cited: "引用",
        cite_target_not_found: "引用目标未找到",
        close: "关闭",
        code_empty: "验证码为空！",
        colon: "：",
        config_unset: "未设置",
        congratulations: "恭喜！",
        continue: "继续",
        continue_read: "顺序阅读",
        cover: "封面和目录",
        copy: "复制",
        create_table_from: "创建table",
        create_tags: "创建标签",
        created_at: "创建时间",
        custom_style: "样式模版",
        cut: "剪切",
        data_merging: "正在合并数据……",
        default: "默认",
        delete: "删除",
        delete_account: "删除账号",
        delete_account_need_re_signin:
            "你需要退出并重新登录一次，方可删除当前账号！",
        delete_confirm: "确实要删除此项吗？",
        delete_n_items: "删除 {0} 项",
        display_name: "显示名称",
        duplicate: "创建副本",
        edit: "编辑",
        editor_preference: "编辑器选项",
        element_styles_color: "颜色",
        element_styles_color_default: "默认",
        element_styles_color_black: "黑色",
        element_styles_color_grey: "灰色",
        element_styles_color_light_grey: "浅灰",
        element_styles_color_deep_blue: "深蓝色",
        element_styles_color_blue: "蓝色",
        element_styles_color_green: "绿色",
        element_styles_color_mars_green: "玛尔斯绿",
        element_styles_color_dark_green: "军绿",
        element_styles_color_orange: "橙色",
        element_styles_color_brown: "咖啡色",
        element_styles_color_purple: "紫色",
        element_styles_color_pink: "粉色",
        element_styles_color_red: "红色",
        element_styles_color_yellow: "黄色",
        element_styles_build_in_magazine: "杂志",
        element_styles_build_in_paper_thesis: "论文",
        element_styles_build_in_report: "报告",
        element_styles_build_in_diary_notes: "日记/笔记",
        element_styles_thickness: "粗细",
        element_styles_number_style: "序号样式",
        element_styles_bullet_style: "点号样式",
        element_styles_bullet_disc: "实心圆点",
        element_styles_bullet_circle: "空心圆点",
        element_styles_bullet_square: "方形",
        element_styles_todo_style: "方形",
        element_styles_line_style: "边框样式",
        element_styles_line_style_solid: "实线",
        element_styles_line_style_dashed: "虚线",
        element_styles_todo_style_circle: "圆形",
        element_styles_quote_style_top: "横线",
        element_styles_quote_style_single: "竖线",
        element_styles_quote_style_quote: "引号",
        element_styles_box_style: "框样式",
        element_styles_check_style: "选中样式",
        element_styles_check_style_delete_line: "删除线",
        element_styles_check_style_high: "高亮",
        element_styles_check_style_high_color: "高亮色",
        element_styles_first_indent: "首行缩进",
        element_styles_paragraph: "文本",
        element_styles_head_1: "一级标题",
        element_styles_head_2: "二级标题",
        element_styles_head_3: "三级标题",
        element_styles_head_4: "四级标题",
        element_styles_head_5: "五级标题",
        element_styles_head_6: "六级标题",
        element_styles_indent: "缩进",
        element_styles_indent_none: "无",
        element_styles_border: "边框",
        element_styles_offset: "偏移",
        element_styles_quote_style: "引用样式",
        element_styles_list_style: "列表样式",
        element_styles_bulleted_list: "无序列表",
        element_styles_numbered_list: "有序列表",
        element_styles_todo_list: "待办列表",
        element_styles_quote: "引用",
        element_styles_text: "文本样式",
        element_styles_spacing: "间距",
        element_styles_spacing_line: "行高",
        element_styles_spacing_after: "段后距",
        element_styles_spacing_before: "段前距",
        enter_a_new_password: "请输入新密码",
        enter_new_password: "输入新密码",
        enter_the_code: "输入验证码",
        enter_the_code_sent_to: "请输入发送到 {0} 中的验证码。",
        enter_your_account_email: "请输入你的账号邮箱",
        err_email_exist: "Email 地址已存在",
        err_email_invalid: "Email 地址无效",
        err_unknown: "未知错误",
        err_username_characters: "用户名只能包含字母、数字、下划线、点",
        err_username_empty: "用户名不能为空",
        err_username_exist: "用户名已经存在",
        err_username_length_range: "用户名长度需在 {0} 到 {1} 字符之间",
        every_day: "每日",
        every_week: "每周",
        export: "导出",
        export_article: "文章导出",
        export_image: "导出图片",
        export_image_loading: "导出图片中",
        export_image_size: "图片尺寸",
        export_notes: "注释",
        export_pdf: "导出PDF",
        export_pdf_basic: "基本",
        export_pdf_advance: "高级",
        export_pdf_page_comment: "导出批注",
        export_pdf_page_footnote: "导出脚注",
        export_pdf_page_footnote_pos: "脚注位置",
        export_pdf_page_footnote_pos_article: "文档结尾",
        export_pdf_page_footnote_pos_page: "文页结尾",
        export_pdf_page_show_page_number: "显示页码",
        export_pdf_page_loading: "导出PDF中",
        export_pdf_page_number: "页码",
        export_pdf_page_size: "页面尺寸",
        export_pdf_page_break: "分页",
        export_project: "项目导出",
        export_type_image: "图片",
        export_with_type: "导出{}",
        feature_export_custom_layout: "自定义样式模版",
        feature_documents_in_project: "项目文档数",
        feature_export_image_and_pdf: "导出为 PDF/DOCX/图片",
        feature_goal_and_statistic: "写作目标 & 统计",
        feature_theme: "个性化主题",
        feature_flashcard: "闪卡统计 & 艾宾浩斯增强记忆",
        feature_knowledge_graph_nodes: "知识图谱节点数",
        feature_text_md_doc_export: "导出为 TXT/MD",
        feedback: "意见反馈",
        feedback_placeholder: "请留下你对产品的反馈或者建议",
        file: "文件",
        file_nonexistent: "文件不存在",
        file_open: "打开",
        file_open_by_other: "在其它应用中打开",
        file_path: "本地路径",
        file_size: "大小",
        focus_mode: "专注模式",
        focus_mode_typewriter_mode: "打字机模式",
        focus_mode_typewriter_mode_line: "高亮当前行",
        focus_mode_typewriter_mode_sentence: "句子",
        focus_mode_typewriter_mode_paragraph: "段落",
        focus_mode_typewriter_mode_none: "无需高亮",
        focus_mode_keyboard_sound: "键盘音",
        folder: "文件夹",
        footnote: "脚注",
        forget_password: "忘记密码了？",
        full_cite: "全文引用",
        go_back: "返回",
        go_to_sign_in: "去登录",
        goal: "目标",
        goal_achieve: "达成",
        goal_achieved: "已达成",
        goal_deadline: "截至日期",
        goal_words_target: "字数",
        goal_character_target: "字符数",
        goal_written: "已写",
        goal_left: "剩余",
        goal_delayed: "延迟",
        goal_rate: "已完成",
        goal_today: "今天",
        goal_choose_date: "选择日期",
        goal_not_set: "未设置",
        graph: "图谱",
        graph_filter: "内容筛选",
        graph_sort_out: "自动布局",
        graph_sort_out_confirm: "确定要自动布局吗？",
        graph_view_aerial_view: "鸟瞰视图",
        graph_view_mind_map: "思维导图",
        graph_view_plot_view: "情节视图",
        graph_view_preview_node: "预览",
        graph_view_title_node: "标题",
        graph_view_memo_node: "备忘",
        tag_hint: "标签提示",
        cite_graph: "引用关系",
        graph_node_copy_cite_link: "复制引用链接",
        graph_node_remove_from_project: "从项目中移除",
        graph_node_remove_from_tag: "从标签中移除",
        more: "更多操作",
        graph_relation_link: "关系连线",
        graph_drag_me: "拖动",
        graph_upgrade_tip: "已超过 15 个节点",
        help: "帮助",
        hi_lattics_pro: "Hi, Lattics Pro",
        hide: "隐藏",
        hide_others: "隐藏其他",
        hierarchy_title: "结构化标题",
        homepage: "主页",
        import: "导入",
        import_document: "导入文档",
        interval: "间隔",
        invalid_verify_code: "无效的验证码",
        item_created: "创建时间",
        item_last_modified: "最后修改",
        link: "链接",
        link_all: "链接全部",
        loading: "加载中...",
        math_type: "公式编辑",
        math_type_calculus: "微积分",
        math_type_character: "字符",
        math_type_elementary: "初等符号",
        math_type_function_and_set: " 函数&集合",
        math_type_geometry: "几何",
        math_type_text_mode: "LaTeX语法",
        math_type_please_use_text_mode:
            "当前输入可能存在不支持的语法，建议使用纯文本模式",
        membership_cancel_renew: "取消自动续期",
        membership_expiration_info: "会员将于 {0} 过期",
        membership_will_renew: "会员将于 {0} 自动续期",
        merge_docs_fail: "合并文档出错",
        merge_selected_docs: "合并文档",
        merge_selected_docs_as_new: "合并为新文档",
        metadata: "元数据",
        metadata_add_author: "添加作者",
        metadata_add_id: "添加标识符",
        metadata_item_type: "类型",
        metadata_author: "作者",
        metadata_editor: "编辑",
        metadata_contributor: "贡献者",
        metadata_translator: "翻译",
        metadata_reviewed_author: "审稿人",
        metadata_title: "标题",
        metadata_abstract: "摘要",
        metadata_journal: "期刊",
        metadata_publication: "出版物",
        metadata_time: "时间",
        metadata_issue: "期号",
        metadata_volume: "卷号",
        metadata_page: "页码",
        metadata_publisher: "出版商",
        metadata_series: "系列",
        metadata_doi: "DOI",
        metadata_pmid: "PMID",
        metadata_arxiv: "Arxiv",
        metadata_issn: "ISSN",
        metadata_isbn: "ISBN",
        metadata_url: "URL",
        metadata_keywords: "关键词",
        metadata_add_keywords: "添加关键词",
        bibliography: "参考文献",
        attach_local_pdf: "添加本地 PDF",
        minimize: "最小化",
        modified_at: "修改时间",
        new_article: "新建文章",
        new_document: "新建文章",
        new_project: "新建项目",
        new_update_available: "有可用的更新",
        no_matching_records: "无匹配记录",
        not_a_member: "还没有账号？",
        not_yet: "没有",
        now_you_can_use_the_new_password: "你可以用新密码登录了",
        ok: "确定",
        open_dir: "打开文件夹",
        open_main_window: "打开主窗口",
        page_n: "第N页",
        page_styles: "页面",
        page_styles_align_left: "居左",
        page_styles_align_center: "居中",
        page_styles_align_right: "居右",
        page_styles_align_justify: "两端对齐",
        page_styles_footer: "页脚",
        page_styles_footer_page_number: "页码",
        page_styles_footer_page_number_pos: "页码位置",
        page_styles_header: "页眉",
        page_styles_header_and_footer: "页眉页脚",
        page_styles_header_text_placeholder: "输入页眉文字",
        page_styles_page_margin: "页边距",
        page_styles_page_margin_top: "上边距",
        page_styles_page_margin_bottom: "下边距",
        page_styles_page_margin_left: "左边距",
        page_styles_page_margin_right: "右边距",
        paste: "粘贴",
        paste_as_text: "粘贴（纯文本）",
        payment_state_not_change:
            "订单状态未改变，请确认是否支付成功，或者稍后再试。",
        payment_succeed: "支付成功了吗？",
        payment_succeed_desc: "完成支付后，请点击下面的按钮刷新。",
        pref_about_us_more: "了解更多",
        pref_about_us_other_prod: "我们的其他产品",
        pref_about_us_varlens: "让手机秒变微单相机",
        pref_about_us_zine: "精美的手机图文笔记与写作应用",
        pref_backup_path: "备份路径：",
        pref_editor_context_menu: "样式菜单自动弹出",
        pref_editor_font: "默认字体",
        pref_editor_latin_font: "西文字体",
        pref_editor_asian_font: "中文字体",
        pref_editor_font_size: "默认字号",
        pref_editor_markdown: "Markdown语法转换",
        pref_editor_spellcheck: "拼写检查",
        pref_lang: "语言",
        pref_privacy_policy: "隐私政策",
        pref_terms_of_service: "服务条款",
        pref_update: "软件更新",
        pref_update_check: "检查更新",
        pref_update_checking: "检查中",
        pref_update_lasted: "您当前版本为最新版",
        pref_update_version: "软件版本",
        preferences: "选项",
        pretty_time_1_day_ago: "1 天前",
        pretty_time_1_hour_ago: "1 小时前",
        pretty_time_1_minute_ago: "1 分钟前",
        pretty_time_just_now: "刚刚",
        pretty_time_n_days_ago: "{0} 天前",
        pretty_time_n_hours_ago: "{0} 小时前",
        pretty_time_n_minute_ago: "{0} 分钟前",
        privacy_link: "https://lattics.zineapi.com/zh-CN/privacy-policy",
        privacy_policy: "隐私政策",
        project: "项目",
        projects: "项目",
        project_opening: "项目打开中...",
        project_package: "项目打包",
        project_package_info:
            "将项目中所有文章、卡片、文件、大纲，思维导图、引用、脚注、备忘、标签等完整信息打包为独立文件",
        project_package_save: "项目打包",
        project_editors: "协作者",
        purchase: "购买",
        purchase_monthly: "一个月",
        purchase_mas_monthly: "连续包月",
        purchase_yearly: "一年",
        purchase_mas_yearly: "连续包年",
        purchase_free_trail: "{}天试用",
        purchase_inform: "自动续费，可随时取消",
        purchase_pro_desc:
            "欢迎购买 Lattics Pro 会员，您可以享受其所有功能，并支持我们不断改进它",
        purchase_restore: "恢复购买",
        purchase_save: "节省",
        purchase_unsubscription_desc:
            "购买后，可以账号设置中管理或取消订阅。具体路径：设置 -> Apple ID -> 媒体与购买项目 -> 订阅",
        purchase_user_reviews_briefly_Drlcm: "非常有潜力的app",
        purchase_user_reviews_briefly_Drjimmoore: "它很独特",
        purchase_user_reviews_briefly_UltimateMac:
            "这个应用程序让写作变得非常有趣",
        purchase_user_reviews_briefly_Visesen: "看起来很不错",
        purchase_user_reviews_content_Drlcm:
            "我很喜欢这样的工作流程。 在右侧新建卡片，然后将卡片插入左侧的文章列表中。",
        purchase_user_reviews_content_Drjimmoore:
            "我真的很喜欢用它来组织一个长文章。 这是一个绝妙的主意，与我见过的其他任何 app 都不一样。",
        purchase_user_reviews_content_UltimateMac:
            "一款超越传统写作工具的应用，功能设计标新立异，界面设计布局优秀，审美高级。而且有我最想要的可拖放卡片库，这让写作变成一件非常有趣的事。",
        purchase_user_reviews_content_Visesen:
            "看得出来开发得很不错， 此外，开发人员可以快速响应反馈。",
        quit: "退出",
        redo: "重做",
        register_inform: "注册即表示您同意我们的 {0} 以及 {1}。",
        reload: "刷新",
        remove: "移除",
        remove_lattics_logo: "去除 Lattics 标记",
        rename: "重命名",
        repeat_password: "请重复密码",
        reset: "重置",
        reset_password: "重置密码",
        reset_zoom: "重置缩放",
        save: "保存",
        search: "搜索",
        search_show_all: "显示全部",
        search_placeholder: "搜索 Lattics",
        searching: "搜索中...",
        select_all: "全选",
        setting: "设置",
        settings: "设置",
        sign_in: "登录",
        sign_in_migration_check_desc: "将未登录时创建的内容迁移到登录帐户中",
        sign_out: "登出",
        sign_up: "注册",
        signin_err_email_invalid: "请输入一个有效的 Email 地址",
        signin_err_email_not_exists: "此 Email 未注册。",
        signin_err_email_not_verified: "Email 未验证。",
        signin_err_invalid_password: "密码错误。",
        signin_err_password_length: "至少需要 6 个字符",
        signup_email_exists: "Email 已经存在。",
        size: "尺寸",
        slogan: "「类脑式」知识管理笔记",
        split_horizontal: "水平",
        split_vertical: "垂直",
        statistics: "统计",
        statistics_recently: "最近",
        statistics_recently_last_month: "最近 30 天:",
        statistics_recently_modified_contents: "最近修改内容:",
        statistics_recently_words: "新增字数",
        statistics_recently_card: "新增卡片",
        statistics_recently_goal_day: "天",
        statistics_recently_date_formatter: "YYYY年M月",
        statistics_recently_date_sat: "六",
        statistics_total: "总计",
        statistics_total_since: "从 ",
        statistics_total_install_time_label: "安装 Lattics",
        statistics_total_have_written: "你已经写了:",
        statistics_total_all: "总计: (包括恢复和同步)",
        statistics_total_words: "字数",
        source_of_card: "来源",
        submit: "提交",
        success: "成功",
        table_of_contents: "目录",
        tag: "标签",
        tag_mode_filter: "过滤",
        tag_mode_filter_sub: "所有子标签",
        tags: "标签",
        template: "模板",
        template_choose_template: "选择模板",
        template_current_article: "当前文章",
        template_current_project: "当前项目",
        template_modify_styles: "修改样式",
        template_setting_scope: "设置范围",
        template_new: "保存为新模版",
        template_reset: "重置样式",
        template_set_as_default: "设置为默认",
        terms_of_service_link:
            "https://lattics.zineapi.com/zh-CN/terms_of_service",
        title_cite: "标题引用",
        toggle_dark_mode: "切换夜间模式",
        toggle_full_screen: "切换全屏",
        tooltip_article_comparison: "双文对照",
        tooltip_extension_info: "扩展信息",
        tooltip_standalone_window: "在独立窗口中编辑",
        tooltip_split_article: "切分文章",
        total: "金额",
        tow_passwords_not_match: "两次输入的密码不一致",
        trashcan: "回收站",
        trashcan_delete_confirm: "确实要彻底删除该项吗？",
        trashcan_empty: "清空",
        trashcan_empty_confirm: "确实要清空回收站吗？",
        trashcan_err_item_not_exist: "对象不存在。",
        trashcan_err_path_not_exist: "路径不存在。",
        trashcan_err_project_not_exist: "项目不存在。",
        trashcan_put_back: "还原",
        tutorial: "帮助手册",
        tutorial_url: "https://helps.auramarker.com/lattics/backup_and_sync",
        undo: "撤销",
        unhide: "取消隐藏",
        unlimited: "无限",
        unlink_mention: "未链接",
        untitled: "无标题",
        update: "更新",
        update_logs: "上传日志",
        update_logs_desc: "仅用于定位问题",
        update_now: "现在更新",
        upgrade: "升级",
        upgrade_now: "立即升级",
        uploading: "上传中...",
        version_number: "版本：{0}",
        view: "视图",
        walk_through_done: "完成",
        walk_through_home_sub_title: "增强人类知识、提升知识创造效率",
        walk_through_home_title: "「类脑式」\n知识管理笔记与写作",
        walk_through_next: "下一项",
        walk_through_prev: "上一项",
        walk_through_slide_five_title: "多种文档导出方式",
        walk_through_slide_four_title: "离线优先 \n& 全库备份",
        walk_through_slide_one_title: "将想法记录在卡片库中",
        walk_through_slide_three_title: "可拖动的\n块元素",
        walk_through_slide_two_title: "思维导图式\n项目大纲",
        welcome_aboard: "欢迎加入",
        welcome_back: "欢迎回来",
        window: "窗口",
        words: "字",
        characters: "字符",
        words_count: "字数",
        words_count_characters: "字符数(计空格)",
        words_count_characters_without_spaces: "字符数(不计空格)",
        words_count_asian: "中文字符",
        words_count_asian_non: "非中文单词",
        words_count_punctuations: "标点符号数",
        words_count_paragraphs: "段落数",
        yearly_price_avg: "12 个月，{0}/月",
        years: "年",
        yes: "是的",
        you_are_now_a_member: "你现在是 {} 会员了",
        zoom: "缩放",
        zoom_in: "放大",
        zoom_out: "缩小",
        editor_input_placeholder: "写点什么或者输入'/'快捷输入",
        done: "完成",
        ignore: "忽略",
        load_more: "加载更多",
        link_add_placeholder: "输入或者粘贴链接",
        image_caption_placeholder: "图片标题（可选）",
        turn_to_card: "转为卡片",
        turn_to_block_code: "转为代码块",
        link_to: "链接到",
        cite_filter_none: "无匹配项",
        create_or_search_cite: "创建或搜索引用",
        press_enter_add_cite: '按"回车"键',
        add_one: "添加",
        create_one: "创建",
        create_or_search_footnote: "创建或搜索脚注",
        add_a_comment: "添加批注",
        comment: "批注",
        font_family: "字体",
        font_size: "字号",
        font_color: "字体颜色",
        highlight_color: "高亮颜色",
        copy_link: "复制链接",
        align: "对齐方式",
        indent: "缩进",
        d_indent: "去缩进",
        line_height: "行高",
        width: "宽度",
        layout: "布局",
        clear_style: "清除样式",
        left: "左对齐",
        right: "右对齐",
        center: "居中",
        justify: "两端对齐",
        turn_to: "转为",
        line_space_normal: "单倍行距",
        line_space_double: "双倍行距",
        tag_deleted: "标签已被删除",
        last_used: "最近使用",
        card_deleted: "引用的{}已被删除",
        code_block: "代码块",
        separator: "分割线",
        code_block_language: "程序语言",
        table: "表格",
        add_column_before: "往前添加列",
        add_column_after: "往后添加列",
        add_row_before: "往前添加行",
        add_row_after: "往后添加行",
        delete_column: "删除列",
        delete_row: "删除行",
        unsorted: "未分类",
        sort: "排序",
        sort_mode_modified: "修改时间",
        sort_mode_created: "创建时间",
        sort_mode_char_code_inc: "A-Z",
        sort_mode_char_code_sub: "Z-A",
        theme_light: "白天",
        theme_dark: "夜间",
        theme_system: "跟随系统",
        theme_klein_blue: "克莱因蓝",
        theme_pantone_red: "潘通红",
        theme_tiffany_green: "蒂芙尼绿",
        theme_hermes_brown: "爱玛士棕",
        theme_silver: "银",
        theme_midnight_blue: "午夜蓝",
        theme_dark_rose: "玫瑰红",
        theme_marrs_green: "马尔斯绿",
        theme_ink: "墨",
        flashcard: "闪卡",
        flashcard_filter: "筛选",
        flashcard_filter_article: "文章",
        flashcard_filter_card: "卡片",
        flashcard_filter_outline: "项目大纲",
        flashcard_filter_extension: "扩展信息",
        flashcard_sort_mode_direct: "大纲正序",
        flashcard_sort_mode_inverse: "大纲反序",
        flashcard_sort_mode_random: "随机",
        flashcard_show_answer: "显示答案",
        flashcard_show_question: "显示问题",
        flashcard_next: "下一个",
        flashcard_back: "上一个",
        flashcard_complete: "完成",
        flashcard_completed: "已完成",
        flashcard_empty_tip: "请创建文章或卡片",
        flashcard_got_it: "掌握",
        flashcard_enhance: "增强",
        flashcard_ebbinghaus: "艾宾浩斯",
        flashcard_statistics: "统计",
        flashcard_statistics_total_have: "你已经:",
        flashcard_statistics_learned: "已学习",
        flashcard_statistics_got_it: "已掌握",
        flashcard_statistics_recently_learned: "最近学习:",
        flashcard_question_type_default: "问答",
        flashcard_question_type_fill_in_the_blanks: "填空",
        flashcard_question_type_choice: "选择",
        search_find: "查找",
        next: "下一个",
        previous: "上一个",
        search_replace: "替换",
        search_replace_all: "替换全部",
        search_total: "{1} 文章中有 {0} 个结果",
    },
    Me = {
        _key: "zh-TW",
        _name: "繁體中文",
        about: "關於",
        about_us: "關於我們",
        account_delete_confirm: "確實要刪除帳號嗎？",
        account_delete_confirm_message:
            "注意，本項操作將徹底刪除你的帳號以及數據，且不可恢復，請提前備份或導出數據。",
        account_settings: "帳戶設置",
        add_card: "新建卡片",
        addition_add_tag: "添加標籤",
        addition_add_project: "添加項目",
        addition_add_memo: "添加備忘",
        addition_pin_to_right: "固定到右側",
        addition_un_pin_to_right: "取消固定",
        addition_forward_link: "前向鏈接",
        addition_backward_link: "反向鏈接",
        addition_table_of_contents: "目錄",
        all_cards: "所有卡片",
        all_files: "所有文件",
        already_a_member: "已有帳號？ ",
        appearance: "外觀",
        article: "文章",
        articles: "文章",
        auto_update_relaunch: "重啟更新",
        backup: "備份",
        backup_before: "請先設置備份資料夾",
        backup_choose_folder: "選擇資料夾",
        backup_enable_auto: "開啟自動備份",
        backup_history: "備份記錄",
        backup_now: "立刻備份",
        backup_restore: "恢復備份",
        backup_restore_from: "從這個備份恢復",
        cancel: "取消",
        cancel_cited: "取消引用",
        card: "卡片",
        cards: "卡片",
        card_library: "卡片庫",
        change: "修改",
        change_backup_dir: "修改備份路徑",
        change_display_name: "修改顯示名稱",
        change_icon: "更換圖標",
        change_plan: "更改計劃",
        choose_payment_method: "選擇支付方式",
        cite: "引用",
        cited: "引用",
        cite_target_not_found: "找不到引用目標",
        close: "關閉",
        code_empty: "驗證碼為空！ ",
        colon: "：",
        config_unset: "未設置",
        congratulations: "恭喜！ ",
        continue: "繼續",
        continue_read: "順序閱讀",
        cover: "目錄和封面",
        copy: "複製",
        create_table_from: "創建table",
        create_tags: "創建標籤",
        created_at: "創建時間",
        custom_style: "樣式模板",
        cut: "剪切",
        data_merging: "正在合併數據……",
        default: "默認",
        delete: "刪除",
        delete_account: "刪除帳號",
        delete_account_need_re_signin:
            "你需要退出並重新登錄一次，方可刪除當前帳號！ ",
        delete_confirm: "確實要刪除此項嗎？ ",
        delete_n_items: "刪除 {0} 項",
        display_name: "顯示名稱",
        duplicate: "創建副本",
        edit: "編輯",
        element_styles_color: "顏色",
        element_styles_color_default: "預設",
        element_styles_color_black: "黑色",
        element_styles_color_grey: "灰色",
        element_styles_color_light_grey: "淺灰",
        element_styles_color_deep_blue: "深藍色",
        element_styles_color_blue: "藍色",
        element_styles_color_green: "綠色",
        element_styles_color_mars_green: "瑪爾斯綠",
        element_styles_color_dark_green: "軍綠",
        element_styles_color_orange: "橙色",
        element_styles_color_brown: "咖啡色",
        element_styles_color_purple: "紫色",
        element_styles_color_pink: "粉紅色",
        element_styles_color_red: "紅色",
        element_styles_color_yellow: "黃色",
        element_styles_build_in_magazine: "杂志",
        element_styles_build_in_paper_thesis: "论文",
        element_styles_build_in_report: "报告",
        element_styles_build_in_diary_notes: "日记/笔记",
        element_styles_thickness: "粗细",
        element_styles_number_style: "序号样式",
        element_styles_bullet_style: "点号样式",
        element_styles_box_style: "框样式",
        element_styles_check_style: "选中样式",
        element_styles_check_style_delete_line: "删除线",
        element_styles_check_style_high: "高亮",
        element_styles_check_style_high_color: "高亮色",
        element_styles_bullet_disc: "实心圆点",
        element_styles_bullet_circle: "空心圆点",
        element_styles_bullet_square: "方形",
        element_styles_line_style: "边框样式",
        element_styles_line_style_solid: "实线",
        element_styles_line_style_dashed: "虚线",
        element_styles_todo_style: "方形",
        element_styles_todo_style_circle: "圆形",
        element_styles_quote_style_top: "横线",
        element_styles_quote_style_single: "竖线",
        element_styles_quote_style_quote: "引号",
        element_styles_first_indent: "首行縮進",
        element_styles_paragraph: "文字",
        element_styles_head_1: "一級標題",
        element_styles_head_2: "二級標題",
        element_styles_head_3: "三級標題",
        element_styles_head_4: "四級標題",
        element_styles_head_5: "五級標題",
        element_styles_head_6: "六級標題",
        element_styles_indent: "縮進",
        element_styles_indent_none: "无",
        element_styles_border: "邊框",
        element_styles_offset: "偏移",
        element_styles_quote_style: "引用樣式",
        element_styles_list_style: "列表樣式",
        element_styles_bulleted_list: "項目符號清單",
        element_styles_numbered_list: "編號清單",
        element_styles_todo_list: "待辦清單",
        element_styles_quote: "引用",
        element_styles_text: "文字樣式",
        element_styles_spacing: "間距",
        element_styles_spacing_line: "行高",
        element_styles_spacing_after: "段後距",
        element_styles_spacing_before: "段前距",
        editor_preference: "編輯器選項",
        enter_a_new_password: "請輸入新密碼",
        enter_new_password: "輸入新密碼",
        enter_the_code: "輸入驗證碼",
        enter_the_code_sent_to: "請輸入發送到 {0} 中的驗證碼。 ",
        enter_your_account_email: "請輸入你的帳號郵箱",
        err_email_exist: "Email 地址已存在",
        err_email_invalid: "Email 地址無效",
        err_unknown: "未知錯誤",
        err_username_characters: "用戶名只能包含字母、數字、下劃線、點",
        err_username_empty: "用戶名不能為空",
        err_username_exist: "用戶名已經存在",
        err_username_length_range: "用戶名長度需在 {0} 到 {1} 字符之間",
        every_day: "每日",
        every_week: "每週",
        export: "導出",
        export_article: "文章導出",
        export_image: "导出圖片",
        export_image_loading: "导出圖片中",
        export_image_size: "圖片尺寸",
        export_notes: "注释",
        export_pdf: "導出PDF",
        export_pdf_basic: "基本",
        export_pdf_advance: "高級",
        export_pdf_page_comment: "导出批注",
        export_pdf_page_footnote: "导出註腳",
        export_pdf_page_footnote_pos: "註腳位置",
        export_pdf_page_footnote_pos_article: "文档结尾",
        export_pdf_page_footnote_pos_page: "文页结尾",
        export_pdf_page_show_page_number: "显示页码",
        export_pdf_page_loading: "导出PDF中",
        export_pdf_page_number: "页码",
        export_pdf_page_size: "文档尺寸",
        export_pdf_page_break: "分页",
        export_project: "項目導出",
        export_type_image: "图片",
        export_with_type: "导出{}",
        feature_export_custom_layout: "自定義樣式模版",
        feature_documents_in_project: "項目文檔數",
        feature_export_image_and_pdf: "導出為 PDF/DOCX/图片",
        feature_goal_and_statistic: "寫作目標 & 統計",
        feature_theme: "個性化主題",
        feature_flashcard: "閃卡統計 & 艾賓浩斯增强記憶",
        feature_knowledge_graph_nodes: "知識圖譜節點數",
        feature_text_md_doc_export: "導出為 TXT/MD",
        feedback: "意見反饋",
        feedback_placeholder: "請留下你對產品的反饋或者建議",
        file: "文件",
        file_nonexistent: "文件不存在",
        file_open: "打開",
        file_open_by_other: "在其它應用中打開",
        file_path: "本地路徑",
        file_size: "大小",
        focus_mode: "專注模式",
        focus_mode_typewriter_mode: "打字機模式",
        focus_mode_typewriter_mode_line: "高亮當前行",
        focus_mode_typewriter_mode_sentence: "句子",
        focus_mode_typewriter_mode_paragraph: "段落",
        focus_mode_typewriter_mode_none: "無需高亮",
        focus_mode_keyboard_sound: "鍵盤音",
        folder: "文件夾",
        footnote: "腳注",
        forget_password: "忘記密碼了？ ",
        full_cite: "全文引用",
        go_back: "返回",
        go_to_sign_in: "去登錄",
        goal: "目標",
        goal_achieve: "達成",
        goal_achieved: "已達成",
        goal_deadline: "截至日期",
        goal_words_target: "字數",
        goal_character_target: "字符數",
        goal_written: "已寫",
        goal_left: "剩餘",
        goal_delayed: "延遲",
        goal_rate: "已完成",
        goal_today: "今天",
        goal_choose_date: "选择日期",
        goal_not_set: "未设置",
        graph: "圖譜",
        graph_filter: "內容篩選",
        graph_sort_out: "自動佈局",
        graph_sort_out_confirm: "確定要自動佈局嗎？",
        graph_view_aerial_view: "鳥瞰視圖",
        graph_view_mind_map: "思維導圖",
        graph_view_plot_view: "情節視圖",
        graph_view_preview_node: "預覽",
        graph_view_title_node: "標題",
        graph_view_memo_node: "備忘",
        tag_hint: "標籤提示",
        cite_graph: "引用關係",
        graph_node_copy_cite_link: "複製引用連結",
        graph_node_remove_from_project: "從項目中移除",
        graph_node_remove_from_tag: "從標籤中移除",
        more: "更多操作",
        graph_relation_link: "關係連線",
        graph_drag_me: "拖動",
        graph_upgrade_tip: "已超過 15 個節點",
        help: "幫助",
        hi_lattics_pro: "Hi, Lattics Pro",
        hide: "隱藏",
        hide_others: "隱藏其他",
        hierarchy_title: "结构化标题",
        homepage: "主頁",
        import: "導入",
        import_document: "導入文檔",
        interval: "間隔",
        invalid_verify_code: "無效的驗證碼",
        item_created: "創建時間",
        item_last_modified: "最後修改",
        link: "連結",
        link_all: "連結全部",
        loading: "加載中...",
        math_type: "公式編輯",
        math_type_calculus: "微積分",
        math_type_character: "字符",
        math_type_elementary: "初等符號",
        math_type_function_and_set: "函數&集合",
        math_type_geometry: "幾何",
        math_type_text_mode: "LaTeX语法",
        math_type_please_use_text_mode:
            "當前輸入可能存在不支持的語法，建議使用純文本模式",
        membership_cancel_renew: "取消自动续期",
        membership_expiration_info: "會員將於 {0} 過期",
        membership_will_renew: "會員將於 {0} 自动续期",
        merge_docs_fail: "合併文檔出錯",
        merge_selected_docs: "合併文檔",
        merge_selected_docs_as_new: "合併为新文檔",
        metadata: "元数据",
        metadata_add_author: "添加作者",
        metadata_add_id: "添加 ID",
        metadata_item_type: "类型",
        metadata_author: "作者",
        metadata_editor: "编辑",
        metadata_contributor: "贡献者",
        metadata_translator: "译者",
        metadata_reviewed_author: "审核作者",
        metadata_title: "标题",
        metadata_abstract: "摘要",
        metadata_journal: "期刊",
        metadata_publication: "出版物",
        metadata_time: "时间",
        metadata_issue: "期号",
        metadata_volume: "卷号",
        metadata_page: "页码",
        metadata_publisher: "出版商",
        metadata_series: "系列",
        metadata_doi: "DOI",
        metadata_pmid: "PMID",
        metadata_arxiv: "Arxiv",
        metadata_issn: "ISSN",
        metadata_isbn: "ISBN",
        metadata_url: "URL",
        metadata_keywords: "关键词",
        metadata_add_keywords: "添加关键词",
        bibliography: "参考文献",
        attach_local_pdf: "添加本地 PDF",
        minimize: "最小化",
        modified_at: "修改時間",
        new_article: "新建文章",
        new_document: "新建文章",
        new_project: "新建項目",
        new_update_available: "有可用的更新",
        no_matching_records: "無匹配記錄",
        not_a_member: "還沒有帳號？ ",
        not_yet: "沒有",
        now_you_can_use_the_new_password: "你可以用新密碼登錄了",
        ok: "確定",
        open_dir: "打開文件夾",
        open_main_window: "打開主窗口",
        page_n: "第N页",
        page_styles: "頁面",
        page_styles_align_left: "居左",
        page_styles_align_center: "居中",
        page_styles_align_right: "居右",
        page_styles_align_justify: "兩端對齊",
        page_styles_footer: "頁腳",
        page_styles_footer_page_number: "頁碼",
        page_styles_footer_page_number_pos: "頁碼位置",
        page_styles_header: "頁眉",
        page_styles_header_and_footer: "頁眉頁腳",
        page_styles_header_text_placeholder: "輸入頁眉文字",
        page_styles_page_margin: "頁邊距",
        page_styles_page_margin_top: "上邊距",
        page_styles_page_margin_bottom: "下邊距",
        page_styles_page_margin_left: "左邊距",
        page_styles_page_margin_right: "右邊距",
        paste: "粘貼",
        paste_as_text: "粘貼（純文本）",
        payment_state_not_change:
            "訂單狀態未改變，請確認是否支付成功，或者稍後再試。",
        payment_succeed: "支付成功了嗎？",
        payment_succeed_desc: "完成支付後，請點擊下面的按鈕刷新。",
        pref_about_us_more: "瞭解更多",
        pref_about_us_other_prod: "我們的其他產品",
        pref_about_us_varlens: "讓手機秒變單眼相機",
        pref_about_us_zine: "精美的手機圖文筆記與寫作應用",
        pref_backup_path: "備份路徑：",
        pref_editor_context_menu: "樣式菜單自動彈出",
        pref_editor_font: "預設字體",
        pref_editor_latin_font: "西文字體",
        pref_editor_asian_font: "中文字體",
        pref_editor_font_size: "預設字型大小",
        pref_editor_markdown: "Markdown語法轉換",
        pref_editor_spellcheck: "拼寫檢查",
        pref_lang: "語言",
        pref_privacy_policy: "隱私政策",
        pref_terms_of_service: "服務條款",
        pref_update: "軟體更新",
        pref_update_check: "檢查更新",
        pref_update_checking: "檢查中",
        pref_update_lasted: "您當前版本為最新版",
        pref_update_version: "軟體版本",
        preferences: "選項",
        pretty_time_1_day_ago: "1 天前",
        pretty_time_1_hour_ago: "1 小時前",
        pretty_time_1_minute_ago: "1 分鐘前",
        pretty_time_just_now: "剛剛",
        pretty_time_n_days_ago: "{0} 天前",
        pretty_time_n_hours_ago: "{0} 小時前",
        pretty_time_n_minute_ago: "{0} 分鐘前",
        privacy_link: "https://lattics.zineapi.com/en-US/privacy-policy",
        privacy_policy: "隱私政策",
        project: "項目",
        projects: "項目",
        project_opening: "項目打開中...",
        project_package: "項目打包",
        project_package_info:
            "將項目中所有文章、卡片、文件、大綱，思維導圖、引用、腳註、備忘、標籤等完整信息打包為獨立文件",
        project_package_save: "項目打包",
        project_editors: "协作者",
        purchase: "購買",
        purchase_monthly: "一個月",
        purchase_mas_monthly: "連續包月",
        purchase_yearly: "一年",
        purchase_mas_yearly: "連續包年",
        purchase_free_trail: "{}天试用",
        purchase_inform: "自動續費，可隨時取消",
        purchase_pro_desc:
            "歡迎購買 Lattics Pro 會員，您可以享受其所有功能，並支持我們不斷改進它",
        purchase_restore: "恢復購買",
        purchase_save: "節省",
        purchase_unsubscription_desc:
            "購買後，可以帳號設置中管理或取消訂閱。具體路徑：設置 -> Apple ID -> 媒體與購買項目 -> 訂閱",
        purchase_user_reviews_briefly_Drlcm: "非常有潛力的app",
        purchase_user_reviews_briefly_Drjimmoore: "它很獨特",
        purchase_user_reviews_briefly_UltimateMac:
            "這個應用程序讓寫作變得非常有趣",
        purchase_user_reviews_briefly_Visesen: "看起來很不錯",
        purchase_user_reviews_content_Drlcm:
            "我很喜歡這樣的工作流程。 在右側新建卡片，然後將卡片插入左側的文章列表中。",
        purchase_user_reviews_content_Drjimmoore:
            "我真的很喜歡用它來組織一個長文章。 這是一個絕妙的主意，與我見過的其他任何 app 都不一樣。",
        purchase_user_reviews_content_UltimateMac:
            "一款超越傳統寫作工具的應用，功能設計標新立異，界面設計佈局優秀，審美高級。而且有我最想要的可拖放卡片庫，這讓寫作變成一件非常有趣的事。",
        purchase_user_reviews_content_Visesen:
            "看得出來開發得很不錯， 此外，開發人員可以快速響應反饋。",
        quit: "退出",
        redo: "重做",
        register_inform: "註冊即表示您同意我們的 {0} 以及 {1}。",
        reload: "重載",
        remove: "移除",
        remove_lattics_logo: "去除 Lattics 标记",
        rename: "重命名",
        repeat_password: "請重複密碼",
        reset: "重置",
        reset_password: "重置密碼",
        reset_zoom: "重置縮放",
        save: "保存",
        search: "搜索",
        search_placeholder: "搜索 Lattics",
        search_show_all: "顯示全部",
        searching: "搜索中...",
        select_all: "全選",
        setting: "設置",
        settings: "設置",
        sign_in: "登錄",
        sign_in_migration_check_desc: "將未登錄時創建的內容遷移到登錄帳戶中",
        sign_out: "登出",
        sign_up: "註冊",
        signin_err_email_invalid: "請輸入一個有效的 Email 地址",
        signin_err_email_not_exists: "此 Email 未註冊。 ",
        signin_err_email_not_verified: "Email 未驗證。 ",
        signin_err_invalid_password: "密碼錯誤。 ",
        signin_err_password_length: "至少需要 6 個字符",
        signup_email_exists: "Email 已經存在。 ",
        size: "尺寸",
        slogan: "「類腦式」知識管理筆記",
        split_horizontal: "水準",
        split_vertical: "垂直",
        statistics: "統計",
        statistics_recently: "最近",
        statistics_recently_last_month: "最近 30 天:",
        statistics_recently_modified_contents: "最近修改內容:",
        statistics_recently_words: "新增字數",
        statistics_recently_card: "新增卡片",
        statistics_recently_goal_day: "天",
        statistics_recently_date_formatter: "YYYY年M月",
        statistics_recently_date_sat: "六",
        statistics_total: "總計",
        statistics_total_since: "從 ",
        statistics_total_install_time_label: "安裝 Lattics",
        statistics_total_have_written: "你已經寫了:",
        statistics_total_all: "總計: (包括恢復和同步)",
        statistics_total_words: "字數",
        source_of_card: "來源",
        submit: "提交",
        success: "成功",
        table_of_contents: "目錄",
        tag: "標籤",
        tags: "標籤",
        template: "模板",
        template_choose_template: "選擇模板",
        template_current_article: "當前文章",
        template_current_project: "當前項目",
        template_modify_styles: "修改樣式",
        template_setting_scope: "設置範圍",
        template_new: "保存为新模版",
        template_reset: "重置样式",
        template_set_as_default: "設為默認",
        terms_of_service_link:
            "https://lattics.zineapi.com/en-US/terms_of_service",
        title_cite: "标题引用",
        toggle_dark_mode: "切換夜間模式",
        toggle_full_screen: "切換全屏",
        tooltip_article_comparison: "雙文對照",
        tooltip_extension_info: "擴展資訊",
        tooltip_standalone_window: "在獨立窗口中編輯",
        tooltip_split_article: "切分文章",
        total: "金額",
        tow_passwords_not_match: "兩次輸入的密碼不一致",
        trashcan: "回收站",
        trashcan_delete_confirm: "確實要徹底刪除該項嗎？ ",
        trashcan_empty: "清空",
        trashcan_empty_confirm: "確實要清空回收站嗎？ ",
        trashcan_err_item_not_exist: "對像不存在。 ",
        trashcan_err_path_not_exist: "路徑不存在。 ",
        trashcan_err_project_not_exist: "項目不存在。 ",
        trashcan_put_back: "還原",
        tutorial: "帮助手册",
        tutorial_url: "https://helps.auramarker.com/lattics/backup_and_sync",
        undo: "撤銷",
        unhide: "取消隱藏",
        unlimited: "無限",
        unlink_mention: "未連結",
        untitled: "無標題",
        update: "更新",
        update_logs: "上傳日誌",
        update_logs_desc: "僅用於定位問題",
        update_now: "現在更新",
        upgrade: "升級",
        upgrade_now: "立即陞級",
        uploading: "上傳中...",
        version_number: "版本：{0}",
        view: "視圖",
        walk_through_done: "完成",
        walk_through_home_sub_title: "增強人類知識、提升知識創造效率",
        walk_through_home_title: "「類腦式」\n知識管理筆記與寫作",
        walk_through_next: "下一項",
        walk_through_prev: "上一項",
        walk_through_slide_five_title: "多種文檔導出方式",
        walk_through_slide_four_title: "離線優先 \n& 全庫備份",
        walk_through_slide_one_title: "將想法記錄在卡片庫中",
        walk_through_slide_three_title: "可拖動的\n塊元素",
        walk_through_slide_two_title: "思維導圖式\n項目大綱",
        welcome_aboard: "歡迎加入",
        welcome_back: "歡迎回來",
        window: "窗口",
        words: "字",
        characters: "字符",
        words_count: "字數",
        words_count_characters: "字符數(計空格)",
        words_count_characters_without_spaces: "字符數(不計空格)",
        words_count_asian: "中文字符",
        words_count_asian_non: "非中文單詞",
        words_count_punctuations: "標點符號數",
        words_count_paragraphs: "段落數",
        yearly_price_avg: "12 個月，{0}/月",
        years: "年",
        yes: "是的",
        you_are_now_a_member: "你現在是 {} 會員了",
        zoom: "縮放",
        zoom_in: "放大",
        zoom_out: "縮小",
        editor_input_placeholder: "寫點什麼或者輸入'/'快捷輸入",
        done: "完成",
        ignore: "忽略",
        load_more: "加载更多",
        link_add_placeholder: "輸入或者粘贴連結",
        image_caption_placeholder: "图片标题（可选）",
        turn_to_card: "轉換為卡片",
        link_to: "連結到",
        cite_filter_none: "无匹配项",
        create_or_search_cite: "创建或搜索引用",
        press_enter_add_cite: '按"回车"键',
        add_one: "添加",
        create_one: "创建",
        create_or_search_footnote: "创建或搜索脚注",
        add_a_comment: "添加批注",
        comment: "批注",
        font_family: "字體",
        font_size: "字體大小",
        font_color: "字體顏色",
        highlight_color: "高亮顏色",
        copy_link: "複製連結",
        align: "對齊",
        indent: "縮排",
        d_indent: "去縮排",
        line_height: "行距",
        width: "寬度",
        layout: "版面",
        clear_style: "清除樣式",
        left: "左",
        right: "右",
        center: "中",
        justify: "兩端對齊",
        turn_to: "轉換為",
        turn_to_block_code: "轉換為代碼塊",
        line_space_normal: "单倍行距",
        line_space_double: "雙倍行距",
        tag_deleted: "标签已被删除",
        last_used: "最近使用",
        card_deleted: "引用的{}已被删除",
        code_block: "代码块",
        separator: "分割线",
        code_block_language: "程序語言",
        table: "表格",
        add_column_before: "往前添加列",
        add_column_after: "往后添加列",
        add_row_before: "往前添加行",
        add_row_after: "往后添加行",
        delete_column: "删除列",
        delete_row: "删除行",
        unsorted: "未分類",
        sort: "排序",
        sort_mode_modified: "修改時間",
        sort_mode_created: "創建時間",
        sort_mode_char_code_inc: "A-Z",
        sort_mode_char_code_sub: "Z-A",
        tag_mode_filter: "篩選",
        tag_mode_filter_sub: "所有子標籤",
        theme_light: "白天",
        theme_dark: "夜間",
        theme_system: "跟隨系統",
        theme_klein_blue: "克萊因藍",
        theme_pantone_red: "潘通紅",
        theme_tiffany_green: "蒂芙尼綠",
        theme_hermes_brown: "愛瑪士棕",
        theme_silver: "銀",
        theme_midnight_blue: "午夜藍",
        theme_dark_rose: "玫瑰紅",
        theme_marrs_green: "馬爾斯綠",
        theme_ink: "墨",
        flashcard: "閃卡",
        flashcard_filter: "篩選",
        flashcard_filter_article: "文章",
        flashcard_filter_card: "卡片",
        flashcard_filter_outline: "項目大綱",
        flashcard_filter_extension: "擴展資訊",
        flashcard_sort_mode_direct: "大綱正序",
        flashcard_sort_mode_inverse: "大綱反序",
        flashcard_sort_mode_random: "隨機",
        flashcard_show_answer: "顯示答案",
        flashcard_show_question: "顯示問題",
        flashcard_next: "下一個",
        flashcard_back: "上一個",
        flashcard_complete: "完成",
        flashcard_completed: "已完成",
        flashcard_empty_tip: "請創建文章或卡片",
        flashcard_got_it: "掌握",
        flashcard_enhance: "增强",
        flashcard_ebbinghaus: "艾賓浩斯",
        flashcard_statistics: "統計",
        flashcard_statistics_total_have: "你已經:",
        flashcard_statistics_learned: "已學習",
        flashcard_statistics_got_it: "已掌握",
        flashcard_statistics_recently_learned: "最近學習:",
        flashcard_question_type_default: "問答",
        flashcard_question_type_fill_in_the_blanks: "填空",
        flashcard_question_type_choice: "選擇",
        search_find: "查找",
        next: "下一個",
        previous: "上一個",
        search_replace: "替換",
        search_replace_all: "替換全部",
        search_total: "{1} 文章中有 {0} 個結果",
    },
    Ee = {
        en: {
            _key: "en-US",
            _name: "English",
            colon: ": ",
            project: "Project",
            projects: "Projects",
            article: "Article",
            articles: "Articles",
            card: "Card",
            cards: "Cards",
            all_cards: "All Cards",
            tag: "Tag",
            tags: "Tags",
            file: "File",
            all_files: "All Files",
            folder: "Folder",
            cancel: "Cancel",
            change: "Change",
            continue: "Continue",
            delete: "Delete",
            delete_confirm: "Are you sure to delete this item?",
            edit: "Edit",
            loading: "Loading...",
            remove: "Remove",
            rename: "Rename",
            reset: "Reset",
            save: "Save",
            submit: "Submit",
            update: "Update",
            upgrade: "Upgrade",
            upgrade_now: "Upgrade Now",
            uploading: "Uploading",
            created_at: "Created",
            modified_at: "Modified",
            default: "Default",
            more: "More",
            ok: "OK",
            success: "Success",
            untitled: "Untitled",
            done: "Done",
            ignore: "Ignore",
            load_more: "Load More",
            link_add_placeholder: "Input or paste a link",
            image_caption_placeholder: "Input caption for image(optional)",
            about: "About",
            close: "Close",
            copy: "Copy",
            cut: "Cut",
            help: "Help",
            hide: "Hide",
            hide_others: "Hide Others",
            homepage: "Homepage",
            minimize: "Minimize",
            open_main_window: "Main Window",
            paste: "Paste",
            paste_as_text: "Paste With Plain Text",
            preferences: "Preference",
            quit: "Quit",
            redo: "Redo",
            reload: "Reload",
            reset_zoom: "Reset Zoom",
            select_all: "Select All",
            toggle_dark_mode: "Dark Mode",
            toggle_full_screen: "Full Screen",
            undo: "Undo",
            unhide: "Unhide",
            view: "View",
            window: "Window",
            zoom: "Zoom",
            zoom_in: "Zoom In",
            zoom_out: "Zoom Out",
            walk_through_home_title: '"Brain-like"\nKnowledge Management Notes',
            walk_through_home_sub_title:
                "Augment Human Knowledge, Improve Efficiency of Knowledge Creation",
            walk_through_next: "Next",
            walk_through_prev: "Prev",
            walk_through_done: "Done",
            walk_through_slide_one_title:
                "Store Your Thoughts Into Card Library",
            walk_through_slide_two_title: "Mindmap-like Project Outline",
            walk_through_slide_three_title: "Draggable Block Element",
            walk_through_slide_four_title:
                "Offline First & Full-library Backup",
            walk_through_slide_five_title:
                "A Variety of Document Export Methods",
            new_project: "New project",
            change_icon: "Change Icon",
            new_document: "New article",
            new_article: "New article",
            duplicate: "Duplicate",
            merge_selected_docs: "Merge articles",
            merge_selected_docs_as_new: "Merge as new article",
            merge_docs_fail: "Merge articles failed",
            delete_n_items: "Delete {0} items",
            continue_read: "Sequence Reading",
            editor_input_placeholder: "Write something or input '/'",
            tooltip_extension_info: "Extension Info",
            tooltip_standalone_window: "Edit in Standalone Window",
            tooltip_article_comparison: "Bi-article Comparison",
            split_vertical: "Vertical",
            split_horizontal: "Horizontal",
            tooltip_split_article: "Split Article",
            words: "words",
            characters: "characters",
            words_count: "Words",
            words_count_characters: "Characters",
            words_count_characters_without_spaces: "Without spaces",
            words_count_asian: "Asian characters",
            words_count_asian_non: "Non-Asian words",
            words_count_punctuations: "Punctuations",
            words_count_paragraphs: "Paragraphs",
            cite: "Cite",
            cited: "Cited ",
            cite_target_not_found: "Cite Not Found",
            cancel_cited: "Cancel Cited",
            change_display_name: "Change Display Name",
            full_cite: "Full Cite",
            title_cite: "Title Cite",
            display_name: "Display Name",
            turn_to_card: "Turn to Card",
            link_to: "Link To",
            cite_filter_none: "No matching records",
            create_or_search_cite: "Create or search for a cite",
            press_enter_add_cite: "Press “Enter” to",
            add_one: " add a ",
            create_one: " create a ",
            create_or_search_footnote: "Create or search for a footnote",
            add_a_comment: "Add a comment",
            comment: "Comment",
            footnote: "Footnote",
            create_table_from: "Create Table",
            create_tags: "Create tags",
            file_nonexistent: "File does not exist",
            file_open: "Open",
            file_open_by_other: "Open in Other App",
            file_path: "Local path",
            file_size: "Size",
            font_family: "Font",
            font_size: "Font Size",
            font_color: "Font Color",
            highlight_color: "Highlight Color",
            copy_link: "Copy Link",
            align: "Align",
            indent: "Indent",
            d_indent: "De-Indent",
            line_height: "Line Spacing",
            width: "Width",
            layout: "Layout",
            clear_style: "Clear Style",
            left: "Left",
            right: "Right",
            center: "Center",
            justify: "Justify",
            turn_to: "Turn To",
            turn_to_block_code: "Turn To Code",
            line_space_normal: "Normal",
            line_space_double: "Double",
            unsorted: "Unsorted",
            sort: "Sort",
            sort_mode_modified: "Date Modified",
            sort_mode_created: "Date Created",
            sort_mode_char_code_inc: "A-Z",
            sort_mode_char_code_sub: "Z-A",
            tag_mode_filter: "Filter",
            tag_mode_filter_sub: "All Sub Tags",
            trashcan: "Trashcan",
            trashcan_empty: "Empty",
            trashcan_put_back: "Put back",
            trashcan_delete_confirm:
                "Are you sure to permanently delete this item?",
            trashcan_empty_confirm:
                "Are you sure you want to empty the trashcan?",
            trashcan_err_item_not_exist: "Item does not exist",
            trashcan_err_path_not_exist: "Path does not exist.",
            trashcan_err_project_not_exist: "Project does not exist.",
            export: "Export",
            export_article: "Article Export",
            export_image: "Export to Image",
            export_image_loading: "Exporting Image",
            export_image_size: "Image Size",
            export_notes: "Notes",
            export_pdf: "Export to PDF",
            export_pdf_basic: "Basic",
            export_pdf_advance: "Advanced",
            export_pdf_page_comment: "Comments",
            export_pdf_page_footnote: "Export Footnotes",
            export_pdf_page_footnote_pos: "Footnote Position",
            export_pdf_page_footnote_pos_article: "End of Document",
            export_pdf_page_footnote_pos_page: "Bottom of Page",
            export_pdf_page_show_page_number: "Show Page Number",
            export_pdf_page_loading: "Exporting PDF",
            export_pdf_page_number: "Page Number",
            export_pdf_page_size: "Page Size",
            export_pdf_page_break: "Page Break",
            export_project: "Project Export",
            export_type_image: "Image",
            export_with_type: "Export {}",
            page_n: "Page N",
            page_styles: "Page",
            page_styles_align_left: "Left",
            page_styles_align_center: "Center",
            page_styles_align_right: "Right",
            page_styles_align_justify: "Justify",
            page_styles_footer: "Footer",
            page_styles_footer_page_number: "Page Number",
            page_styles_footer_page_number_pos: "Position",
            page_styles_header: "Header",
            page_styles_header_and_footer: "Header and Footer",
            page_styles_header_text_placeholder: "Input header text",
            page_styles_page_margin: "Page Margin",
            page_styles_page_margin_top: "Top",
            page_styles_page_margin_bottom: "Bottom",
            page_styles_page_margin_left: "Left",
            page_styles_page_margin_right: "Right",
            table_of_contents: "Table of Contents",
            cover: "Cover and Table of Contents",
            hierarchy_title: "Hierarchy Title",
            slogan: '"Brain-like" Knowledge Management Notes',
            remove_lattics_logo: "Remove Lattics logo",
            import: "Import",
            import_document: "Import document",
            attach_local_pdf: "Attach Local PDF",
            metadata: "Metadata",
            metadata_add_author: "Add Author",
            metadata_add_id: "Add ID",
            metadata_item_type: "Item Type",
            metadata_author: "Author",
            metadata_editor: "Editor",
            metadata_contributor: "Contributor",
            metadata_translator: "Translator",
            metadata_reviewed_author: "Reviewed Author",
            metadata_title: "Title",
            metadata_abstract: "Abstract",
            metadata_journal: "Journal",
            metadata_publication: "Publication",
            metadata_time: "Time",
            metadata_issue: "Issue",
            metadata_volume: "Volume",
            metadata_page: "Page",
            metadata_publisher: "Publisher",
            metadata_series: "Series",
            metadata_doi: "DOI",
            metadata_pmid: "PMID",
            metadata_arxiv: "Arxiv",
            metadata_issn: "ISSN",
            metadata_isbn: "ISBN",
            metadata_url: "URL",
            metadata_keywords: "Keywords",
            metadata_add_keywords: "Add Keywords",
            bibliography: "Bibliography",
            addition_pin_to_right: "Pin to Dock",
            addition_un_pin_to_right: "Undock",
            addition_add_tag: "Add tags",
            addition_add_project: "Add project",
            tag_deleted: "The tag has been deleted",
            addition_add_memo: "Memo here",
            addition_forward_link: "Forward Link",
            addition_backward_link: "Backward Link",
            unlink_mention: "Unlinked",
            link: "Link",
            link_all: "Link All",
            addition_table_of_contents: "Table of Contents",
            item_created: "Created",
            item_last_modified: "Last Modified",
            last_used: "Last Used",
            source_of_card: "Source",
            search: "Search",
            search_placeholder: "Search in Lattics",
            searching: "Searching...",
            search_show_all: "Show All",
            no_matching_records: "No matching records",
            search_find: "Find",
            next: "Next Match",
            previous: "Previous Match",
            search_replace: "Replace",
            search_replace_all: "Replace All",
            search_total: "{0} results in {1} files",
            math_type: "Math Equation",
            math_type_calculus: "Calculus",
            math_type_character: "Alphabet",
            math_type_elementary: "Basic",
            math_type_function_and_set: " Function & Set",
            math_type_geometry: "Geometry",
            math_type_text_mode: "LaTeX Syntax",
            math_type_please_use_text_mode:
                "There may be unsupported syntax for the current input, and it is recommended to use plain text mode.",
            code_block: "Code",
            separator: "Separator",
            code_block_language: "Program Language",
            table: "Table",
            add_column_before: "Add Column Before",
            add_column_after: "Add Column After",
            add_row_before: "Add Row Before",
            add_row_after: "Add Row After",
            delete_column: "Delete Column",
            delete_row: "Delete Row",
            goal: "Goal",
            goal_deadline: "Deadline",
            goal_choose_date: "Choose Date",
            goal_today: "Today",
            goal_left: "Remaining",
            goal_delayed: "Delayed",
            goal_words_target: "Words",
            goal_character_target: "Characters",
            goal_not_set: "Not Set",
            goal_written: "Written",
            goal_rate: "Finished",
            goal_achieve: "Achieve",
            goal_achieved: "Achieved",
            focus_mode: "Focus Mode",
            focus_mode_typewriter_mode: "Typewriter Mode",
            focus_mode_typewriter_mode_line: "Focus on line",
            focus_mode_typewriter_mode_sentence: "Sentence",
            focus_mode_typewriter_mode_paragraph: "Paragraph",
            focus_mode_typewriter_mode_none: "None",
            focus_mode_keyboard_sound: "Keyboard Sound",
            project_opening: "Opening project...",
            project_package: "Project Packaging",
            project_package_info:
                "To package all articles, cards, files, outline, mindmap, cites, footnotes, memos, tags and other complete information in the project as a standalone file",
            project_package_save: "Project Packaging",
            project_editors: "Editors",
            card_library: "Cards",
            add_card: "Add card",
            card_deleted: "The {} of citation has been deleted",
            graph: "Graph",
            graph_filter: "Contents Filter",
            graph_sort_out: "Auto Layout",
            graph_sort_out_confirm: "Are you sure you want auto layout?",
            graph_view_mind_map: "Mindmap",
            graph_view_plot_view: "Plot of Story",
            graph_view_aerial_view: "Aerial View",
            graph_view_preview_node: "Preview",
            graph_view_title_node: "Title",
            graph_view_memo_node: "Memo",
            tag_hint: "Tag Hint",
            cite_graph: "Cite Graph",
            graph_node_copy_cite_link: "Copy Cite Link",
            graph_node_remove_from_project: "Remove from Project",
            graph_node_remove_from_tag: "Remove from Tag",
            graph_relation_link: "Relation Link",
            graph_drag_me: "Drag Me",
            graph_upgrade_tip: "Exceeded 15 free nodes",
            flashcard: "Flashcard",
            flashcard_filter: "Filter",
            flashcard_filter_article: "Articles",
            flashcard_filter_card: "Cards",
            flashcard_filter_outline: "Project Outline",
            flashcard_filter_extension: "Extension Info",
            flashcard_sort_mode_direct: "Outline Order",
            flashcard_sort_mode_inverse: "Inverse Outline Order",
            flashcard_sort_mode_random: "Random",
            flashcard_show_answer: "Show Answer",
            flashcard_show_question: "Show Question",
            flashcard_next: "Next",
            flashcard_back: "Back",
            flashcard_complete: "Complete",
            flashcard_completed: "Completed",
            flashcard_empty_tip: "Flash cards come from articles or cards",
            flashcard_got_it: "Got It",
            flashcard_enhance: "Enhance",
            flashcard_ebbinghaus: "Ebbinghaus",
            flashcard_statistics: "Statistics",
            flashcard_statistics_total_have: "You have:",
            flashcard_statistics_learned: "Learned",
            flashcard_statistics_got_it: "Got it",
            flashcard_statistics_recently_learned: "Recently Learned:",
            flashcard_question_type_default: "Q & A",
            flashcard_question_type_fill_in_the_blanks: "Fill in the blanks",
            flashcard_question_type_choice: "Multiple choice",
            template: "Template",
            template_choose_template: "Choose Template",
            template_current_article: "Current Article",
            template_current_project: "Current Project",
            template_modify_styles: "Modify Styles",
            template_setting_scope: "Setting Scope",
            template_new: "Save as New Template",
            template_reset: "Restore Style",
            template_set_as_default: "Set as default",
            custom_style: "Style Template",
            element_styles_color: "Color",
            element_styles_color_default: "Default",
            element_styles_color_black: "Black",
            element_styles_color_grey: "Grey",
            element_styles_color_light_grey: "Light Grey",
            element_styles_color_deep_blue: "Deep Blue",
            element_styles_color_blue: "Blue",
            element_styles_color_green: "Green",
            element_styles_color_mars_green: "Mars Green",
            element_styles_color_dark_green: "Dark Green",
            element_styles_color_orange: "Orange",
            element_styles_color_brown: "Brown",
            element_styles_color_pink: "Pink",
            element_styles_color_purple: "Purple",
            element_styles_color_red: "Red",
            element_styles_color_yellow: "Yellow",
            element_styles_build_in_magazine: "Magazine",
            element_styles_build_in_paper_thesis: "Paper & Thesis",
            element_styles_build_in_report: "Report",
            element_styles_build_in_diary_notes: "Diary & Notes",
            element_styles_thickness: "Thickness",
            element_styles_number_style: "Numberic Style",
            element_styles_bullet_style: "Bullet Style",
            element_styles_box_style: "Box Style",
            element_styles_check_style: "Checkbox Style",
            element_styles_check_style_delete_line: "Line Through",
            element_styles_check_style_high: "Highlight",
            element_styles_check_style_high_color: "Highlight Color",
            element_styles_bullet_disc: "Disc",
            element_styles_bullet_circle: "Circle",
            element_styles_bullet_square: "Square",
            element_styles_todo_style: "Square",
            element_styles_line_style: "Line Style",
            element_styles_line_style_solid: "Solid",
            element_styles_line_style_dashed: "Dashed",
            element_styles_todo_style_circle: "Circle",
            element_styles_quote_style_top: "Line of Top",
            element_styles_quote_style_single: "Line of Left",
            element_styles_quote_style_quote: "Quotation",
            element_styles_first_indent: "First Line Indent",
            element_styles_paragraph: "Text",
            element_styles_head_1: "Heading 1",
            element_styles_head_2: "Heading 2",
            element_styles_head_3: "Heading 3",
            element_styles_head_4: "Heading 4",
            element_styles_head_5: "Heading 5",
            element_styles_head_6: "Heading 6",
            element_styles_indent: "Indent",
            element_styles_indent_none: "None",
            element_styles_border: "Border",
            element_styles_offset: "Offset",
            element_styles_quote_style: "Quote Style",
            element_styles_list_style: "List Style",
            element_styles_bulleted_list: "Bullet List",
            element_styles_numbered_list: "Numeric List",
            element_styles_todo_list: "Todo List",
            element_styles_quote: "Quote",
            element_styles_text: "Text Style",
            element_styles_spacing: "Spacing",
            element_styles_spacing_line: "Line",
            element_styles_spacing_after: "After Paragraph",
            element_styles_spacing_before: "Before Paragraph",
            statistics: "Statistics",
            statistics_recently: "Recently",
            statistics_total: "Total",
            statistics_recently_goal_day: "d",
            statistics_recently_date_formatter: "MMM YYYY",
            statistics_recently_date_sat: "Sat",
            statistics_recently_last_month: "Last 30 days:",
            statistics_recently_words: "Added Words",
            statistics_recently_card: "New Cards",
            statistics_recently_modified_contents: "Modified Contents:",
            statistics_total_since: "Since ",
            statistics_total_install_time_label: "Date of Lattics installed",
            statistics_total_have_written: "You have written:",
            statistics_total_all: "Total: (Including Restore or Sync)",
            statistics_total_words: "Words",
            tutorial: "Tutorial",
            tutorial_url:
                "https://helps.auramarker.com/en/lattics/backup_and_sync",
            pretty_time_1_day_ago: "1 day ago",
            pretty_time_1_hour_ago: "1 hour ago",
            pretty_time_1_minute_ago: "1 minute ago",
            pretty_time_just_now: "Just now",
            pretty_time_n_days_ago: "{0} days ago",
            pretty_time_n_hours_ago: "{0} hours ago",
            pretty_time_n_minute_ago: "{0} minutes ago",
            setting: "Setting",
            settings: "Settings",
            account_settings: "Account Setting",
            appearance: "Appearance",
            pref_lang: "Languages",
            editor_preference: "Editor Preference",
            backup: "Backup & Sync",
            pref_update: "Update",
            feedback: "Feedback",
            about_us: "About Us",
            hi_lattics_pro: "Hi, Lattics Pro",
            not_a_member: "Have no account?",
            already_a_member: "Already have a membership?",
            sign_out: "Sign Out",
            sign_up: "Sign Up",
            delete_account: "Delete Account",
            account_delete_confirm: "Do you have to delete the account?",
            account_delete_confirm_message:
                "Please note that this operation will completely delete your account and data is not recoverable, so please backup or export your data in advance.",
            delete_account_need_re_signin:
                "Please sign in again to delete your account.",
            membership_cancel_renew: "Cancel Auto Renew",
            membership_expiration_info: "Membership will be expired on {0}",
            membership_will_renew: "Membership will renew on {0}",
            theme_light: "Light",
            theme_dark: "Dark",
            theme_system: "System",
            theme_klein_blue: "Klein Blue",
            theme_pantone_red: "Pantone Red",
            theme_tiffany_green: "Tiffany Green",
            theme_hermes_brown: "Hermes Brown",
            theme_silver: "Silver",
            theme_midnight_blue: "Midnight Blue",
            theme_dark_rose: "Dark Rose",
            theme_marrs_green: "Marrs Green",
            theme_ink: "Ink",
            pref_editor_font: "Default Font",
            pref_editor_latin_font: "Latin Font",
            pref_editor_asian_font: "Asian Font",
            pref_editor_font_size: "Font Size",
            pref_editor_spellcheck: "Spelling Check",
            pref_editor_markdown: "Enable Markdown Syntax",
            pref_editor_context_menu: "Enable Popup Menu",
            backup_before: "Please set the backup path for Lattics",
            backup_choose_folder: "Choose Folder",
            pref_backup_path: "Backup path:",
            config_unset: "Not Set",
            change_backup_dir: "Change Backup Path",
            open_dir: "Open directory",
            backup_now: "Backup Now",
            backup_restore: "Restore Backup",
            backup_enable_auto: "Enable Auto Backup",
            backup_history: "Backup history",
            size: "Size",
            backup_restore_from: "Restore from this backup",
            interval: "Interval",
            every_day: "Every day",
            every_week: "Every week",
            pref_update_lasted: "Your Lattics is up to date",
            pref_update_version: "App Version",
            pref_update_check: "Check Update",
            pref_update_checking: "Checking",
            new_update_available: "New update available",
            version_number: "Version: {0}",
            update_now: "Update now",
            auto_update_relaunch: "Relaunch",
            feedback_placeholder:
                "Please leave your suggestions or ideas to us",
            update_logs: "Send runtime logs",
            update_logs_desc: "It is only used for troubleshooting",
            pref_terms_of_service: "Terms of Service",
            terms_of_service_link:
                "https://lattics.zineapi.com/en-US/terms_of_service",
            pref_privacy_policy: "Privacy Policy",
            pref_about_us_other_prod: "Our Other Apps",
            pref_about_us_more: "Learn More",
            pref_about_us_zine: "A Beautiful Notes and Writing Mobile App",
            pref_about_us_varlens: "DSLR in Phone",
            sign_in: "Sign In",
            sign_in_migration_check_desc:
                "Migrate the contents created in un-logged into the login account",
            data_merging: "Merging data...",
            register_inform:
                "By sign in means you are agree with our {0}, and {1}.",
            privacy_policy: "Privacy Policy",
            privacy_link: "https://lattics.zineapi.com/en-US/privacy-policy",
            signin_err_email_invalid: "Please enter a valid email address",
            signin_err_email_not_exists: "This Email is not registered.",
            signin_err_email_not_verified: "Email is not verified.",
            signin_err_invalid_password: "Invalid password.",
            signin_err_password_length: "6 characters at least",
            forget_password: "Forgot your password?",
            enter_your_account_email: "Please enter your account email",
            enter_the_code: "Enter the verify code",
            enter_the_code_sent_to: "The verify code is sent to: {0}",
            code_empty: "The code is empty!",
            invalid_verify_code: "Invalid verify code",
            reset_password: "Reset Password",
            enter_new_password: "Enter New Password",
            enter_a_new_password: "Enter a new password",
            repeat_password: "Repeat Password",
            tow_passwords_not_match: "The two passwords do not match",
            now_you_can_use_the_new_password:
                "Now you can sign in with the new password",
            welcome_aboard: "Welcome aboard",
            welcome_back: "Welcome back",
            go_to_sign_in: "Go to Sign In",
            go_back: "Go back",
            signup_email_exists: "Email already exists.",
            err_unknown: "Unknown error",
            err_username_characters:
                "Username can only contain letters, numbers, underscores and dots",
            err_username_empty: "Username cannot be empty",
            err_username_exist: "Username already exists",
            err_username_length_range:
                "Please enter a username between {0} and {1} characters",
            err_email_exist: "Email already exists",
            err_email_invalid: "Email address is invalid",
            change_plan: "Change Plan",
            purchase: "Purchase",
            purchase_pro_desc:
                "Welcome to purchase Lattics Pro membership, you can enjoy all of its features, and support us to improve it consistently",
            feature_documents_in_project: "Documents in Project",
            feature_knowledge_graph_nodes: "Knowledge Graph Nodes",
            feature_export_custom_layout: "Customized Style Template",
            feature_text_md_doc_export: "Export TXT/MD",
            feature_export_image_and_pdf: "Export PDF/DOCX/Image",
            feature_goal_and_statistic: "Goal & Statistic",
            feature_theme: "Customized Themes",
            feature_flashcard: "Flashcard Statistic & Ebbinghaus",
            unlimited: "Unlimited",
            purchase_free_trail: "{}-Days Trial",
            purchase_monthly: "Monthly Plan",
            purchase_mas_monthly: "Monthly Plan",
            purchase_yearly: "Yearly Plan",
            purchase_mas_yearly: "Yearly Plan",
            years: "Years",
            purchase_save: "Save",
            yearly_price_avg: "12 months at {0}/mon",
            purchase_restore: "Restore Purchase",
            purchase_inform: "Auto-renewal, Cancel at anytime",
            purchase_unsubscription_desc:
                'You can go to the account settings to manage the subscription and cancel the subscription after purchase. The specific path is: "Settings" -> Apple ID -> Media & Purchase -> Subscription',
            choose_payment_method: "Choose Your Payment Method",
            total: "Total",
            congratulations: "Congratulations!",
            you_are_now_a_member: "You are {} now",
            payment_succeed: "Payment Succeeded?",
            payment_succeed_desc:
                'If you have finished the payment, please click "Yes" button to refresh.',
            not_yet: "Not yet",
            yes: "Yes",
            payment_state_not_change:
                "The status of the order has not changed, please confirm whether the payment is successful, or try again later. ",
            purchase_user_reviews_briefly_Drlcm: "It’s Unique",
            purchase_user_reviews_content_Drlcm:
                "I actually really enjoyed using this to organize a long document. It is a wonderful idea and unlike anything else i've seen.",
            purchase_user_reviews_briefly_Drjimmoore: "Nice potential !",
            purchase_user_reviews_content_Drjimmoore:
                "What I very much like is the workflow. From writing on cards on the right side, to putting cards into a list of articles on the left side.",
            purchase_user_reviews_briefly_UltimateMac:
                "This app makes writing really fun",
            purchase_user_reviews_content_UltimateMac:
                "An application that goes beyond traditional writing tools, with unconventional functional design, excellent interface design and layout, and advanced aesthetics. And having my favorite drag-and-drop card library makes writing a lot of fun.",
            purchase_user_reviews_briefly_Visesen: "Looks very good",
            purchase_user_reviews_content_Visesen:
                "The development looks very good. In addition, developers respond quickly to feedback.",
        },
        de: {
            _key: "de-DE",
            _name: "Deutsch",
            colon: ": ",
            project: "Projekt",
            projects: "Projekte",
            article: "Artikel",
            articles: "Artikel",
            card: "Karte",
            cards: "Karten",
            all_cards: "Alle Karten",
            tag: "Tag",
            tags: "Tags",
            file: "Datei",
            all_files: "Alle Dateien",
            folder: "Ordner",
            cancel: "Stornieren",
            change: "Ändern",
            continue: "Weitermachen",
            delete: "Löschen",
            delete_confirm: "Möchten Sie diesen Artikel wirklich löschen?",
            edit: "Bearbeiten",
            loading: "Wird geladen...",
            remove: "Entfernen",
            rename: "Umbenennen",
            reset: "Zurücksetzen",
            save: "Speichern",
            submit: "Einreichen",
            update: "Aktualisieren",
            upgrade: "Upgrade",
            upgrade_now: "Jetzt upgraden",
            uploading: "Hochladen",
            created_at: "Erstellt",
            modified_at: "Geändert",
            default: "Standard",
            more: "Mehr",
            ok: "OK",
            success: "Erfolg",
            untitled: "Ohne Titel",
            done: "Erledigt",
            ignore: "Ignorieren",
            load_more: "Mehr laden",
            link_add_placeholder: "Link eingeben oder einfügen",
            image_caption_placeholder: "Bildunterschrift eingeben (optional)",
            about: "über",
            close: "Schließen",
            copy: "Kopieren",
            cut: "Schneiden",
            help: "Hilfe",
            hide: "Verstecken",
            hide_others: "Andere verstecken",
            homepage: "Startseite",
            minimize: "Minimieren",
            open_main_window: "Hauptfenster",
            paste: "Paste",
            paste_as_text: "Paste (einfacher Text)",
            preferences: "Präferenz",
            quit: "Kündigen",
            redo: "Wiederholen",
            reload: "Neu laden",
            reset_zoom: "Zoom zurücksetzen",
            select_all: "Wählen Sie Alle",
            toggle_dark_mode: "Dunkler Modus",
            toggle_full_screen: "Ganzer Bildschirm",
            undo: "Umkehren",
            unhide: "Einblenden",
            view: "Sicht",
            window: "Fenster",
            zoom: "Zoomen",
            zoom_in: "Hineinzoomen",
            zoom_out: "Rauszoomen",
            walk_through_home_title:
                "„Gehirnähnlich“\nWissensmanagement-Notizen",
            walk_through_home_sub_title:
                "Erweitern das menschliche Wissen, verbessern die Effizienz der Wissenserstellung",
            walk_through_next: "Nächste",
            walk_through_prev: "Vorher",
            walk_through_done: "Erledigt",
            walk_through_slide_one_title:
                "Speichern Ihre Gedanken in der Kartenbibliothek",
            walk_through_slide_two_title: "Mindmap-ähnliche Projektskizze",
            walk_through_slide_three_title: "Ziehbares Blockelement",
            walk_through_slide_four_title:
                "Offline First, Sicherung der gesamten Bibliothek",
            walk_through_slide_five_title:
                "Eine Vielzahl von Dokumentenexport Methoden",
            new_project: "Neues Projekt",
            change_icon: "Icon ändern",
            new_document: "Neues Artikel",
            new_article: "Neuer Artikel",
            duplicate: "Duplikat",
            merge_selected_docs: "Artikel zusammenführen",
            merge_selected_docs_as_new: "Als neuen Artikel zusammenführen",
            merge_docs_fail:
                "Das Zusammenführen von Artikeln ist fehlgeschlagen",
            delete_n_items: "{0} Elemente löschen",
            continue_read: "Sequenzlesen",
            editor_input_placeholder: "Schreiben etwas oder geben '/'",
            tooltip_extension_info: "Erweiterung Info",
            tooltip_standalone_window: "Im eigenständigen Fenster bearbeiten",
            tooltip_article_comparison: "Vergleich von zwei Artikeln",
            split_vertical: "Vertikal",
            split_horizontal: "Horizontal",
            tooltip_split_article: "Artikel teilen",
            words: "wörter",
            characters: "charakteren",
            words_count: "Wörter",
            words_count_characters: "Charakteren",
            words_count_characters_without_spaces: "Nicht-Leerzeichen",
            words_count_asian: "Asiatische Charaktere",
            words_count_asian_non: "Nicht-asiatische Wörter",
            words_count_punctuations: "Satzzeichen",
            words_count_paragraphs: "Paragraph",
            cite: "Zitieren",
            cited: "Zitiert ",
            cite_target_not_found: "Zitat nicht gefunden",
            cancel_cited: "Zitiert abbrechen",
            change_display_name: "Anzeigenamen ändern",
            full_cite: "Vollständiges Zitat",
            title_cite: "Titel Zitat",
            display_name: "Anzeigename",
            turn_to_card: "Zur Karte umwandeln",
            link_to: "Verlinken zu",
            cite_filter_none: "Keine passenden Einträge",
            create_or_search_cite: "Erstellen oder suchen Sie eine Zitat",
            press_enter_add_cite: 'Drücken Sie "Enter" um',
            add_one: " hinzuzufügen ",
            create_one: " erstellen ",
            create_or_search_footnote: "Erstellen oder suchen Sie eine Fußnote",
            add_a_comment: "Einen Kommentar hinzufügen",
            comment: "Kommentar",
            footnote: "Fußnote",
            create_table_from: "Tabelle erstellen",
            create_tags: "Erstellen tags",
            file_nonexistent: "Die Datei existiert nicht",
            file_open: "Offen",
            file_open_by_other: "Öffnen in anderen Anwendungen",
            file_path: "Lokaler Pfad",
            file_size: "Größe",
            font_family: "Schriftart",
            font_size: "Schriftgröße",
            font_color: "Schriftfarbe",
            highlight_color: "Hervorhebungsfarbe",
            copy_link: "Link kopieren",
            align: "Ausrichten",
            indent: "Einzug",
            d_indent: "Einzug verringern",
            line_height: "Zeilenhöhe",
            width: "Breite",
            layout: "Layout",
            clear_style: "Stil löschen",
            left: "Links",
            right: "Rechts",
            center: "Zentrieren",
            justify: "Blocksatz",
            turn_to: "Umwandeln zu",
            turn_to_block_code: "Zum Code wechseln",
            line_space_normal: "Normal",
            line_space_double: "Doppel",
            tag_deleted: "Das Tag wurde gelöscht",
            last_used: "Zuletzt verwendet",
            card_deleted: "Die {} Zitation wurde gelöscht",
            unsorted: "Unsortiert",
            sort: "Sortieren",
            sort_mode_modified: "Änderungszeit",
            sort_mode_created: "Erstellungszeitpunkt",
            sort_mode_char_code_inc: "A-Z",
            sort_mode_char_code_sub: "Z-A",
            tag_mode_filter: "Filter",
            tag_mode_filter_sub: "Alle Unter-Tags",
            trashcan: "Mülleimer",
            trashcan_empty: "Leeren",
            trashcan_put_back: "Zurückstellen",
            trashcan_delete_confirm:
                "Sind Sie sicher, dass Sie dieses Element endgültig löschen?",
            trashcan_empty_confirm:
                "Möchten Sie den Mülleimer wirklich leeren?",
            trashcan_err_item_not_exist: "Artikel existiert nicht",
            trashcan_err_path_not_exist: "Pfad existiert nicht",
            trashcan_err_project_not_exist: "Projekt existiert nicht",
            export: "Export",
            export_article: "Artikelexport",
            export_image: "Bild exportieren",
            export_image_loading: "Bild exportieren",
            export_image_size: "Bildgröße",
            export_notes: "Notes",
            export_pdf: "PDF exportieren",
            export_pdf_basic: "Basic",
            export_pdf_advance: "Fortgeschritten",
            export_pdf_page_comment: "Kommentare",
            export_pdf_page_footnote: "Fußnoten exportieren",
            export_pdf_page_footnote_pos: "Fußnoten Position",
            export_pdf_page_footnote_pos_article: "Ende des Dokuments",
            export_pdf_page_footnote_pos_page: "Ende der Seite",
            export_pdf_page_show_page_number: "Seitenzahl anzeigen",
            export_pdf_page_loading: "PDF exportieren",
            export_pdf_page_number: "Seitennummer",
            export_pdf_page_size: "Seitengröße",
            export_pdf_page_break: "Seitenumbruch",
            export_project: "Projekt Export",
            export_type_image: "Bild",
            export_with_type: "Export {}",
            page_n: "Seite N",
            page_styles: "Seite",
            page_styles_align_left: "Linke",
            page_styles_align_center: "Center",
            page_styles_align_right: "Recht",
            page_styles_align_justify: "Rechtfertigen",
            page_styles_footer: "Fusszeile",
            page_styles_footer_page_number: "Seitennummer",
            page_styles_footer_page_number_pos: "Position",
            page_styles_header: "Header",
            page_styles_header_and_footer: "Kopf-und Fußzeile",
            page_styles_header_text_placeholder: "Kopfzeilentext eingeben",
            page_styles_page_margin: "Seitenrand",
            page_styles_page_margin_top: "Obere",
            page_styles_page_margin_bottom: "Unterseite",
            page_styles_page_margin_left: "Linke",
            page_styles_page_margin_right: "Recht",
            table_of_contents: "Inhaltsverzeichnis",
            cover: "Cover und Inhaltsverzeichnis",
            hierarchy_title: "Hierarchie Titel",
            slogan: "„Gehirnähnliche“ Notizen zum Wissensmanagement",
            remove_lattics_logo: "Entfernen Sie das Lattics-Logo",
            import: "Importieren",
            import_document: "Dokument importieren",
            attach_local_pdf: "Lokale PDF-Datei anhängen",
            metadata: "Metadaten",
            metadata_add_author: "Autor hinzufügen",
            metadata_add_id: "ID hinzufügen",
            metadata_item_type: "Artikeltyp",
            metadata_author: "Autor",
            metadata_editor: "Editor",
            metadata_contributor: "Mitwirkender",
            metadata_translator: "Übersetzer",
            metadata_reviewed_author: "Rezensierter Autor",
            metadata_title: "Titel",
            metadata_abstract: "Zusammenfassung",
            metadata_journal: "Journal",
            metadata_publication: "Veröffentlichung",
            metadata_time: "Zeit",
            metadata_issue: "Ausgabe",
            metadata_volume: "Volumen",
            metadata_page: "Seite",
            metadata_publisher: "Verleger",
            metadata_series: "Serie",
            metadata_doi: "DOI",
            metadata_pmid: "PMID",
            metadata_arxiv: "Arxiv",
            metadata_issn: "ISSN",
            metadata_isbn: "ISBN",
            metadata_url: "URL",
            metadata_keywords: "Schlüsselwörter",
            metadata_add_keywords: "Schlüsselwörter hinzufügen",
            bibliography: "Bibliographie",
            addition_pin_to_right: "An Dock anheften",
            addition_un_pin_to_right: "Abdocken",
            addition_add_tag: "Tags hinzufügen",
            addition_add_project: "Projekt hinzufügen",
            addition_add_memo: "Memo hier",
            addition_forward_link: "Link weiterleiten",
            addition_backward_link: "Rückwärts Link",
            unlink_mention: "Nicht verknüpft",
            link: "Link",
            link_all: "Alle verknüpfen",
            addition_table_of_contents: "Inhaltsverzeichnis",
            item_created: "Erstellt",
            item_last_modified: "Zuletzt bearbeitet",
            source_of_card: "Quelle",
            search: "Suchen",
            search_placeholder: "Suche in Lattics",
            searching: "Suche...",
            search_show_all: "Zeige alles",
            no_matching_records: "Keine passenden Datensätze",
            search_find: "Finden",
            next: "Nächste",
            previous: "Vorherige",
            search_replace: "Ersetzen",
            search_replace_all: "Alles Ersetzen",
            search_total: "{0} Ergebnisse in {1} Artikeln",
            math_type: "Math Gleichung",
            math_type_calculus: "Infinitesimalrechnung",
            math_type_character: "Alphabet",
            math_type_elementary: "Elementare",
            math_type_function_and_set: "Funktionen und Mengen",
            math_type_geometry: "Geometrie",
            math_type_text_mode: "LaTeX-Syntax",
            math_type_please_use_text_mode:
                "Möglicherweise liegt für die aktuelle Eingabe eine nicht unterstützte Syntax vor. Es wird empfohlen, den Nur-Text-Modus zu verwenden.",
            code_block: "Codeblock",
            separator: "Trennzeichen",
            code_block_language: "Programmsprache",
            table: "Tabelle",
            add_column_before: "Spalte davor hinzufügen",
            add_column_after: "Spalte danach hinzufügen",
            add_row_before: "Zeile davor hinzufügen",
            add_row_after: "Zeile danach hinzufügen",
            delete_column: "Spalte löschen",
            delete_row: "Zeile löschen",
            goal: "Ziel",
            goal_deadline: "Termin",
            goal_choose_date: "Wählen Sie Datum",
            goal_today: "Heute",
            goal_left: "Übrig",
            goal_delayed: "Verzögert",
            goal_words_target: "Wörter",
            goal_character_target: "Charakteren",
            goal_not_set: "Nicht eingestellt",
            goal_written: "Geschrieben",
            goal_rate: "Fertig",
            goal_achieve: "Erreichen",
            goal_achieved: "Erreicht",
            focus_mode: "Fokus Modus",
            focus_mode_typewriter_mode: "Schreibmaschinenmodus",
            focus_mode_typewriter_mode_line: "Fokussieren eine Linie",
            focus_mode_typewriter_mode_sentence: "Satz",
            focus_mode_typewriter_mode_paragraph: "Paragraph",
            focus_mode_typewriter_mode_none: "Keiner",
            focus_mode_keyboard_sound: "Keyboard Sound",
            project_opening: "Eröffnungsprojekt...",
            project_package: "Projektpaket",
            project_package_info:
                "Um alle Artikel, Karten, Dateien, Gliederungen, Mindmap, Zitate, Fußnoten, Memos, Tags und andere vollständige Informationen im Projekt als eigenständige Datei zu packen",
            project_package_save: "Verpackungsprojekt...",
            project_editors: "Bearbeiter",
            card_library: "Karten",
            add_card: "Karte hinzufügen",
            graph: "Graph",
            graph_filter: "Inhaltsfilter",
            graph_sort_out: "Auto Layout",
            graph_sort_out_confirm:
                "Sind Sie sicher, dass Sie das automatische Layout wünschen?",
            graph_view_mind_map: "Mindmap",
            graph_view_plot_view: "Handlung der Geschichte",
            graph_view_aerial_view: "Luftaufnahme",
            graph_view_preview_node: "Vorschau",
            graph_view_title_node: "Titel",
            graph_view_memo_node: "Memo",
            tag_hint: "Tags",
            cite_graph: "Diagramm zitieren",
            graph_node_copy_cite_link: "Zitierlink kopieren",
            graph_node_remove_from_project: "Aus Projekt entfernen",
            graph_node_remove_from_tag: "Aus Tag entfernen",
            graph_relation_link: "Beziehungslink",
            graph_drag_me: "Zieh mich",
            graph_upgrade_tip: "15 freie Knoten überschritten",
            flashcard: "Karteikarte",
            flashcard_filter: "Filter",
            flashcard_filter_article: "Artikel",
            flashcard_filter_card: "Karten",
            flashcard_filter_outline: "Projektskizze",
            flashcard_filter_extension: "Erweiterung Info ",
            flashcard_sort_mode_direct: "Gliederung",
            flashcard_sort_mode_inverse: "Inverse Gliederung Reihenfolge",
            flashcard_sort_mode_random: "Zufällig",
            flashcard_show_answer: "Antwort anzeigen",
            flashcard_show_question: "Frage anzeigen",
            flashcard_next: "Nächster",
            flashcard_back: "Zurück",
            flashcard_complete: "Beenden",
            flashcard_completed: "Vollendet",
            flashcard_empty_tip:
                "Flash-Karten stammen von Artikeln oder Karten",
            flashcard_got_it: "Gemeistert",
            flashcard_enhance: "Erweitern",
            flashcard_ebbinghaus: "Ebbinghaus",
            flashcard_statistics: "Statistiken",
            flashcard_statistics_total_have: "Du hast:",
            flashcard_statistics_learned: "Gelernt",
            flashcard_statistics_got_it: "Gemeistert",
            flashcard_statistics_recently_learned: "Kürzlich gelernt:",
            flashcard_question_type_default: "Q & A",
            flashcard_question_type_fill_in_the_blanks: "Fülle die Lücken aus",
            flashcard_question_type_choice: "Fragen mit mehreren Antworten",
            template: "Vorlage",
            template_choose_template: "Vorlage wählen",
            template_current_article: "Aktueller Artikel",
            template_current_project: "Aktueller Projekt",
            template_modify_styles: "Stil ändern",
            template_setting_scope: "Umfang festlegen",
            template_new: "Als neue Vorlage speichern",
            template_reset: "Stil wiederherstellen",
            template_set_as_default: "Als Standard einstellen",
            custom_style: "Stilvorlage",
            element_styles_color: "Farbe",
            element_styles_color_default: "Standard",
            element_styles_color_black: "Schwarz",
            element_styles_color_grey: "Grau",
            element_styles_color_light_grey: "Hellgrau",
            element_styles_color_deep_blue: "Tiefes Blau",
            element_styles_color_blue: "Blau",
            element_styles_color_green: "Grün",
            element_styles_color_mars_green: "Marsgrün",
            element_styles_color_dark_green: "Dunkelgrün",
            element_styles_color_orange: "Orange",
            element_styles_color_brown: "Braun",
            element_styles_color_purple: "Lila",
            element_styles_color_pink: "Rosa",
            element_styles_color_red: "Rot",
            element_styles_color_yellow: "Gelb",
            element_styles_build_in_magazine: "Zeitschrift",
            element_styles_build_in_paper_thesis: "Papier und These",
            element_styles_build_in_report: "Bericht",
            element_styles_build_in_diary_notes: "Tagebuch und Notizen",
            element_styles_thickness: "Dicke",
            element_styles_number_style: "Numerischer Stil",
            element_styles_bullet_style: "Aufzählungsstil",
            element_styles_box_style: "Box-Stil",
            element_styles_check_style: "Checkbox-Stil",
            element_styles_check_style_delete_line: "Line-Through",
            element_styles_check_style_high: "Hervorgehoben",
            element_styles_check_style_high_color: "Hervorhebungsfarbe",
            element_styles_bullet_disc: "Scheibe",
            element_styles_bullet_circle: "Kreis",
            element_styles_bullet_square: "Quadrat",
            element_styles_todo_style: "Quadrat",
            element_styles_line_style: "Linienstil",
            element_styles_line_style_solid: "Durchgezogene",
            element_styles_line_style_dashed: "Gestrichelte",
            element_styles_todo_style_circle: "Kreis",
            element_styles_quote_style_top: "Obersten Zeile",
            element_styles_quote_style_single: "Linke Linie",
            element_styles_quote_style_quote: "Zitat",
            element_styles_first_indent: "Erster Zeileneinzug",
            element_styles_paragraph: "Text",
            element_styles_head_1: "Überschrift 1",
            element_styles_head_2: "Überschrift 2",
            element_styles_head_3: "Überschrift 3",
            element_styles_head_4: "Überschrift 4",
            element_styles_head_5: "Überschrift 5",
            element_styles_head_6: "Überschrift 6",
            element_styles_indent: "Einrückung",
            element_styles_indent_none: "Keiner",
            element_styles_border: "Grenze",
            element_styles_offset: "Offset",
            element_styles_quote_style: "Zitatstil",
            element_styles_list_style: "Listenstil",
            element_styles_bulleted_list: "Bullet Liste",
            element_styles_numbered_list: "Numerische Liste",
            element_styles_todo_list: "Aufgabenliste",
            element_styles_quote: "Zitieren",
            element_styles_text: "Textstil",
            element_styles_spacing: "Abstand",
            element_styles_spacing_line: "Zeilen",
            element_styles_spacing_after: "Nach Paragraph",
            element_styles_spacing_before: "Vor Paragraph",
            statistics: "Statistiken",
            statistics_recently: "Letztens",
            statistics_total: "Insgesamt",
            statistics_recently_goal_day: "T",
            statistics_recently_date_formatter: "MMM YYYY",
            statistics_recently_date_sat: "Sa.",
            statistics_recently_last_month: "Letzte 30 Tage:",
            statistics_recently_words: "Wörter hinzugefügt",
            statistics_recently_card: "Neue Karten",
            statistics_recently_modified_contents: "Geänderte Inhalte:",
            statistics_total_since: "Seit ",
            statistics_total_install_time_label:
                "Datum der Installation von Lattics",
            statistics_total_have_written: "Du hast geschrieben:",
            statistics_total_all:
                "Gesamt: (einschließlich Wiederherstellung oder Sync)",
            statistics_total_words: "Wörter",
            tutorial: "Lernprogramm",
            tutorial_url:
                "https://helps.auramarker.com/en/lattics/backup_and_sync",
            pretty_time_1_day_ago: "vor 1 Tag",
            pretty_time_1_hour_ago: "vor 1 Stunde",
            pretty_time_1_minute_ago: "vor 1 Minute",
            pretty_time_just_now: "Soeben",
            pretty_time_n_days_ago: "vor {0} Tag",
            pretty_time_n_hours_ago: "vor {0} Stunde",
            pretty_time_n_minute_ago: "vor {0} Minute",
            setting: "Einstellung",
            settings: "Einstellungen",
            account_settings: "Konto-Einstellung",
            appearance: "Aussehen",
            pref_lang: "Sprachen",
            editor_preference: "Editor-Präferenz",
            backup: "Sichern und Sync",
            pref_update: "Aktualisieren",
            feedback: "Rückmeldung",
            about_us: "Über uns",
            hi_lattics_pro: "Hallo, Lattics Pro",
            not_a_member: "Habe kein Konto?",
            already_a_member: "Sie haben bereits eine Mitgliedschaft?",
            sign_out: "Ausloggen",
            sign_up: "Anmeldung",
            delete_account: "Löschen das Konto",
            account_delete_confirm: "Müssen Sie das Konto löschen?",
            account_delete_confirm_message:
                "Bitte beachten Sie, dass dieser Vorgang Ihr Konto und Ihre Daten vollständig löscht und nicht wiederhergestellt werden kann. Bitte sichern oder exportieren Sie Ihre Daten daher im Voraus.Bitte beachten Sie, dass durch diesen Vorgang Ihr Konto vollständig gelöscht wird und die Daten nicht wiederhergestellt werden können. Bitte sichern oder exportieren Sie Ihre Daten daher im Voraus.",
            delete_account_need_re_signin:
                "Bitte melden Sie sich erneut an, um Ihr Konto zu löschen.",
            membership_cancel_renew: "Auto Verlängerung abbrechen",
            membership_expiration_info: "Die Mitgliedschaft läuft am {0} ab",
            membership_will_renew: "Die Mitgliedschaft wird am {0} verlängert",
            theme_light: "Hell",
            theme_dark: "Dunkel",
            theme_system: "System",
            theme_klein_blue: "Klein Blau",
            theme_pantone_red: "Pantone Rot",
            theme_tiffany_green: "Tiffany Grün",
            theme_hermes_brown: "Hermes Braun",
            theme_silver: "Silber",
            theme_midnight_blue: "Mitternachtsblau",
            theme_dark_rose: "Dunkle Rose",
            theme_marrs_green: "Marrs Grün",
            theme_ink: "Tinte",
            pref_editor_font: "Standardschriftart",
            pref_editor_latin_font: "Lateinische Schriftart",
            pref_editor_asian_font: "Asiatische Schriftart",
            pref_editor_font_size: "Standardschriftgröße",
            pref_editor_spellcheck: "Rechtschreibprüfung",
            pref_editor_markdown: "Aktivieren Markdown-Syntax",
            pref_editor_context_menu: "Aktivieren Popup-Menü",
            backup_before: "Bitte legen den Sicherungspfad für Lattics fest",
            backup_choose_folder: "Wähle einen Ordner",
            pref_backup_path: "Sicherungspfad:",
            config_unset: "Nicht eingestellt",
            change_backup_dir: "Sicherungspfad ändern",
            open_dir: "Verzeichnis öffn",
            backup_now: "Sicherung Jetzt",
            backup_restore: "Sicherung wiederherstellen",
            backup_enable_auto: "Aktivieren die auto Sicherung",
            backup_history: "Sicherungsverlauf",
            size: "Größe",
            backup_restore_from: "Wiederherstellung von dieser Sicherungp",
            interval: "Intervall",
            every_day: "Täglich",
            every_week: "Jede Woche",
            pref_update_lasted: "Ihre Lattics sind auf dem neuesten Stand",
            pref_update_version: "App Version",
            pref_update_check: "Update überprüfen",
            pref_update_checking: "Überprüfung",
            new_update_available: "Neues Update verfügbar",
            version_number: "Version: {0}",
            update_now: "Jetzt Update",
            auto_update_relaunch: "Relaunch",
            feedback_placeholder:
                "Bitte hinterlassen Sie uns Ihre Vorschläge oder Ideen",
            update_logs: "Senden Sie Laufzeitprotokolle",
            update_logs_desc: "Es dient ausschließlich der Fehlerbehebung",
            pref_terms_of_service: "Nutzungsbedingungen",
            terms_of_service_link:
                "https://lattics.zineapi.com/en-US/terms_of_service",
            pref_privacy_policy: "Datenschutz-Bestimmungen",
            pref_about_us_other_prod: "Unsere anderen Apps",
            pref_about_us_more: "Erfahren mehr",
            pref_about_us_zine:
                "Eine wunderschöne mobile Notiz- und Schreib-Appp",
            pref_about_us_varlens: "DSLR im Telefon",
            sign_in: "Anmelden",
            sign_in_migration_check_desc:
                "Migrieren Sie die im unangemeldeten Zustand erstellten Inhalte in das Anmeldekonto",
            data_merging: "Daten zusammenführen...",
            register_inform:
                "Mit der Anmeldung stimmen Sie unseren {0} und {1} zu.",
            privacy_policy: "Datenschutz-Bestimmungen",
            privacy_link: "https://lattics.zineapi.com/en-US/privacy-policy",
            signin_err_email_invalid:
                "Bitte geben Sie eine gültige E-Mail-Adresse ein",
            signin_err_email_not_exists: "Diese E-Mail ist nicht registriert.",
            signin_err_email_not_verified: "E-Mail ist nicht verifiziert.",
            signin_err_invalid_password: "Ungültiges Passwort.",
            signin_err_password_length: "Mindestens 6 Zeichen",
            forget_password: "Passwort vergessen?",
            enter_your_account_email:
                "Bitte geben Sie die E-Mail Adresse Ihres Kontos ein",
            enter_the_code: "Geben Sie den Verifizierungscode ein",
            enter_the_code_sent_to:
                "Der Bestätigungscode wird gesendet an: {0}",
            code_empty: "Der Code ist leer!",
            invalid_verify_code: "Ungültiger Bestätigungscode",
            reset_password: "Passwort zurücksetzen",
            enter_new_password: "Neues Passwort eingeben",
            enter_a_new_password: "Geben ein neues Kennwort",
            repeat_password: "Passwort wiederholen",
            tow_passwords_not_match:
                "Die zwei Passwörter stimmen nicht überein",
            now_you_can_use_the_new_password:
                "Jetzt können Sie sich mit dem neuen Passwort anmelden",
            welcome_aboard: "Willkommen an Bord",
            welcome_back: "Willkommen zurück",
            go_to_sign_in: "Gehen zu Anmelden",
            go_back: "Geh zurück",
            signup_email_exists: "E-Mail existiert bereits",
            err_unknown: "Unbekannter Fehler",
            err_username_characters:
                "Der Benutzername darf nur Buchstaben, Zahlen, Unterstriche und Punkte enthalten",
            err_username_empty: "Benutzername darf nicht leer sein",
            err_username_exist: "Benutzername existiert bereits",
            err_username_length_range:
                "Bitte geben einen Benutzernamen mit zwischen {0} und {1} Zeichen ein",
            err_email_exist: "E-Mail existiert bereits",
            err_email_invalid: "E-mail Adresse ist nicht korrekt",
            change_plan: "Plan ändern",
            purchase: "Kaufen",
            purchase_pro_desc:
                "Willkommen beim Erwerb der Lattics Pro-Mitgliedschaft. Sie können alle Funktionen nutzen und uns dabei unterstützen, sie kontinuierlich zu verbessern",
            feature_documents_in_project: "Dokumente im Projekt",
            feature_knowledge_graph_nodes: "Knowledge Graph-Knoten",
            feature_export_custom_layout: "Benutzerdefinierte Stilvorlage",
            feature_text_md_doc_export: "TXT/MD exportieren",
            feature_export_image_and_pdf: "PDF/DOCX/Bild exportieren",
            feature_goal_and_statistic: "Ziel und Statistik",
            feature_theme: "Benutzerdefinierte Themen",
            feature_flashcard: "Karteikarte Statistik und Ebbinghaus",
            unlimited: "Unbegrenzt",
            purchase_free_trail: "{}-Tage Testversion",
            purchase_monthly: "Monatlicher Plan",
            purchase_mas_monthly: "Monatlicher Plan",
            purchase_yearly: "Jahresplan",
            purchase_mas_yearly: "Jahresplan",
            years: "Jahre",
            purchase_save: "Speichern",
            yearly_price_avg: "12 Monate bei {0}/Monat",
            purchase_restore: "Kauf wiederherstellen",
            purchase_inform: "Auto Verlängerung, jederzeit kündbar",
            purchase_unsubscription_desc:
                "In den Kontoeinstellungen können Sie das Abonnement verwalten und das Abonnement nach dem Kauf kündigen. Der spezifische Pfad lautet: „Einstellungen“ -> Apple-ID -> Medien & Kauf -> Abonnement",
            choose_payment_method: "Wähle deine Zahlungsmethode",
            total: "Gesamt",
            congratulations: "Glückwunsch!",
            you_are_now_a_member: "Du bist jetzt {}",
            payment_succeed: "Zahlung erfolgreich abgeschlossen?",
            payment_succeed_desc:
                "Wenn Sie die Zahlung abgeschlossen haben, klicken Sie zum Aktualisieren bitte auf die Schaltfläche „Ja“.",
            not_yet: "Noch nicht",
            yes: "Ja",
            payment_state_not_change:
                "Der Status der Bestellung hat sich nicht geändert. Bitte bestätigen Sie, ob die Zahlung erfolgreich war, oder versuchen Sie es später erneut.",
            purchase_user_reviews_briefly_Drlcm: "Es ist einzigartig",
            purchase_user_reviews_content_Drlcm:
                "Es hat mir wirklich Spaß gemacht, damit ein langes Dokument zu organisieren. Es ist eine wundervolle Idee und anders als alles andere, was ich bisher gesehen habe.",
            purchase_user_reviews_briefly_Drjimmoore: "Schönes Potenzial!",
            purchase_user_reviews_content_Drjimmoore:
                "Was mir sehr gut gefällt, ist der Workflow. Vom Schreiben auf Karten auf der rechten Seite bis zum Einfügen von Karten in eine Artikelliste auf der linken Seite.",
            purchase_user_reviews_briefly_UltimateMac:
                "Mit dieser App macht das Schreiben richtig Spaß",
            purchase_user_reviews_content_UltimateMac:
                "Eine Anwendung, die über herkömmliche Schreibwerkzeuge hinausgeht, mit unkonventionellem funktionalem Design, hervorragendem Interface-Design und Layout sowie fortschrittlicher Ästhetik. Und mit meiner Lieblings-Drag-and-Drop-Kartenbibliothek macht das Schreiben viel Spaß.",
            purchase_user_reviews_briefly_Visesen: "Sieht sehr gut aus",
            purchase_user_reviews_content_Visesen:
                "Die Entwicklung sieht sehr gut aus. Darüber hinaus reagieren Entwickler schnell auf Feedback.",
        },
        zh: De,
        zh_tw: Me,
        jp: {
            _key: "jp",
            _name: "日本語",
            colon: ": ",
            project: "プロジェクト",
            projects: "プロジェクト",
            article: "文章",
            articles: "文章",
            card: "カード",
            cards: "カード",
            all_cards: "すべてのカード",
            tag: "Tag",
            tags: "Tags",
            file: "ファイル",
            all_files: "すべてのファイル",
            folder: "フォルダ",
            cancel: "取り消",
            change: "改訂",
            continue: "続ける",
            delete: "削除",
            delete_confirm: "この項目を削除?",
            edit: "編集",
            loading: "読み込み中...",
            remove: "取り除く",
            rename: "名前の変更",
            reset: "リセット",
            save: "保存",
            submit: "提出する",
            update: "更新",
            upgrade: "アドバンス",
            upgrade_now: "今すぐアップグ",
            uploading: "アップロード中",
            created_at: "作成した",
            modified_at: "修正済み",
            default: "既定t",
            more: "もっと",
            ok: "OK",
            success: "成功",
            untitled: "無題",
            done: "完了",
            ignore: "無視",
            load_more: "もっと読み込む",
            link_add_placeholder: "リンクを入力または貼り付",
            image_caption_placeholder: "画像のキャを入力(オプション)",
            about: "About",
            close: "閉じる",
            copy: "複写",
            cut: "切る",
            help: "ヘルプ",
            hide: "隠す",
            hide_others: "他の人を隠す",
            homepage: "ホームページ",
            minimize: "最小化する",
            open_main_window: "メインウィンドウ",
            paste: "貼る",
            paste_as_text: "プレーンテキストで貼る",
            preferences: "設定",
            quit: "終了",
            redo: "やり直",
            reload: "リロード",
            reset_zoom: "ズームをリ",
            select_all: "すべて選択",
            toggle_dark_mode: "ダークモード",
            toggle_full_screen: "全画面表示",
            undo: "アンドゥ",
            unhide: "再表示",
            view: "見晴らし",
            window: "ウィンドウ",
            zoom: "ズーム",
            zoom_in: "ズームイン",
            zoom_out: "ズームアウ",
            walk_through_home_title:
                "「脳のような」\nナレッジ マネジメント メモ",
            walk_through_home_sub_title:
                "人類の知識を増強し、知識創造の効率を向上",
            walk_through_next: "次に",
            walk_through_prev: "前へ",
            walk_through_done: "完了",
            walk_through_slide_one_title:
                "あなたの考えをカードライブラリに保存",
            walk_through_slide_two_title: "マインドマップ的なプロジェクト概要",
            walk_through_slide_three_title: "ドラッグ可能なブロック要素",
            walk_through_slide_four_title:
                "オフラインファースト、ライブラリ全体のバックアップ",
            walk_through_slide_five_title: "豊富なドキュメントエクスポート方法",
            new_project: "新しいプロジ",
            change_icon: "アイコンの変更",
            new_document: "新しいドキュ",
            new_article: "新しいドキュ",
            duplicate: "複製",
            merge_selected_docs: "文書を結合する",
            merge_selected_docs_as_new: "新しいドキュとして結合",
            merge_docs_fail: "ドキュメントの結合に失敗し",
            delete_n_items: "{0} 個のアイテムを削除",
            continue_read: "シーケンスリーディング",
            editor_input_placeholder: "何かを書くか「/」を入力",
            tooltip_extension_info: "拡張情報",
            tooltip_standalone_window: "スタンドアロン ウィンドウで編集する",
            tooltip_article_comparison: "2 つの記事の比較",
            split_vertical: "垂直",
            split_horizontal: "水平",
            tooltip_split_article: "文書を分割",
            words: "単語数",
            characters: "キャラクター",
            words_count: "単語数",
            words_count_characters: "キャラクター",
            words_count_characters_without_spaces: "の他に空",
            words_count_asian: "アジアのキャラクター",
            words_count_asian_non: "アジア以外の単語",
            words_count_punctuations: "句読点",
            words_count_paragraphs: "段落",
            cite: "引用",
            cited: "引用される ",
            cite_target_not_found: "引用が見つかりま",
            cancel_cited: "引用をキャンセル",
            change_display_name: "表示名の変更",
            full_cite: "全文引用",
            title_cite: "タイトルの引用",
            display_name: "表示名",
            turn_to_card: "カードに変換",
            link_to: "へのリンク",
            cite_filter_none: "一致するレコードはあり",
            create_or_search_cite: "引用を作成または検索する",
            press_enter_add_cite: "「Enter」を押",
            add_one: "追加",
            create_one: "作る",
            create_or_search_footnote: "脚注を作成または検索",
            add_a_comment: "コメントを追加",
            comment: "コメント",
            footnote: "脚注",
            create_table_from: "テーブルの作成",
            create_tags: "tag を作成",
            file_nonexistent: "ファイルが存在しませ",
            file_open: "開ける",
            file_open_by_other: "他のアプリケーションで開く",
            file_path: "ローカルパス",
            file_size: "サイズ",
            font_family: "フォント",
            font_size: "フォントサイズ",
            font_color: "フォントの色",
            highlight_color: "ハイライトカラー",
            copy_link: "リンクをコピー",
            align: "整列",
            indent: "インデント",
            d_indent: "インデントを解除",
            line_height: "行間隔",
            width: "横幅",
            layout: "レイアウト",
            clear_style: "スタイルの削除",
            left: "左",
            right: "右",
            center: "中心",
            justify: "両端",
            turn_to: "ターントゥ",
            turn_to_block_code: "コードに変換",
            line_space_normal: "普通",
            line_space_double: "ダブル",
            unsorted: "未分類",
            sort: "整理する",
            sort_mode_modified: "変更時間",
            sort_mode_created: "作成時間",
            sort_mode_char_code_inc: "A-Z",
            sort_mode_char_code_sub: "Z-A",
            tag_mode_filter: "フィルター",
            tag_mode_filter_sub: "すべてのサブタグ",
            trashcan: "ごみ箱",
            trashcan_empty: "空ける",
            trashcan_put_back: "戻す",
            trashcan_delete_confirm: "この項目を完全に削除してもよろしい?",
            trashcan_empty_confirm: "ゴミ箱を空にしてもよろしいですか?",
            trashcan_err_item_not_exist: "アイテムが存在しません",
            trashcan_err_path_not_exist: "パスが存在しません",
            trashcan_err_project_not_exist: "プロジェクトが存在しません",
            export: "輸出",
            export_article: "ドキュメントのエクスポート",
            export_image: "画像としてエクスポート",
            export_image_loading: "画像のエクスポート",
            export_image_size: "画像サイズ",
            export_notes: "ノート",
            export_pdf: "PDFとしてエクスポート",
            export_pdf_basic: "基本",
            export_pdf_advance: "アドバンスド",
            export_pdf_page_comment: "コメント",
            export_pdf_page_footnote: "脚注のエクスポート",
            export_pdf_page_footnote_pos: "脚注の位置",
            export_pdf_page_footnote_pos_article: "文書の終わり",
            export_pdf_page_footnote_pos_page: "ページの下部",
            export_pdf_page_show_page_number: "ページ番号を表示",
            export_pdf_page_loading: "PDFのエクスポート",
            export_pdf_page_number: "ページ番号",
            export_pdf_page_size: "ページサイズ",
            export_pdf_page_break: "ページブレーク",
            export_project: "プロジェクトのエクスポート",
            export_type_image: "画像",
            export_with_type: "輸出 {}",
            page_n: "ページN",
            page_styles: "ページ",
            page_styles_align_left: "左揃え",
            page_styles_align_center: "中心揃え",
            page_styles_align_right: "右揃え",
            page_styles_align_justify: "両端揃え",
            page_styles_footer: "フッター",
            page_styles_footer_page_number: "ページ番号",
            page_styles_footer_page_number_pos: "位置",
            page_styles_header: "ヘッダ",
            page_styles_header_and_footer: "ヘッダーとフッター",
            page_styles_header_text_placeholder: "ヘッダーテキストを入力",
            page_styles_page_margin: "ページ余白",
            page_styles_page_margin_top: "上",
            page_styles_page_margin_bottom: "下",
            page_styles_page_margin_left: "左",
            page_styles_page_margin_right: "右",
            table_of_contents: "目次",
            cover: "表紙と目次",
            hierarchy_title: "階層タイトル",
            slogan: "「脳のような」ナレッジマネジメントノート",
            remove_lattics_logo: "Lattics ロゴを削除する",
            import: "輸入",
            import_document: "ドキュメントをインポートする",
            attach_local_pdf: "ローカル PDF を添付",
            metadata: "メタデータ",
            metadata_add_author: "著者を追加",
            metadata_add_id: "ID を追加",
            metadata_item_type: "アイテムタイプ",
            metadata_author: "著者",
            metadata_editor: "編集者",
            metadata_contributor: "貢献者",
            metadata_translator: "翻訳者",
            metadata_reviewed_author: "レビューした著者",
            metadata_title: "タイトル",
            metadata_abstract: "要約",
            metadata_journal: "ジャーナル",
            metadata_publication: "出版物",
            metadata_time: "時間",
            metadata_issue: "刊行",
            metadata_volume: "ボリューム",
            metadata_page: "ページ",
            metadata_publisher: "出版社",
            metadata_series: "シリーズ",
            metadata_doi: "DOI",
            metadata_pmid: "PMID",
            metadata_arxiv: "Arxiv",
            metadata_issn: "ISSN",
            metadata_isbn: "ISBN",
            metadata_url: "URL",
            metadata_keywords: "キーワード",
            metadata_add_keywords: "キーワードを追加",
            bibliography: "参考文献",
            addition_pin_to_right: "ドックにピン留め",
            addition_un_pin_to_right: "ドッキングを解除",
            addition_add_tag: "Tag を追加",
            addition_add_project: "Project を追加",
            tag_deleted: "Tag が削除されました",
            addition_add_memo: "ここにメモ",
            addition_forward_link: "フォワードリンク",
            addition_backward_link: "後方リンク",
            unlink_mention: "リンクされていない",
            link: "リンク",
            link_all: "すべてリンク",
            addition_table_of_contents: "目次",
            item_created: "作成した",
            item_last_modified: "最終更新日",
            last_used: "最後に使用した",
            source_of_card: "カードのソース",
            search: "検索",
            search_placeholder: "Latticsで探す",
            searching: "検索中...",
            search_show_all: "すべて表示",
            no_matching_records: "一致するレコードはあり",
            search_find: "探す",
            next: "次",
            previous: "前の",
            search_replace: "交換する",
            search_replace_all: "すべて置換",
            search_total: "{1} 件の記事で {0} 件の結果",
            math_type: "数学の方程式",
            math_type_calculus: "微積分",
            math_type_character: "ギリシャ文字",
            math_type_elementary: "基本的な",
            math_type_function_and_set: "関数とセット",
            math_type_geometry: "ジオメトリ",
            math_type_text_mode: "LaTeX 構文",
            math_type_please_use_text_mode:
                "現在の入力にはサポートされていない構文がある可能性があるため、プレーン テキスト モードを使用することをお勧めします",
            code_block: "コード",
            separator: "Separator",
            code_block_language: "プログラム言語",
            table: "表",
            add_column_before: "前に列を追加",
            add_column_after: "後に列を追加",
            add_row_before: "前に行を追加",
            add_row_after: "後に行を追加",
            delete_column: "列の削除",
            delete_row: "行の削除",
            goal: "ゴール",
            goal_deadline: "締め切り",
            goal_choose_date: "日付を選択",
            goal_today: "今日",
            goal_left: "残り",
            goal_delayed: "遅延",
            goal_words_target: "単語数",
            goal_character_target: "キャラクター",
            goal_not_set: "未設定",
            goal_written: "書かれた",
            goal_rate: "終了した",
            goal_achieve: "成し遂げる",
            goal_achieved: "達成",
            focus_mode: "フォーカスモード",
            focus_mode_typewriter_mode: "タイプライターモード",
            focus_mode_typewriter_mode_line: "ラインに集中する",
            focus_mode_typewriter_mode_sentence: "句",
            focus_mode_typewriter_mode_paragraph: "段落",
            focus_mode_typewriter_mode_none: "なし",
            focus_mode_keyboard_sound: "キーボードの音",
            project_opening: "プロジェクトを開く...",
            project_package: "プロジェクトパッケージ",
            project_package_info:
                "プロジェクト内のすべての記事、カード、ファイル、アウトライン、マインドマップ、引用、脚注、メモ、タグ、およびその他の完全な情報をスタンドアロン ファイルとしてパッケージ化するには",
            project_package_save: "パッケージ化プロジェクト...",
            project_editors: "編集者",
            card_library: "カードライブラリ",
            add_card: "カードを追加",
            card_deleted: "引用の{}が削除されました",
            graph: "グラフ",
            graph_filter: "コンテンツフィルター",
            graph_sort_out: "自動レイアウト",
            graph_sort_out_confirm: "自動レイアウトを実行してもよろしいですか?",
            graph_view_mind_map: "マインドマッ",
            graph_view_plot_view: "ストーのあらすじ",
            graph_view_aerial_view: "鳥瞰図",
            graph_view_preview_node: "プレビュー",
            graph_view_title_node: "タイトル",
            graph_view_memo_node: "メモ",
            tag_hint: "Tag のヒント",
            cite_graph: "引用グラフ",
            graph_node_copy_cite_link: "引用リンクをコピー",
            graph_node_remove_from_project: "プロジェクトから削除",
            graph_node_remove_from_tag: "Tag から削除",
            graph_relation_link: "関連リンク",
            graph_drag_me: "ドラッグ・ミー",
            graph_upgrade_tip: "空きノードが 15 を超え",
            flashcard: "フラッシュディスク",
            flashcard_filter: "ろ過器",
            flashcard_filter_article: "文章",
            flashcard_filter_card: "カード",
            flashcard_filter_outline: "プロジェクトアウトライン",
            flashcard_filter_extension: "拡張情報",
            flashcard_sort_mode_direct: "アウトラインの順序",
            flashcard_sort_mode_inverse: "輪郭順序の反転",
            flashcard_sort_mode_random: "ランダム",
            flashcard_show_answer: "答えを表示",
            flashcard_show_question: "問題の表示",
            flashcard_next: "次へ",
            flashcard_back: "リターンマッチ",
            flashcard_complete: "仕上げる",
            flashcard_completed: "完了しました",
            flashcard_empty_tip: "フラッシュカードはアイテムまたはカードから",
            flashcard_got_it: "マスター済み",
            flashcard_enhance: "強化する",
            flashcard_ebbinghaus: "エビングハウス",
            flashcard_statistics: "統計",
            flashcard_statistics_total_have: "あなたはすでに:",
            flashcard_statistics_learned: "学んだ",
            flashcard_statistics_got_it: "マスター済み",
            flashcard_statistics_recently_learned: "最近学んだこと:",
            flashcard_question_type_default: "Q & A",
            flashcard_question_type_fill_in_the_blanks: "空白を埋めてください",
            flashcard_question_type_choice: "複数の選択肢の質問",
            template: "テンプレート",
            template_choose_template: "テンプレートの選択",
            template_current_article: "現在のドキュメント",
            template_current_project: "現行のプロジェクト",
            template_modify_styles: "スタイルの変更",
            template_setting_scope: "設定範囲",
            template_new: "新しいテンプレートとして保存",
            template_reset: "スタイルを復元",
            template_set_as_default: "デフォルトとして設定",
            custom_style: "スタイルテンプレート",
            element_styles_color: "カラー",
            element_styles_color_default: "既定",
            element_styles_color_black: "黒",
            element_styles_color_grey: "灰",
            element_styles_color_light_grey: "ライトグレー",
            element_styles_color_deep_blue: "濃紺",
            element_styles_color_blue: "青",
            element_styles_color_green: "緑",
            element_styles_color_mars_green: "マーズグリーン",
            element_styles_color_dark_green: "濃い緑",
            element_styles_color_orange: "橙",
            element_styles_color_brown: "褐",
            element_styles_color_purple: "紫",
            element_styles_color_pink: "桃",
            element_styles_color_red: "赤",
            element_styles_color_yellow: "黄",
            element_styles_build_in_magazine: "雑誌",
            element_styles_build_in_paper_thesis: "論文",
            element_styles_build_in_report: "報告",
            element_styles_build_in_diary_notes: "日記とメモ",
            element_styles_thickness: "厚さ",
            element_styles_number_style: "数値スタイル",
            element_styles_bullet_style: "箇条書きスタイル",
            element_styles_box_style: "ボックススタイル",
            element_styles_check_style: "チェックボックスのスタイル",
            element_styles_check_style_delete_line: "ラインスルー",
            element_styles_check_style_high: "ハイライト",
            element_styles_check_style_high_color: "ハイライトカラー",
            element_styles_bullet_disc: "ディスク",
            element_styles_bullet_circle: "円形",
            element_styles_bullet_square: "方形",
            element_styles_todo_style: "方形",
            element_styles_line_style: "線のスタイル",
            element_styles_line_style_solid: "実線",
            element_styles_line_style_dashed: "破線",
            element_styles_todo_style_circle: "円形",
            element_styles_quote_style_top: "上部のライン",
            element_styles_quote_style_single: "左の線",
            element_styles_quote_style_quote: "引用",
            element_styles_first_indent: "1行目のインデント",
            element_styles_paragraph: "テキスト段落",
            element_styles_head_1: "ヘディング 1",
            element_styles_head_2: "ヘディング 2",
            element_styles_head_3: "ヘディング 3",
            element_styles_head_4: "ヘディング 4",
            element_styles_head_5: "ヘディング 5",
            element_styles_head_6: "ヘディング 6",
            element_styles_indent: "インデント",
            element_styles_indent_none: "なし",
            element_styles_border: "限界",
            element_styles_offset: "偏り",
            element_styles_quote_style: "引用スタイル",
            element_styles_list_style: "リストスタイル",
            element_styles_bulleted_list: "箇条書きリスト",
            element_styles_numbered_list: "数値リスト",
            element_styles_todo_list: "Todoリスト",
            element_styles_quote: "引用",
            element_styles_text: "テキストスタイル",
            element_styles_spacing: "間隔",
            element_styles_spacing_line: "行間",
            element_styles_spacing_after: "段落の後",
            element_styles_spacing_before: "段落の前",
            statistics: "統計",
            statistics_recently: "最近",
            statistics_total: "合計",
            statistics_recently_goal_day: "日",
            statistics_recently_date_formatter: "MMM YYYY",
            statistics_recently_date_sat: "土曜",
            statistics_recently_last_month: "過去 30 日間:",
            statistics_recently_words: "追加された単語",
            statistics_recently_card: "新しいカード",
            statistics_recently_modified_contents: "変更内容:",
            statistics_total_since: "より ",
            statistics_total_install_time_label: "Lattics の設置日",
            statistics_total_have_written: "あなたが書いた:",
            statistics_total_all: "合計: (復元または同期を含む)",
            statistics_total_words: "単語数",
            tutorial: "チュートリアル",
            tutorial_url:
                "https://helps.auramarker.com/en/lattics/backup_and_sync",
            pretty_time_1_day_ago: "1日前",
            pretty_time_1_hour_ago: "1時間前",
            pretty_time_1_minute_ago: "1分前",
            pretty_time_just_now: "ちょうど今",
            pretty_time_n_days_ago: "{0}日前",
            pretty_time_n_hours_ago: "{0}時間前o",
            pretty_time_n_minute_ago: "{0}分前",
            setting: "設定",
            settings: "設定",
            account_settings: "アカウントの設定",
            appearance: "外観",
            pref_lang: "言語",
            editor_preference: "エディタの設定",
            backup: "バックアップと同期",
            pref_update: "更新",
            feedback: "フィードバック",
            about_us: "私たちに関し",
            hi_lattics_pro: "こんにちは、Lattics Pro",
            not_a_member: "アカウントがありませ?",
            already_a_member: "すでに会員で?",
            sign_out: "サインアウト",
            sign_up: "ログイン",
            delete_account: "アカウントを削除",
            account_delete_confirm: "アカウントを削除する必要？",
            account_delete_confirm_message:
                "この操作によりアカウントが完全に削除され、データは復元できなくなるため、事前にデータをバックアップまたはエクスポートしてください。",
            delete_account_need_re_signin:
                "アカウントを削除するには、もう一度サインインしてください",
            membership_cancel_renew: "自動更新をキャン",
            membership_expiration_info: "メンバーシップは {0} に期限",
            membership_will_renew: "メンバーシップは {0} に更新",
            theme_light: "淡白",
            theme_dark: "暗い",
            theme_system: "システム",
            theme_klein_blue: "クラインブルー",
            theme_pantone_red: "パントンレッド",
            theme_tiffany_green: "ティファニーグリーン",
            theme_hermes_brown: "エルメスブラウン",
            theme_silver: "銀",
            theme_midnight_blue: "ミッドナイトブルー",
            theme_dark_rose: "ダークローズ",
            theme_marrs_green: "マーズ・グリーン",
            theme_ink: "インク",
            pref_editor_font: "既定フォント",
            pref_editor_font_size: "フォントサイズ",
            pref_editor_spellcheck: "スペルチェック",
            pref_editor_markdown: "Markdown 構文を有効にする",
            pref_editor_context_menu: "ポップアップメニューを有効にする",
            pref_editor_latin_font: "英数字フォント",
            pref_editor_asian_font: "日本語フォント",
            backup_before: "Lattics のバックアップパスを設定",
            backup_choose_folder: "フォルダーの選択",
            pref_backup_path: "バックアップパス:",
            config_unset: "設定されていませ",
            change_backup_dir: "バックアップパスの変更",
            open_dir: "ディレクトリを開く",
            backup_now: "今すぐバックアップ",
            backup_restore: "バックアップを復元",
            backup_enable_auto: "自動バックアップを有効",
            backup_history: "バックアップ履歴",
            size: "サイズ",
            backup_restore_from: "このバックアップから復元",
            interval: "バックアップサイクル",
            every_day: "毎日",
            every_week: "毎週",
            pref_update_lasted: "Lattics は最新です",
            pref_update_version: "アプリのバージョン",
            pref_update_check: "アップデートをチ",
            pref_update_checking: "チェック中",
            new_update_available: "新しいアップデートが利用可能",
            version_number: "バージョン: {0}",
            update_now: "今すぐアップデート",
            auto_update_relaunch: "再起動する",
            feedback_placeholder: "ご提案やアイデアをお任せく",
            update_logs: "実行時ログを送信する",
            update_logs_desc: "トラブルシューティングのみに使用されます",
            pref_terms_of_service: "利用規約",
            terms_of_service_link:
                "https://lattics.zineapi.com/en-US/terms_of_service",
            pref_privacy_policy: "プライバシーポリシー",
            pref_about_us_other_prod: "その他のアプリ",
            pref_about_us_more: "もっと詳しく",
            pref_about_us_zine: "美しいノートとライティングのモバイル アプリ",
            pref_about_us_varlens: "携帯電話のデジタル一眼レフカメラ",
            sign_in: "ログイン",
            sign_in_migration_check_desc:
                "未ログイン時に作成したコンテンツをログインアカウントに移行",
            data_merging: "データを結合して...",
            register_inform: "サインインすると、{0} と {1} に同意し",
            privacy_policy: "プライバシーポリシー",
            privacy_link: "https://lattics.zineapi.com/en-US/privacy-policy",
            signin_err_email_invalid: "有効なメールアドレスを入力して",
            signin_err_email_not_exists: "このメールは登録されていません",
            signin_err_email_not_verified: "メールは検証されていない",
            signin_err_invalid_password: "無効なパスワード",
            signin_err_password_length: "少なくとも6文字",
            forget_password: "パスワードをお忘れで？",
            enter_your_account_email: "アカウントのメールアドレスを入力",
            enter_the_code: "確認コードを入力してく",
            enter_the_code_sent_to: "検証コードは次の宛先に送信されま: {0}",
            code_empty: "コードが空です!",
            invalid_verify_code: "無効な検証コード",
            reset_password: "パスワードを再設定",
            enter_new_password: "新しいパスワードを入力",
            enter_a_new_password: "新しいパスワードを入力",
            repeat_password: "パスワードを再度入力",
            tow_passwords_not_match: "2 つのパスワードが一致しませ",
            now_you_can_use_the_new_password:
                "新しいパスワードでサインインできるようにな",
            welcome_aboard: "ようこそ",
            welcome_back: "おかえり",
            go_to_sign_in: "サインインに移動",
            go_back: "返る",
            signup_email_exists: "メールは既に存在します",
            err_unknown: "不明なエラー",
            err_username_characters:
                "ユーザー名には文字、数字、アンダースコア、ドットのみを含めることができます",
            err_username_empty: "ユーザー名を空にすることはできませ",
            err_username_exist: "ユーザー名は既に存在し",
            err_username_length_range:
                "ユーザー名を {0} ～ {1} 文字の間で入力してく",
            err_email_exist: "メールは既に存在し",
            err_email_invalid: "メールアドレスが無効",
            change_plan: "プラン変更",
            purchase: "購買",
            purchase_pro_desc:
                "Lattics Pro メンバーシップの購入へようこそ。そのすべての機能を楽しむことができ、一貫して改善するために私たちをサポートしてください",
            feature_documents_in_project: "プロジェクト内のドキュメント",
            feature_knowledge_graph_nodes: "ナレッジグラフノード",
            feature_export_custom_layout:
                "カスタマイズされたスタイル テンプレート",
            feature_text_md_doc_export: "TXT/MD のエクスポート",
            feature_export_image_and_pdf: "PDF/DOCX/画像をエクスポート",
            feature_goal_and_statistic: "目標と統計",
            feature_theme: "カスタマイズされたテーマ",
            feature_flashcard: "フラッシュカードの統計とエビングハウス",
            unlimited: "無制限",
            purchase_free_trail: "{}-日間のトライアル",
            purchase_monthly: "月額会員",
            purchase_mas_monthly: "月額会員",
            purchase_yearly: "年間会員",
            purchase_mas_yearly: "年間会員",
            years: "年",
            purchase_save: "省く",
            yearly_price_avg: "12 か月間、{0}/月",
            purchase_restore: "購入を復元",
            purchase_inform: "自動更新、いつでもキャンセル可能",
            purchase_unsubscription_desc:
                "アカウント設定に移動してサブスクリプションを管理し、購入後にサブスクリプションをキャンセルできます。 具体的なパスは次のとおりです。「設定」 -> Apple ID -> メディアと購入 -> サブスクリプション",
            choose_payment_method: "お支払方法を選択し",
            total: "全額",
            congratulations: "おめでとう！",
            you_are_now_a_member: "あなたは現在 {} ",
            payment_succeed: "支払いは成功しましたか?",
            payment_succeed_desc:
                "支払いが完了したら、「はい」ボタンをクリックして更新してく",
            not_yet: "まだ",
            yes: "はい",
            payment_state_not_change:
                "注文のステータスは変更されていません。支払いが成功したかどうかを確認するか、後でもう一度お試しください。",
            purchase_user_reviews_briefly_Drlcm: "ユニークです",
            purchase_user_reviews_content_Drlcm:
                "実際、これを使って長い文書を整理するのがとても楽しかったです。 それは素晴らしいアイデアであり、私がこれまでに見たものとは異なります。",
            purchase_user_reviews_briefly_Drjimmoore: "素晴らしいポテンシャル!",
            purchase_user_reviews_content_Drjimmoore:
                "私がとても気に入っているのはワークフローです。 右側のカードへの書き込みから、左側の記事リストへのカードの挿入まで。",
            purchase_user_reviews_briefly_UltimateMac:
                "このアプリは書くのが本当に楽しくなります",
            purchase_user_reviews_content_UltimateMac:
                "従来の筆記具を超えた、型破りな機能設計、優れたインターフェースのデザインとレイアウト、そして先進的な美学を備えたアプリケーションです。 お気に入りのドラッグ アンド ドロップ カード ライブラリがあると、書くのがとても楽しくなります。",
            purchase_user_reviews_briefly_Visesen: "見た目はとても良いです",
            purchase_user_reviews_content_Visesen:
                "開発は非常に順調に見えます。 さらに、開発者はフィードバックに迅速に対応します",
        },
        fr: {
            _key: "fr",
            _name: "Français",
            colon: ": ",
            project: "Projet",
            projects: "Projets",
            article: "Article",
            articles: "Articles",
            card: "Carte",
            cards: "Cartes",
            all_cards: "Toutes les cartes",
            tag: "Tag",
            tags: "Tags",
            file: "Fichier",
            all_files: "Tous les fichiers",
            folder: "Dossier",
            cancel: "Annuler",
            change: "Changement",
            continue: "Continuer",
            delete: "Supprimer",
            delete_confirm: "Êtes-vous sûr de vouloir supprimer cet élément?",
            edit: "Modifier",
            loading: "Chargement...",
            remove: "Retirer",
            rename: "Renommer",
            reset: "Réinitialiser",
            save: "Sauver",
            submit: "Soumettre",
            update: "Mise à jour",
            upgrade: "Améliorer",
            upgrade_now: "Passez à l'adhésion pro",
            uploading: "Envoi de données...",
            created_at: "Créé",
            modified_at: "Modifié",
            default: "Défaut",
            more: "Plus",
            ok: "Bien",
            success: "Succès",
            untitled: "Sans titre",
            done: "Fait",
            ignore: "Ignorer",
            load_more: "Charger plus",
            link_add_placeholder: "Saisir ou coller un lien",
            image_caption_placeholder:
                "Saisir une légende pour l'image (facultatif)",
            about: "À propos",
            close: "Fermer",
            copy: "Copie",
            cut: "Couper",
            help: "Aide",
            hide: "Cacher",
            hide_others: "Masquer les autres",
            homepage: "Page d'accueil",
            minimize: "Minimiser",
            open_main_window: "Fenêtre principale",
            paste: "Coller",
            paste_as_text: "Coller avec du texte brut",
            preferences: "Préférence",
            quit: "Arrêter",
            redo: "Refaire",
            reload: "Recharger",
            reset_zoom: "Reset Zoom",
            select_all: "Tout sélectionner",
            toggle_dark_mode: "Mode sombre",
            toggle_full_screen: "Plein écran",
            undo: "défaire",
            unhide: "Afficher",
            view: "Vue",
            window: "Vitre",
            zoom: "Zoom",
            zoom_in: "Agrandir",
            zoom_out: "Dézoomer",
            walk_through_home_title:
                '"Semblable à un cerveau"\nNotes de gestion des connaissances',
            walk_through_home_sub_title:
                "Augmenter les connaissances humaines, améliorer l'efficacité de la création de connaissances",
            walk_through_next: "Suivant",
            walk_through_prev: "Précédent",
            walk_through_done: "Fait",
            walk_through_slide_one_title:
                "Stockez vos pensées dans la bibliothèque de cartes",
            walk_through_slide_two_title: "Aperçu du projet de type Mindmap",
            walk_through_slide_three_title: "Élément de bloc déplaçable",
            walk_through_slide_four_title:
                "Hors ligne d'abord, sauvegarde complète de la bibliothèque",
            walk_through_slide_five_title:
                "Une variété de méthodes d'exportation de documents",
            new_project: "Nouveau projet",
            change_icon: "Changer d'icône",
            new_document: "Nouvel article",
            new_article: "Nouvel article",
            duplicate: "Dupliquer",
            merge_selected_docs: "Fusionner des articles",
            merge_selected_docs_as_new: "Fusionner en nouvel article",
            merge_docs_fail: "Échec de la fusion des articles",
            delete_n_items: "Supprimer {0} éléments",
            continue_read: "En lisant de séquence",
            editor_input_placeholder: "Écrire quelque chose ou entrer '/'",
            tooltip_extension_info: "Info sur les extensions",
            tooltip_standalone_window: "Modifier dans la fenêtre autonome",
            tooltip_article_comparison: "Comparaison bi-article",
            split_vertical: "Vertical",
            split_horizontal: "Horizontal",
            tooltip_split_article: "Article fractionné",
            words: "mots",
            characters: "caractères",
            words_count: "Mots",
            words_count_characters: "Caractères",
            words_count_characters_without_spaces: "Non espaces",
            words_count_asian: "Asiatique",
            words_count_asian_non: "Non asiatiques",
            words_count_punctuations: "Punctuations",
            words_count_paragraphs: "Paragraphs",
            cite: "Citer",
            cited: "Cité ",
            cite_target_not_found: "Citer introuvable",
            cancel_cited: "Annuler cité",
            change_display_name: "Modifier le nom d'affichage",
            full_cite: "Citation complète",
            title_cite: "Titre Citer",
            display_name: "Afficher nom",
            turn_to_card: "Transformer en Carte",
            link_to: "Lien vers",
            cite_filter_none: "Aucun enregistrement correspondant",
            create_or_search_cite: "Créer ou rechercher une citation",
            press_enter_add_cite: 'Appuyez sur "Entrée" pour',
            add_one: " ajouter un ",
            create_one: " créer un ",
            create_or_search_footnote:
                "Créer ou rechercher une note de bas de page",
            add_a_comment: "Ajouter un commentaire",
            comment: "Commentair",
            footnote: "Footnote",
            create_table_from: "Créer un tableau",
            create_tags: "Créer des tag",
            file_nonexistent: "Fichier ne existe pas",
            file_open: "Ouvrir",
            file_open_by_other: "Ouvrir dans d'autres applications",
            file_path: "Chemin local",
            file_size: "Taille",
            font_family: "Police",
            font_size: "Taille de Police",
            font_color: "Couleur de Police",
            highlight_color: "Couleur de Surlignage",
            copy_link: "Copier le Lien",
            align: "Aligner",
            indent: "Indentation",
            d_indent: "Désindenter",
            line_height: "Espacement des Lignes",
            width: "Largeur",
            layout: "Mise en page",
            clear_style: "Effacer le style",
            left: "Gauche",
            right: "Droite",
            center: "Centrer",
            justify: "Justifier",
            turn_to: "Transformer en",
            turn_to_block_code: "Tourner vers le code",
            line_space_normal: "Normal",
            line_space_double: "Double",
            tag_deleted: "La balise a été supprimée",
            last_used: "Dernièrement utilisé",
            card_deleted: "La {} de citation a été supprimée",
            unsorted: "Non trié",
            sort: "Trier",
            sort_mode_modified: "Temps de modification",
            sort_mode_created: "Temps de création",
            sort_mode_char_code_inc: "A-Z",
            sort_mode_char_code_sub: "Z-A",
            tag_mode_filter: "Filtre",
            tag_mode_filter_sub: "Tous les sous-titres",
            trashcan: "Poubelle",
            trashcan_empty: "Vider",
            trashcan_put_back: "Remettre",
            trashcan_delete_confirm:
                "Voulez-vous vraiment supprimer définitivement cet élément?",
            trashcan_empty_confirm:
                "Êtes-vous sûr de vouloir vider la corbeille?",
            trashcan_err_item_not_exist: "L'article n'existe pas",
            trashcan_err_path_not_exist: "Le chemin n'existe pas",
            trashcan_err_project_not_exist: "Le projet n'existe pas",
            export: "Exporter",
            export_article: "Exportation d'articles",
            export_image: "Exporter l'image",
            export_image_loading: "Exportation d'images",
            export_image_size: "Taille de l'image",
            export_notes: "Note",
            export_pdf: "Exporter PDF",
            export_pdf_basic: "Basique",
            export_pdf_advance: "Avancé",
            export_pdf_page_comment: "Commentaires",
            export_pdf_page_footnote: "Exporter des footnote",
            export_pdf_page_footnote_pos: "Position de footnote",
            export_pdf_page_footnote_pos_article: "Fin du document",
            export_pdf_page_footnote_pos_page: "Fin de page",
            export_pdf_page_show_page_number: "Afficher le numéro de page",
            export_pdf_page_loading: "Exportation PDF",
            export_pdf_page_number: "Numéro de page",
            export_pdf_page_size: "Taille de la page",
            export_pdf_page_break: "Saut de page",
            export_project: "Exportation de projet",
            export_type_image: "Image",
            export_with_type: "Exporter {}",
            page_n: "Page N",
            page_styles: "Page",
            page_styles_align_left: "Gauche",
            page_styles_align_center: "Centre",
            page_styles_align_right: "Droite",
            page_styles_align_justify: "Justifier",
            page_styles_footer: "Bas de page",
            page_styles_footer_page_number: "Numéro de page",
            page_styles_footer_page_number_pos: "Position",
            page_styles_header: "Boutisse",
            page_styles_header_and_footer: "Boutisse et bas de page",
            page_styles_header_text_placeholder:
                "Saisir le texte de l'boutisse",
            page_styles_page_margin: "Marge de page",
            page_styles_page_margin_top: "Haut",
            page_styles_page_margin_bottom: "Bas",
            page_styles_page_margin_left: "Gauche",
            page_styles_page_margin_right: "Droite",
            table_of_contents: "Table des matières",
            cover: "Couverture et table des matières",
            hierarchy_title: "Titre de la hiérarchie",
            slogan: 'Notes de gestion des connaissances "ressemblant à un cerveau"',
            remove_lattics_logo: "Supprimer le logo Lattics",
            import: "Importer",
            import_document: "Importer un document",
            attach_local_pdf: "Attacher PDF local",
            metadata: "Métadonnées",
            metadata_add_author: "Ajouter un auteur",
            metadata_add_id: "Ajouter un identifiant",
            metadata_item_type: "Type d’article",
            metadata_author: "Auteur",
            metadata_editor: "Éditeur",
            metadata_contributor: "Contributeur",
            metadata_translator: "Traducteur",
            metadata_reviewed_author: "Auteur examiné",
            metadata_title: "Titre",
            metadata_abstract: "Résumé",
            metadata_journal: "Journal",
            metadata_publication: "Publication",
            metadata_time: "Temps",
            metadata_issue: "Issue",
            metadata_volume: "Volume",
            metadata_page: "Page",
            metadata_publisher: "Éditeur",
            metadata_series: "Série",
            metadata_doi: "DOI",
            metadata_pmid: "PMID",
            metadata_arxiv: "Arxiv",
            metadata_issn: "ISSN",
            metadata_isbn: "ISBN",
            metadata_url: "URL",
            metadata_keywords: "Mots clés",
            metadata_add_keywords: "Ajouter des mots clés",
            bibliography: "Bibliographie",
            addition_pin_to_right: "Épingler au Dock",
            addition_un_pin_to_right: "Détacher",
            addition_add_tag: "Ajouter des tag",
            addition_add_project: "Ajouter un projet",
            addition_add_memo: "Mémo ici",
            addition_forward_link: "Lien vers l'avant",
            addition_backward_link: "Lien vers l'arrière",
            unlink_mention: "Dissocié",
            link: "Lien",
            link_all: "Lier tout",
            addition_table_of_contents: "Table des matières",
            item_created: "Créé",
            item_last_modified: "Dernière modification",
            source_of_card: "Source",
            search: "Recherche",
            search_placeholder: "Rechercher en Lattics",
            searching: "Recherche...",
            search_show_all: "Afficher tout",
            no_matching_records: "Aucun enregistrement correspondant",
            search_find: "Trouver",
            next: "Suivant",
            previous: "Précédent",
            search_replace: "Remplacer",
            search_replace_all: "Remplace tout",
            search_total: "{0} résultats dans {1} articles",
            math_type: "Équation mathématique",
            math_type_calculus: "Calcul",
            math_type_character: "Alphabet",
            math_type_elementary: "Élémentaire",
            math_type_function_and_set: "Fonction et Ensemble",
            math_type_geometry: "Géométrie",
            math_type_text_mode: "Syntaxe LaTeX",
            math_type_please_use_text_mode:
                "Il peut y avoir une syntaxe non prise en charge pour l'entrée actuelle, et il est recommandé d'utiliser le mode texte brut.",
            code_block: "Bloc de code",
            separator: "Séparateur",
            code_block_language: "Langue du programme",
            table: "Table",
            add_column_before: "Ajouter une colonne avant",
            add_column_after: "Ajouter une colonne après",
            add_row_before: "Ajouter une ligne avant",
            add_row_after: "Ajouter une ligne après",
            delete_column: "Supprimer la colonne",
            delete_row: "Supprimer la ligne",
            goal: "Objectif",
            goal_deadline: "Date limite",
            goal_choose_date: "Choisissez date",
            goal_today: "Aujourd",
            goal_left: "Restants",
            goal_delayed: "Retardé",
            goal_words_target: "Mots",
            goal_character_target: "Caractères",
            goal_not_set: "Pas défini",
            goal_written: "Écrit",
            goal_rate: "Fini",
            goal_achieve: "Atteindre",
            goal_achieved: "Atteint",
            focus_mode: "Mode de mise au point",
            focus_mode_typewriter_mode: "Mode machine à écrire",
            focus_mode_typewriter_mode_line: "Concentrez-vous sur la ligne",
            focus_mode_typewriter_mode_sentence: "Phrase",
            focus_mode_typewriter_mode_paragraph: "Paragraph",
            focus_mode_typewriter_mode_none: "Aucun",
            focus_mode_keyboard_sound: "Son du clavier",
            project_opening: "Projet d'ouverture...",
            project_package: "Paquet de projet",
            project_package_info:
                "Pour regrouper tous les articles, cartes, fichiers, contours, cartes mentales, citations, notes de bas de page, mémos, balises et autres informations complètes du projet sous forme de fichier autonome",
            project_package_save: "Projet d'emballage...",
            project_editors: "Éditeurs",
            card_library: "Cartes",
            add_card: "Ajouter carte",
            graph: "Graphique",
            graph_filter: "Filtre de contenu",
            graph_sort_out: "Disposition auto",
            graph_sort_out_confirm:
                "Voulez-vous vraiment la mise en page automatique?",
            graph_view_mind_map: "Carte mentale",
            graph_view_plot_view: "Intrigue de l'histoire",
            graph_view_aerial_view: "Vue aérienne",
            graph_view_preview_node: "Preview",
            graph_view_title_node: "Titre",
            graph_view_memo_node: "Mémo",
            tag_hint: "Tags",
            cite_graph: "Citation graphique",
            graph_node_copy_cite_link: "Copier le lien de citation",
            graph_node_remove_from_project: "Supprimer du projet",
            graph_node_remove_from_tag: "Supprimer de la tag",
            graph_relation_link: "Lien relationnel",
            graph_drag_me: "Tire moi",
            graph_upgrade_tip: "Dépasser de 15 nœuds gratuits",
            flashcard: "Flashcards",
            flashcard_filter: "Le filtre",
            flashcard_filter_article: "Articles",
            flashcard_filter_card: "Cartes",
            flashcard_filter_outline: "Aperçu du projet",
            flashcard_filter_extension: "Info sur les extensions",
            flashcard_sort_mode_direct: "Ordre des contours",
            flashcard_sort_mode_inverse: "Inverser l'ordre des contours",
            flashcard_sort_mode_random: "Aléatoire",
            flashcard_show_answer: "Afficher les réponses",
            flashcard_show_question: "Afficher le problème",
            flashcard_next: "Suivant",
            flashcard_back: "Retour",
            flashcard_complete: "Compléter",
            flashcard_completed: "Complété",
            flashcard_empty_tip: "Carte Flash d'un objet ou d'une carte",
            flashcard_got_it: "Maîtrisé",
            flashcard_enhance: "Améliorer",
            flashcard_ebbinghaus: "Ebbinghaus",
            flashcard_statistics: "Statistiques",
            flashcard_statistics_total_have: "Tu as:",
            flashcard_statistics_learned: "Appris",
            flashcard_statistics_got_it: "Maîtrisé",
            flashcard_statistics_recently_learned: "Appris récemment:",
            flashcard_question_type_default: "Q & A",
            flashcard_question_type_fill_in_the_blanks:
                "Remplir les espaces vides",
            flashcard_question_type_choice: "Questions à choix multiple",
            template: "Modèle",
            template_choose_template: "Choisir modèle",
            template_current_article: "Article actuel",
            template_current_project: "Projet actuel",
            template_modify_styles: "Modifier styles",
            template_setting_scope: "Définition de portée",
            template_new: "Enregistrer que nouveau modèle",
            template_reset: "Restaurer style",
            template_set_as_default: "Définir par défaut",
            custom_style: "Modèle de styles",
            element_styles_color: "Couleur",
            element_styles_color_default: "Défaut",
            element_styles_color_black: "Noir",
            element_styles_color_grey: "Gris",
            element_styles_color_light_grey: "Gris clair",
            element_styles_color_deep_blue: "Bleu profond",
            element_styles_color_blue: "Bleu",
            element_styles_color_green: "Vert",
            element_styles_color_mars_green: "Mars vert",
            element_styles_color_dark_green: "Vert foncé",
            element_styles_color_orange: "Orange",
            element_styles_color_brown: "Brun",
            element_styles_color_purple: "Violet",
            element_styles_color_pink: "Rose",
            element_styles_color_red: "Rouge",
            element_styles_color_yellow: "Jaune",
            element_styles_build_in_magazine: "Magazine",
            element_styles_build_in_paper_thesis: "Mémoire et thèse",
            element_styles_build_in_report: "Rapport",
            element_styles_build_in_diary_notes: "Journal et notes",
            element_styles_thickness: "Épaisseur",
            element_styles_number_style: "Style numérique",
            element_styles_bullet_style: "Style à puces",
            element_styles_box_style: "Style de boîte",
            element_styles_check_style: "Style de cocher",
            element_styles_check_style_delete_line: "Ligne à travers",
            element_styles_check_style_high: "Surbrillance",
            element_styles_check_style_high_color: "Couleur de surbrillance",
            element_styles_bullet_disc: "Disque",
            element_styles_bullet_circle: "Cercle",
            element_styles_bullet_square: "Carré",
            element_styles_todo_style: "Square",
            element_styles_line_style: "Style de ligne",
            element_styles_line_style_solid: "Continue",
            element_styles_line_style_dashed: "Pointillée",
            element_styles_todo_style_circle: "Cercle",
            element_styles_quote_style_top: "Ligne supérieure",
            element_styles_quote_style_single: "Ligne gauche",
            element_styles_quote_style_quote: "Citation",
            element_styles_first_indent: "First Line Indent",
            element_styles_paragraph: "Texte",
            element_styles_head_1: "Titre 1",
            element_styles_head_2: "Titre 2",
            element_styles_head_3: "Titre 3",
            element_styles_head_4: "Titre 4",
            element_styles_head_5: "Titre 5",
            element_styles_head_6: "Titre 6",
            element_styles_indent: "Indent",
            element_styles_indent_none: "Aucun",
            element_styles_border: "Bordure",
            element_styles_offset: "Offset",
            element_styles_quote_style: "Style de citation",
            element_styles_list_style: "Style de liste",
            element_styles_bulleted_list: "Liste à puces",
            element_styles_numbered_list: "Liste numérique",
            element_styles_todo_list: "Liste de Todo",
            element_styles_quote: "Citation",
            element_styles_text: "Style de texte",
            element_styles_spacing: "Espacement",
            element_styles_spacing_line: "Interligne",
            element_styles_spacing_after: "Après le paragraphe",
            element_styles_spacing_before: "Avant le paragraphe",
            statistics: "Statistiques",
            statistics_recently: "Récemment",
            statistics_total: "Total",
            statistics_recently_goal_day: "j",
            statistics_recently_date_formatter: "MMM YYYY",
            statistics_recently_date_sat: "Sam.",
            statistics_recently_last_month: "Les 30 derniers jours:",
            statistics_recently_words: "Mots ajoutés",
            statistics_recently_card: "Nouvelle carte",
            statistics_recently_modified_contents: "Contenu modifié:",
            statistics_total_since: "Depuis ",
            statistics_total_install_time_label:
                "Date d'installation des Lattics",
            statistics_total_have_written: "Vous avez écrit:",
            statistics_total_all: "Total : (y compris restauration ou sync)",
            statistics_total_words: "Mots",
            tutorial: "Didacticiel",
            tutorial_url:
                "https://helps.auramarker.com/en/lattics/backup_and_sync",
            pretty_time_1_day_ago: "il 1 jour",
            pretty_time_1_hour_ago: "il 1 heure",
            pretty_time_1_minute_ago: "il 1 minute",
            pretty_time_just_now: "Juste maintenant",
            pretty_time_n_days_ago: "il {0} jours",
            pretty_time_n_hours_ago: "il {0} heures",
            pretty_time_n_minute_ago: "il {0} minutes",
            setting: "Paramètre",
            settings: "Paramètres",
            account_settings: "Paramètres du compte",
            appearance: "Apparence",
            pref_lang: "Langages",
            editor_preference: "Préférences de l'éditeur",
            backup: "Sauvegarde et Sync",
            pref_update: "Mise à jour",
            feedback: "Retour",
            about_us: "À propos de nous",
            hi_lattics_pro: "Salut, Latics Pro",
            not_a_member: "Je n'ai pas de compte?",
            already_a_member: "Déjà membre?",
            sign_out: "Se déconnecter",
            sign_up: "Connectez-vous compte",
            delete_account: "Supprimer le compte",
            account_delete_confirm: "Confirmez-vous la suppression du compte?",
            account_delete_confirm_message:
                "Veuillez noter que cette opération supprimera complètement votre compte et que les données ne sont pas récupérables, veuillez donc sauvegarder ou exporter vos données à l'avance.",
            delete_account_need_re_signin:
                "Veuillez vous reconnecter pour supprimer votre compte.",
            membership_cancel_renew: "Annuler le renouvellement auto",
            membership_expiration_info: "L'adhésion expirera le {0}",
            membership_will_renew: "L'adhésion sera renouvelée le {0}",
            theme_light: "Clair",
            theme_dark: "Foncé",
            theme_system: "système",
            theme_klein_blue: "Bleu Klein",
            theme_pantone_red: "Rouge Pantone",
            theme_tiffany_green: "Tiffany Vert",
            theme_hermes_brown: "Hermes Brun",
            theme_silver: "Argent",
            theme_midnight_blue: "Bleu nuit",
            theme_dark_rose: "Rose sombre",
            theme_marrs_green: "Marrs Vert",
            theme_ink: "Encrer",
            pref_editor_font: "Police par défaut",
            pref_editor_latin_font: "Police latine",
            pref_editor_asian_font: "Police asiatique",
            pref_editor_font_size: "Taille de police",
            pref_editor_spellcheck: "Vérification orthographique",
            pref_editor_markdown: "Activer la syntaxe Markdown",
            pref_editor_context_menu: "Activer le menu contextuel",
            backup_before:
                "Veuillez définir le chemin de sauvegarde pour Lattics",
            backup_choose_folder: "Choisir dossier",
            pref_backup_path: "Chemin de sauvegarde:",
            config_unset: "Pas encore défini",
            change_backup_dir: "Modifier chemin de sauvegarde",
            open_dir: "Ouvrir répertoire",
            backup_now: "Sauvegarder maintenant",
            backup_restore: "Restaurer sauvegarde",
            backup_enable_auto: "Activer sauvegarde auto",
            backup_history: "BHistorique de sauvegarde",
            size: "Taille",
            backup_restore_from: "Restaurer depuis cette sauvegarde",
            interval: "Intervalle",
            every_day: "Tous jours",
            every_week: "Toutes semaines",
            pref_update_lasted: "Votre Lattics est à jour",
            pref_update_version: "Version de l'application",
            pref_update_check: "Vérifier mise à jour",
            pref_update_checking: "Vérification",
            new_update_available: "Nouvelle mise à jour disponible",
            version_number: "Version: {0}",
            update_now: "Mettez à jour maintenant",
            auto_update_relaunch: "Relancer",
            feedback_placeholder:
                "S'il vous plaît laissez-nous vos suggestions ou idées",
            update_logs: "Soumettre les journaux d'exécution",
            update_logs_desc: "Il est uniquement utilisé pour le dépannage",
            pref_terms_of_service: "Conditions d'utilisation",
            terms_of_service_link:
                "https://lattics.zineapi.com/en-US/terms_of_service",
            pref_privacy_policy: "Politique de Confidentialité",
            pref_about_us_other_prod: "Nos autres applications",
            pref_about_us_more: "Apprendre plus",
            pref_about_us_zine:
                "Une belle application mobile de notes et d'écriture",
            pref_about_us_varlens: "DSLR dans téléphone",
            sign_in: "Connectez-vous compte",
            sign_in_migration_check_desc:
                "Migrer le contenu créé en mode non connecté vers le compte de connexion",
            data_merging: "Fusion des données...",
            register_inform:
                "Par connexion signifie que vous êtes d'accord avec nos {0} et {1}.",
            privacy_policy: "Politique de Confidentialité",
            privacy_link: "https://lattics.zineapi.com/en-US/privacy-policy",
            signin_err_email_invalid:
                "S'il vous plaît, mettez une adresse email valide",
            signin_err_email_not_exists: "Cet email n'est pas enregistré.",
            signin_err_email_not_verified: "L'email n'est pas verifié.",
            signin_err_invalid_password: "Mot de passe incorrect.",
            signin_err_password_length: "6 caractères au moins",
            forget_password: "Mot de passe oublié?",
            enter_your_account_email: "Veuillez saisir l'email de votre compte",
            enter_the_code: "Entrez code de vérification",
            enter_the_code_sent_to: "Le code de vérification est envoyé à: {0}",
            code_empty: "Le code est vide!",
            invalid_verify_code: "Code de vérification invalide",
            reset_password: "Réinitialiser mot de passe",
            enter_new_password: "Entrer nouveau mot de passe",
            enter_a_new_password: "Entrer un nouveau mot de passe",
            repeat_password: "Répéter mot de passe",
            tow_passwords_not_match:
                "Les deux mots de passe ne correspondent pas",
            now_you_can_use_the_new_password:
                "Vous pouvez maintenant vous connecter avec le nouveau mot de passe",
            welcome_aboard: "Bienvenue à bord",
            welcome_back: "Content de te revoir",
            go_to_sign_in: "Aller à Se connecter",
            go_back: "Retourner",
            signup_email_exists: "L'email existe déjà",
            err_unknown: "Erreur inconnue",
            err_username_characters:
                "Le nom d'utilisateur ne peut contenir que des lettres, des chiffres, des traits de soulignement et des points",
            err_username_empty: "Le nom d'utilisateur ne peut pas être vide",
            err_username_exist: "Ce nom d'utilisateur existe déjà",
            err_username_length_range:
                "Veuillez entrer un nom d'utilisateur entre {0} et {1} caractères",
            err_email_exist: "L'email existe déjà",
            err_email_invalid: "Adresse email invalide",
            change_plan: "Changer de forfait",
            purchase: "Achat",
            purchase_pro_desc:
                "Bienvenue pour acheter un abonnement Lattics Pro, vous pouvez profiter de toutes ses fonctionnalités et nous aider à l'améliorer de manière constante",
            feature_documents_in_project: "Documents dans projet",
            feature_knowledge_graph_nodes: "Nœuds du graphe de connaissances",
            feature_export_custom_layout: "Modèle de style personnalisé",
            feature_text_md_doc_export: "Exporter TXT/MD",
            feature_export_image_and_pdf: "Exporter PDF/DOCX/Image",
            feature_goal_and_statistic: "Objectif et Statistique",
            feature_theme: "Thèmes personnalisés",
            feature_flashcard: "Flashcard Statistiques et Ebbinghaus",
            unlimited: "Illimité",
            purchase_free_trail: "{}-jours d'essai",
            purchase_monthly: "Plan Mensuel",
            purchase_mas_monthly: "Plan Mensuel",
            purchase_yearly: "Plan Annuel",
            purchase_mas_yearly: "Plan Annuel",
            years: "Ans",
            purchase_save: "Sauver",
            yearly_price_avg: "12 mois à {0}/mois",
            purchase_restore: "Restaurer l'achat",
            purchase_inform: "Renouvellement auto, annulation à tout moment",
            purchase_unsubscription_desc:
                "Vous pouvez accéder aux paramètres du compte pour gérer l'abonnement et annuler l'abonnement après l'achat. Le chemin spécifique est: \"Paramètres\" -> ID Apple -> Média et Achat -> Abonnement",
            choose_payment_method: "Choisissez votre méthode de paiement",
            total: "Total",
            congratulations: "Toutes nos félicitations!",
            you_are_now_a_member: "Vous êtes {} maintenant",
            payment_succeed: "Paiement réussi?",
            payment_succeed_desc:
                'Si vous avez terminé le paiement, veuillez cliquer sur le bouton "Oui" pour actualiser.',
            not_yet: "Pas encore",
            yes: "Oui",
            payment_state_not_change:
                "Le statut de la commande n'a pas changé, veuillez confirmer si le paiement a réussi ou réessayer plus tard.",
            purchase_user_reviews_briefly_Drlcm: "C'est Unique",
            purchase_user_reviews_content_Drlcm:
                "En fait, j'ai vraiment aimé l'utiliser pour organiser un long document. C'est une idée merveilleuse et contrairement à tout ce que j'ai vu d'autre.",
            purchase_user_reviews_briefly_Drjimmoore: "Beau potentiel!",
            purchase_user_reviews_content_Drjimmoore:
                "Ce que j'aime beaucoup, c'est le flux de travail. De l'écriture sur des cartes sur le côté droit à l'insertion de cartes dans une liste d'articles sur le côté gauche.",
            purchase_user_reviews_briefly_UltimateMac:
                "Cette application rend l'écriture vraiment amusante",
            purchase_user_reviews_content_UltimateMac:
                "Une application qui va au-delà des outils d'écriture traditionnels, avec une conception fonctionnelle non conventionnelle, une excellente conception et mise en page de l'interface et une esthétique avancée. Et avoir ma bibliothèque de cartes préférée par glisser-déposer rend l'écriture très amusante.",
            purchase_user_reviews_briefly_Visesen: "Semble très bien",
            purchase_user_reviews_content_Visesen:
                "Le développement s'annonce très bien. De plus, les développeurs répondent rapidement aux commentaires.",
        },
        es: {
            _key: "es",
            _name: "Español",
            colon: ": ",
            project: "Proyecto",
            projects: "Proyectos",
            article: "Artículo",
            articles: "Artículos",
            card: "Tarjeta",
            cards: "Tarjetas",
            all_cards: "Todas las tarjetas",
            tag: "Tag",
            tags: "Tags",
            file: "Archivo",
            all_files: "Todos los archivos",
            folder: "Carpeta",
            cancel: "Cancelar",
            change: "Cambiar",
            continue: "Continuar",
            delete: "Borrar",
            delete_confirm: "¿Estás seguro de eliminar este artículo?",
            edit: "Editar",
            loading: "Cargando...",
            remove: "Eliminar",
            rename: "Rebautizar",
            reset: "Reiniciar",
            save: "Guardar",
            submit: "Entregar",
            update: "Actualizar",
            upgrade: "Mejora",
            upgrade_now: "Actualizar ahora",
            uploading: "Subiendo...",
            created_at: "Creado",
            modified_at: "Modificado",
            default: "Por defecto",
            more: "Más",
            ok: "OK",
            success: "Éxito",
            untitled: "Sin título",
            done: "Terminado",
            ignore: "Ignorar",
            load_more: "Carga más",
            link_add_placeholder: "Introduce o pega un enlace",
            image_caption_placeholder:
                "Título de entrada para la imagen (opcional)",
            about: "Sobre",
            close: "Cerca",
            copy: "Copiar",
            cut: "Cortar",
            help: "Ayuda",
            hide: "Esconder",
            hide_others: "Esconder Otros",
            homepage: "Página Principal",
            minimize: "Minimizar",
            open_main_window: "Ventana Principal",
            paste: "Pegar",
            paste_as_text: "Pegar con Texto Sin Formato",
            preferences: "Preferencia",
            quit: "Abandonar",
            redo: "Rehacer",
            reload: "Recargar",
            reset_zoom: "Restablecer Acercamiento",
            select_all: "Seleccionar Todo",
            toggle_dark_mode: "Modo Oscuro",
            toggle_full_screen: "Pantalla completa",
            undo: "Deshacer",
            unhide: "Mostrar",
            view: "Vista",
            window: "Ventana",
            zoom: "Zoom",
            zoom_in: "Acercarse",
            zoom_out: "Disminuir el Zoom",
            walk_through_home_title:
                '"Similares a un cerebro"\nNotas de gestión del conocimiento',
            walk_through_home_sub_title:
                "Aumente el conocimiento humano, mejore la eficiencia de la creación de conocimiento",
            walk_through_next: "Próximo",
            walk_through_prev: "Anterior",
            walk_through_done: "Terminado",
            walk_through_slide_one_title:
                "Almacene sus pensamientos en la biblioteca de tarjetas",
            walk_through_slide_two_title:
                "Esquema de proyecto similar a un mapa mental",
            walk_through_slide_three_title: "Elemento de bloque arrastrable",
            walk_through_slide_four_title:
                "Primero sin conexión, copia de seguridad completa de la biblioteca",
            walk_through_slide_five_title:
                "Una variedad de métodos de exportación de documentos",
            new_project: "Nuevo proyecto",
            change_icon: "Cambiar el ícono",
            new_document: "Articulo nuevo",
            new_article: "Articulo nuevo",
            duplicate: "Duplicado",
            merge_selected_docs: "Combinar artículos",
            merge_selected_docs_as_new: "Fusionar como nuevo artículo",
            merge_docs_fail: "Fusionar artículos falló",
            delete_n_items: "Eliminar {0} elementos",
            continue_read: "Lectura de secuencias",
            editor_input_placeholder: "Escribe algo o ingresa '/'",
            tooltip_extension_info: "Información de extensión",
            tooltip_standalone_window: "Editar en ventana independiente",
            tooltip_article_comparison: "Comparación de dos artículos",
            split_vertical: "Vertical",
            split_horizontal: "Horizontal",
            tooltip_split_article: "Artículo dividido",
            words: "palabras",
            characters: "caracteres",
            words_count: "Palabras",
            words_count_characters: "Caracteres",
            words_count_characters_without_spaces: "Carácter sin espacio",
            words_count_asian: "Caracteres asiáticos",
            words_count_asian_non: "Palabras no asiáticas",
            words_count_punctuations: "Puntuaciones",
            words_count_paragraphs: "Párrafos",
            cite: "Citar",
            cited: "Citado ",
            cite_target_not_found: "Citar no encontrado",
            cancel_cited: "Cancelar citado",
            change_display_name: "Cambiar nombre para mostrar",
            full_cite: "Cita completa",
            title_cite: "Título citar",
            display_name: "Nombre para mostrar",
            turn_to_card: "Convertir a Tarjeta",
            link_to: "Enlace a",
            cite_filter_none: "No hay registros coincidentes",
            create_or_search_cite: "Crear o buscar una cotización",
            press_enter_add_cite: "Presiona “Enter” para",
            add_one: "Agrega un ",
            create_one: "Crear un ",
            create_or_search_footnote: "Crear o buscar una nota al pie",
            add_a_comment: "Añadir un comentario",
            comment: "Comentario",
            footnote: "Nota al pie",
            create_table_from: "Crear mesa",
            create_tags: "Crear tags",
            file_nonexistent: "El archivo no existe",
            file_open: "Abierto",
            file_open_by_other: "Abrir en otras aplicaciones",
            file_path: "Camino local",
            file_size: "Tamaño",
            font_family: "Fuente",
            font_size: "Tamaño de fuente",
            font_color: "Color de fuente",
            highlight_color: "Color de resaltado",
            copy_link: "Copiar link",
            align: "Alinear",
            indent: "Sangrar imprenta",
            d_indent: "Quitar sangría",
            line_height: "Espaciado entre líneas",
            width: "Ancho",
            layout: "Disposición",
            clear_style: "Borrar Estilo",
            left: "Izquierdo",
            right: "Derecho",
            center: "Centro",
            justify: "Justificar",
            turn_to: "Empezar a",
            turn_to_block_code: "Turn To Code",
            line_space_normal: "Normal",
            line_space_double: "Doble",
            unsorted: "Sin clasificar",
            sort: "Clasificar",
            sort_mode_modified: "Tiempo de modificación",
            sort_mode_created: "Tiempo de creación",
            sort_mode_char_code_inc: "A-Z",
            sort_mode_char_code_sub: "Z-A",
            tag_mode_filter: "Filtrar",
            tag_mode_filter_sub: "Todas las subetiquetas",
            trashcan: "Bote de basura",
            trashcan_empty: "Vaciar",
            trashcan_put_back: "Volver",
            trashcan_delete_confirm:
                "¿Estás seguro de eliminar permanentemente este artículo?",
            trashcan_empty_confirm:
                "¿Estás seguro de que quieres vaciar la papelera?",
            trashcan_err_item_not_exist: "El artículo no existe",
            trashcan_err_path_not_exist: "La ruta no existe",
            trashcan_err_project_not_exist: "Pproyecto no existe",
            export: "Exportar",
            export_article: "Exportación de artículos",
            export_image: "Exportar como imagen",
            export_image_loading: "Exportación de imagen",
            export_image_size: "Tamaño de la imagen",
            export_notes: "Notas",
            export_pdf: "Exportar como PDF",
            export_pdf_basic: "Básico",
            export_pdf_advance: "Avanzado",
            export_pdf_page_comment: "Comentarios",
            export_pdf_page_footnote: "Exportar notas al pie",
            export_pdf_page_footnote_pos: "Posición de la nota al pie",
            export_pdf_page_footnote_pos_article: "Fin del documento",
            export_pdf_page_footnote_pos_page: "Pie de página",
            export_pdf_page_show_page_number: "Mostrar número de página",
            export_pdf_page_loading: "Exportación de PDF",
            export_pdf_page_number: "Número de página",
            export_pdf_page_size: "Tamaño de página",
            export_pdf_page_break: "Salto de página",
            export_project: "Exportación de proyectos",
            export_type_image: "Imagen",
            export_with_type: "Exportar {}",
            page_n: "Página N",
            page_styles: "Página",
            page_styles_align_left: "Izquierdo",
            page_styles_align_center: "Centro",
            page_styles_align_right: "Derecho",
            page_styles_align_justify: "Justificar",
            page_styles_footer: "Pie de página",
            page_styles_footer_page_number: "Número de página",
            page_styles_footer_page_number_pos: "Posición",
            page_styles_header: "Encabezamiento",
            page_styles_header_and_footer: "Encabezado y pié de página",
            page_styles_header_text_placeholder:
                "Texto del encabezado de entrada",
            page_styles_page_margin: "Margen de página",
            page_styles_page_margin_top: "Superior",
            page_styles_page_margin_bottom: "Abajo",
            page_styles_page_margin_left: "Izquierdo",
            page_styles_page_margin_right: "Derecho",
            table_of_contents: "Tabla de contenido",
            cover: "Portada y tabla de contenido",
            hierarchy_title: "Título de jerarquía",
            slogan: 'Notas de gestión del conocimiento "Similares a un Cerebro"',
            remove_lattics_logo: "Quitar el logotipo de Lattics",
            import: "Importar",
            import_document: "Importar documento",
            attach_local_pdf: "Adjuntar PDF local",
            metadata: "Metadatos",
            metadata_add_author: "Agregar autor",
            metadata_add_id: "Agregar ID",
            metadata_item_type: "Tipo de artículo",
            metadata_author: "Autor",
            metadata_editor: "Editor",
            metadata_contributor: "Contribuyente",
            metadata_translator: "Traductor",
            metadata_reviewed_author: "Autor revisado",
            metadata_title: "Título",
            metadata_abstract: "Resumen",
            metadata_journal: "Revista",
            metadata_publication: "Publicación",
            metadata_time: "Tiempo",
            metadata_issue: "Issue",
            metadata_volume: "Volumen",
            metadata_page: "Página",
            metadata_publisher: "Editorial",
            metadata_series: "Serie",
            metadata_doi: "DOI",
            metadata_pmid: "PMID",
            metadata_arxiv: "Arxiv",
            metadata_issn: "ISSN",
            metadata_isbn: "ISBN",
            metadata_url: "URL",
            metadata_keywords: "Palabras clave",
            metadata_add_keywords: "Agregar palabras clave",
            bibliography: "Bibliografía",
            addition_pin_to_right: "Anclar al muelle",
            addition_un_pin_to_right: "liberación del muelle",
            addition_add_tag: "Agregar tags",
            addition_add_project: "Agregar proyecto",
            tag_deleted: "La tag ha sido eliminada",
            addition_add_memo: "Memo aquí",
            addition_forward_link: "Enlace directo",
            addition_backward_link: "Enlace hacia atrás",
            unlink_mention: "Desvinculado",
            link: "Enlace",
            link_all: "Vincular todo",
            addition_table_of_contents: "Tabla de contenido",
            item_created: "Creado",
            item_last_modified: "Última modificación",
            last_used: "Último utilizado",
            source_of_card: "Fuente",
            search: "Buscar",
            search_placeholder: "Buscar en Lattics",
            searching: "Buscando...",
            search_show_all: "Mostrar todo",
            no_matching_records: "No hay registros coincidentes",
            search_find: "Encontrar",
            next: "Próximo",
            previous: "Anterior",
            search_replace: "Reemplazar",
            search_replace_all: "Reemplaza todo",
            search_total: "{0} resultados en {1} artículos",
            math_type: "Ecuación matemática",
            math_type_calculus: "Cálculo",
            math_type_character: "Alfabeto",
            math_type_elementary: "Básico",
            math_type_function_and_set: "Función y conjunto",
            math_type_geometry: "Geometría",
            math_type_text_mode: "Sintaxis de LaTeX",
            math_type_please_use_text_mode:
                "Puede haber una sintaxis no admitida para la entrada actual y se recomienda utilizar el modo de texto sin formato",
            code_block: "Código",
            separator: "Separador",
            code_block_language: "Idioma del programa",
            table: "Mesa",
            add_column_before: "Agregar columna antes",
            add_column_after: "Añadir columna después",
            add_row_before: "Agregar fila antes",
            add_row_after: "Agregar fila después",
            delete_column: "Eliminar columna",
            delete_row: "Borrar fila",
            goal: "Meta",
            goal_deadline: "Fecha límite",
            goal_choose_date: "Elija fecha",
            goal_today: "Hoy",
            goal_left: "Restante",
            goal_delayed: "Demorado",
            goal_words_target: "Palabras",
            goal_character_target: "Caracteres",
            goal_not_set: "No establecido",
            goal_written: "Escrito",
            goal_rate: "Finalizado",
            goal_achieve: "Lograr",
            goal_achieved: "Logrado",
            focus_mode: "Modo de enfoque",
            focus_mode_typewriter_mode: "Modo máquina de escribir",
            focus_mode_typewriter_mode_line: "Centrarse en línea",
            focus_mode_typewriter_mode_sentence: "Frase",
            focus_mode_typewriter_mode_paragraph: "Párrafo",
            focus_mode_typewriter_mode_none: "Ninguno",
            focus_mode_keyboard_sound: "Sonido del teclado",
            project_opening: "Proyecto abierto...",
            project_package: "Paquete de proyecto",
            project_package_info:
                "Para empaquetar todos los artículos, tarjetas, archivos, esquemas, mapas mentales, citas, notas al pie, memorandos, etiquetas y otra información completa del proyecto como un archivo independiente",
            project_package_save: "Proyecto de Empaque...",
            project_editors: "Editores",
            card_library: "Tarjetas",
            add_card: "Agregar tarjeta",
            card_deleted: "El {} de la cita ha sido eliminado",
            graph: "Grafico",
            graph_filter: "Filtro de contenido",
            graph_sort_out: "Diseño automático",
            graph_sort_out_confirm:
                "¿Estás seguro de que quieres diseño automático?",
            graph_view_mind_map: "Mapa mental",
            graph_view_plot_view: "Trama de la historia",
            graph_view_aerial_view: "Vista aérea",
            graph_view_preview_node: "Preestreno",
            graph_view_title_node: "Título",
            graph_view_memo_node: "Memo",
            tag_hint: "Consejos de tag",
            cite_graph: "Gráfico de citas",
            graph_node_copy_cite_link: "Copiar enlace de cita",
            graph_node_remove_from_project: "Eliminar del proyecto",
            graph_node_remove_from_tag: "Quitar de la tag",
            graph_relation_link: "Enlace de relación",
            graph_drag_me: "Arrástrame",
            graph_upgrade_tip: "Superó los 15 nodos libres",
            flashcard: "Tarjeta de reconocimiento",
            flashcard_filter: "Filtro",
            flashcard_filter_article: "Artículos",
            flashcard_filter_card: "Tarjetas",
            flashcard_filter_outline: "Esquema del proyecto",
            flashcard_filter_extension: "Información de extensión",
            flashcard_sort_mode_direct: "Orden del esquema",
            flashcard_sort_mode_inverse: "Invertir el orden del contorno",
            flashcard_sort_mode_random: "Aleatorio",
            flashcard_show_answer: "Mostrar la respuesta",
            flashcard_show_question: "Mostrar problemas",
            flashcard_next: "Siguiente",
            flashcard_back: "Volver",
            flashcard_complete: "Finalizar",
            flashcard_completed: "Terminado",
            flashcard_empty_tip:
                "La tarjeta flash proviene de un artículo o tarjeta",
            flashcard_got_it: "Dominado",
            flashcard_enhance: "Mejorar",
            flashcard_ebbinghaus: "Ebbinghaus",
            flashcard_statistics: "Estadísticas",
            flashcard_statistics_total_have: "Tú ya:",
            flashcard_statistics_learned: "Aprendió",
            flashcard_statistics_got_it: "Dominado",
            flashcard_statistics_recently_learned: "Aprendido recientemente:",
            flashcard_question_type_default: "Q & A",
            flashcard_question_type_fill_in_the_blanks:
                "Rellenar los espacios en blanco",
            flashcard_question_type_choice: "Preguntas de respuestas múltiples",
            template: "Plantilla",
            template_choose_template: "Elegir la plantilla",
            template_current_article: "Artículo actual",
            template_current_project: "Proyecto actual",
            template_modify_styles: "Modificar estilos",
            template_setting_scope: "Establecer alcance",
            template_new: "Guardar como nueva plantilla",
            template_reset: "Restaurar estilo",
            template_set_as_default: "Establecer por defecto",
            custom_style: "Plantilla de estilo",
            element_styles_color: "Color",
            element_styles_color_default: "Por defecto",
            element_styles_color_black: "Negro",
            element_styles_color_grey: "Gris",
            element_styles_color_light_grey: "Gris claro",
            element_styles_color_deep_blue: "Azul profundo",
            element_styles_color_blue: "Azul",
            element_styles_color_green: "Verde",
            element_styles_color_mars_green: "Verde marte",
            element_styles_color_dark_green: "Verde oscuro",
            element_styles_color_orange: "Naranja",
            element_styles_color_brown: "Marrón",
            element_styles_color_purple: "Púrpura",
            element_styles_color_pink: "Rosa",
            element_styles_color_red: "Rojo",
            element_styles_color_yellow: "Amarillo",
            element_styles_build_in_magazine: "Revista",
            element_styles_build_in_paper_thesis: "Papel y Tesis",
            element_styles_build_in_report: "Informe",
            element_styles_build_in_diary_notes: "Diario y Notas",
            element_styles_thickness: "Espesor",
            element_styles_number_style: "Estilo numérico",
            element_styles_bullet_style: "Estilo con viñetas",
            element_styles_box_style: "Estilo de caja",
            element_styles_check_style: "Estilo de verificación",
            element_styles_check_style_delete_line: "línea a través",
            element_styles_check_style_high: "Destacar",
            element_styles_check_style_high_color: "Color de resaltado",
            element_styles_bullet_disc: "Desct",
            element_styles_bullet_circle: "Círculo",
            element_styles_bullet_square: "Cuadrado",
            element_styles_todo_style: "Cuadrado",
            element_styles_line_style: "Estilo de línea",
            element_styles_line_style_solid: "Sólido",
            element_styles_line_style_dashed: "Discontinua",
            element_styles_todo_style_circle: "Círculo",
            element_styles_quote_style_top: "Línea de arriba",
            element_styles_quote_style_single: "Línea de Izquierda",
            element_styles_quote_style_quote: "Cotización",
            element_styles_first_indent: "Incidente de primera linea",
            element_styles_paragraph: "Texto",
            element_styles_head_1: "Título 1",
            element_styles_head_2: "Título 2",
            element_styles_head_3: "Título 3",
            element_styles_head_4: "Título 4",
            element_styles_head_5: "Título 5",
            element_styles_head_6: "Título 6",
            element_styles_indent: "Sangrar",
            element_styles_indent_none: "Ninguno",
            element_styles_border: "Borde",
            element_styles_offset: "Offset",
            element_styles_quote_style: "Estilo de cotización",
            element_styles_list_style: "Estilo de lista",
            element_styles_bulleted_list: "Lista con viñetas",
            element_styles_numbered_list: "Lista numérica",
            element_styles_todo_list: "Lista de quehaceres",
            element_styles_quote: "Cita",
            element_styles_text: "Estilo de texto",
            element_styles_spacing: "Espaciado",
            element_styles_spacing_line: "Entre líneas",
            element_styles_spacing_after: "Después del párrafo",
            element_styles_spacing_before: "Antes del párrafo",
            statistics: "Estadísticas",
            statistics_recently: "Recientemente",
            statistics_total: "Total",
            statistics_recently_goal_day: "d",
            statistics_recently_date_formatter: "MMM YYYY",
            statistics_recently_date_sat: "Sáb.",
            statistics_recently_last_month: "Últimos 30 días:",
            statistics_recently_words: "Palabras añadidas",
            statistics_recently_card: "Tarjetas nuevas",
            statistics_recently_modified_contents: "Contenidos modificados:",
            statistics_total_since: "Desde ",
            statistics_total_install_time_label: "Fecha de Lattics instalado",
            statistics_total_have_written: "Has escrito:",
            statistics_total_all:
                "Total: (incluyendo restauración o sincronización)",
            statistics_total_words: "Palabras",
            tutorial: "Tutorial",
            tutorial_url:
                "https://helps.auramarker.com/en/lattics/backup_and_sync",
            pretty_time_1_day_ago: "1 día antes",
            pretty_time_1_hour_ago: "1 hora antes",
            pretty_time_1_minute_ago: "1 minuto antes",
            pretty_time_just_now: "En este momento",
            pretty_time_n_days_ago: "{0} días antes",
            pretty_time_n_hours_ago: "{0} horas antes",
            pretty_time_n_minute_ago: "{0} minutos antes",
            setting: "Configuración",
            settings: "Configuración",
            account_settings: "Configuración de Cuenta",
            appearance: "Apariencia",
            pref_lang: "Idiomas",
            editor_preference: "Preferencia del Editor",
            backup: "Copia seguridad y Sincronizar",
            pref_update: "Actualizar",
            feedback: "Feedback",
            about_us: "Sobre nosotros",
            hi_lattics_pro: "Hola, Lattics Pro",
            not_a_member: "¿No tienes cuenta?",
            already_a_member: "¿Ya tienes una membresía?",
            sign_out: "Finalizar la sesión",
            sign_up: "Iniciar la sesión",
            delete_account: "Borrar cuenta",
            account_delete_confirm: "¿Tienes que borrar la cuenta?",
            account_delete_confirm_message:
                "Tenga en cuenta que esta operación eliminará por completo su cuenta y los datos no se podrán recuperar, por lo tanto, haga una copia de seguridad o exporte sus datos con anticipación.",
            delete_account_need_re_signin:
                "Vuelva a iniciar sesión para eliminar su cuenta.",
            membership_cancel_renew: "Cancelar renovación automática",
            membership_expiration_info: "La membresía caducará el {0}",
            membership_will_renew: "La membresía se renovará el {0}",
            theme_light: "Light",
            theme_dark: "Dark",
            theme_system: "System",
            theme_klein_blue: "Klein Azul",
            theme_pantone_red: "Pantone Rojo",
            theme_tiffany_green: "Tiffany Verde",
            theme_hermes_brown: "Hermes Marrón",
            theme_silver: "Plata",
            theme_midnight_blue: "azul medianoche",
            theme_dark_rose: "Rosa oscura",
            theme_marrs_green: "Marrs Verde",
            theme_ink: "Tinta",
            pref_editor_font: "Fuente predeterminada",
            pref_editor_latin_font: "Fuente latina",
            pref_editor_asian_font: "Fuente asiática",
            pref_editor_font_size: "Tamaño de fuente",
            pref_editor_spellcheck: "Corrección de ortografía",
            pref_editor_markdown: "Habilitar la sintaxis de Markdown",
            pref_editor_context_menu: "Habilitar menú emergente",
            backup_before: "Establezca la ruta de respaldo para Lattics",
            backup_choose_folder: "Elegir la carpeta",
            pref_backup_path: "Ruta de respaldo:",
            config_unset: "No establecido",
            change_backup_dir: "Cambiar ruta de respaldo",
            open_dir: "Directorio abierto",
            backup_now: "Respaldo ahora",
            backup_restore: "Restaurar copia de seguridad",
            backup_enable_auto: "Habilitar respaldo automática",
            backup_history: "Historial de copias de seguridad",
            size: "Tamaño",
            backup_restore_from: "Restaura desde esta copia de seguridad",
            interval: "Intervalo",
            every_day: "Cada día",
            every_week: "Cada semana",
            pref_update_lasted: "Tu Lattics está al día",
            pref_update_version: "Version de aplicacion",
            pref_update_check: "Comprueba la actualización",
            pref_update_checking: "Comprobación",
            new_update_available: "Nueva actualización disponible",
            version_number: "Versión: {0}",
            update_now: "Actualizar ahora",
            auto_update_relaunch: "Relanzar",
            feedback_placeholder: "Por favor déjenos sus sugerencias o ideas",
            update_logs: "Enviar registros de tiempo de ejecución",
            update_logs_desc: "Solo se utiliza para solucionar problemas",
            pref_terms_of_service: "Términos de Servicio",
            terms_of_service_link:
                "https://lattics.zineapi.com/en-US/terms_of_service",
            pref_privacy_policy: "Política de Privacidad",
            pref_about_us_other_prod: "Nuestras otras aplicaciones",
            pref_about_us_more: "Aprende más",
            pref_about_us_zine:
                "Una hermosa aplicación móvil de notas y escritura",
            pref_about_us_varlens: "DSLR en el teléfono",
            sign_in: "Iniciar sesión",
            sign_in_migration_check_desc:
                "Migre los contenidos creados sin iniciar sesión en la cuenta de inicio de sesión",
            data_merging: "Fusionando datos...",
            register_inform:
                "Al iniciar sesión significa que está de acuerdo con nuestro {0} y {1}.",
            privacy_policy: "Política de privacidad",
            privacy_link: "https://lattics.zineapi.com/en-US/privacy-policy",
            signin_err_email_invalid:
                "Por favor, introduce una dirección de correo electrónico válida",
            signin_err_email_not_exists:
                "Este correo electrónico no está registrado.",
            signin_err_email_not_verified: "Correo no identificado.",
            signin_err_invalid_password: "Contraseña invalida.",
            signin_err_password_length: "6 caracteres por lo menos",
            forget_password: "¿Olvidaste tu contraseña?",
            enter_your_account_email: "Por favor ingrese el Email de su cuenta",
            enter_the_code: "Ingrese el código de verificación",
            enter_the_code_sent_to: "El código de verificación se envía a: {0}",
            code_empty: "El codigo esta vacio!",
            invalid_verify_code: "Código de verificación no válido",
            reset_password: "Restablecer la contraseña",
            enter_new_password: "Ingrese nueva clave",
            enter_a_new_password: "Introduzca una nueva contraseña",
            repeat_password: "Repita la contraseña",
            tow_passwords_not_match: "Las dos contraseñas no coinciden",
            now_you_can_use_the_new_password:
                "Ahora puedes iniciar sesión con la nueva contraseña",
            welcome_aboard: "Bienvenido a bordo",
            welcome_back: "Bienvenido de nuevo",
            go_to_sign_in: "Ir a Iniciar sesión",
            go_back: "Volver",
            signup_email_exists: "El Email ya existe.",
            err_unknown: "Error desconocido",
            err_username_characters:
                "El nombre de usuario solo puede contener letras, números, guiones bajos y puntos",
            err_username_empty: "El nombre de usuario no puede estar vacío",
            err_username_exist: "Nombre de usuario ya existe",
            err_username_length_range:
                "Ingrese un nombre de usuario entre {0} y {1} caracteres",
            err_email_exist: "El Email ya existe",
            err_email_invalid: "Dirección de Email es inválida",
            change_plan: "Cambio de plan",
            purchase: "Compra",
            purchase_pro_desc:
                "Bienvenido a comprar la membresía de Lattics Pro, puede disfrutar de todas sus funciones y apoyarnos para mejorarla constantemente",
            feature_documents_in_project: "Documentos en Proyecto",
            feature_knowledge_graph_nodes: "Nodos del gráfico de conocimiento",
            feature_export_custom_layout: "Plantilla de estilo personalizado",
            feature_text_md_doc_export: "Exportar TXT/MD",
            feature_export_image_and_pdf: "Exportar PDF/DOCX/Imagen",
            feature_goal_and_statistic: "Gol y Estadística",
            feature_theme: "Temas personalizados",
            feature_flashcard:
                "Estadística de tarjetas didácticas y Ebbinghaus",
            unlimited: "Ilimitado",
            purchase_free_trail: "Prueba de {} días",
            purchase_monthly: "Plan Mensual",
            purchase_mas_monthly: "Plan Mensual",
            purchase_yearly: "Plan Anual",
            purchase_mas_yearly: "Plan Anual",
            years: "Años",
            purchase_save: "Reducir",
            yearly_price_avg: "12 meses a {0}/mes",
            purchase_restore: "Restaurar compra",
            purchase_inform:
                "Renovación automática, cancelar en cualquier momento",
            purchase_unsubscription_desc:
                'Puede ir a la configuración de la cuenta para administrar la suscripción y cancelar la suscripción después de la compra. La ruta específica es: "Configuración" -> ID de Apple -> Medios y compras -> Suscripción',
            choose_payment_method: "Escoja su método de pago",
            total: "Total",
            congratulations: "Felicidades!",
            you_are_now_a_member: "Eres {} ahora",
            payment_succeed: "¿Pago exitoso?",
            payment_succeed_desc:
                'Si ha finalizado el pago, haga clic en el botón "Sí" para actualizar.',
            not_yet: "Aún no",
            yes: "Si",
            payment_state_not_change:
                "El estado del pedido no ha cambiado, confirma si el pago se ha realizado correctamente o vuelve a intentarlo más tarde.",
            purchase_user_reviews_briefly_Drlcm: "Es único",
            purchase_user_reviews_content_Drlcm:
                "Realmente disfruté mucho usando esto para organizar un documento largo. Es una idea maravillosa y diferente a cualquier otra cosa que haya visto.",
            purchase_user_reviews_briefly_Drjimmoore: "Buen potencial !",
            purchase_user_reviews_content_Drjimmoore:
                "Lo que me gusta mucho es el flujo de trabajo. Desde escribir en tarjetas en el lado derecho, hasta poner tarjetas en una lista de artículos en el lado izquierdo.",
            purchase_user_reviews_briefly_UltimateMac:
                "Esta aplicación hace que escribir sea muy divertido.",
            purchase_user_reviews_content_UltimateMac:
                "Una aplicación que va más allá de las herramientas de escritura tradicionales, con un diseño funcional poco convencional, un excelente diseño y maquetación de la interfaz y una estética avanzada. Y tener mi biblioteca favorita de tarjetas de arrastrar y soltar hace que escribir sea muy divertido.",
            purchase_user_reviews_briefly_Visesen: "Se ve muy bien",
            purchase_user_reviews_content_Visesen:
                "El desarrollo se ve muy bien. Además, los desarrolladores responden rápidamente a los comentarios.",
        },
        pt: {
            _key: "pt-BR",
            _name: "Português",
            colon: ": ",
            project: "Projeto",
            projects: "Projetos",
            article: "Artigo",
            articles: "Artigos",
            card: "Cartão",
            cards: "Cartões",
            all_cards: "Todos os Cartões",
            tag: "Tag",
            tags: "Tags",
            file: "Documento",
            all_files: "Todos os Documentos",
            folder: "Pasta",
            cancel: "Cancelar",
            change: "Mudar",
            continue: "Continuar",
            delete: "Excluir",
            delete_confirm: "Tem certeza de que deseja excluir este item??",
            edit: "Editar",
            loading: "Carregando...",
            remove: "Remover",
            rename: "Renomear",
            reset: "Restabelecer",
            save: "Salvar",
            submit: "Enviar",
            update: "Atualizar",
            upgrade: "Atualizar",
            upgrade_now: "Atualize agora",
            uploading: "Fazendo upload",
            created_at: "Criado",
            modified_at: "Modificado",
            default: "Padrão",
            more: "Mais",
            ok: "OK",
            success: "Sucesso",
            untitled: "Sem título",
            done: "Feito",
            ignore: "Ignorar",
            load_more: "Carregar mais",
            link_add_placeholder: "Insira ou cole um link",
            image_caption_placeholder:
                "Insira uma legenda para a imagem (opcional)",
            about: "Sobre",
            close: "Fechar",
            copy: "Copiar",
            cut: "Cortar",
            help: "Ajuda",
            hide: "Esconder",
            hide_others: "Ocultar Outros",
            homepage: "Página Inicial",
            minimize: "Minimizar",
            open_main_window: "Janela Principal",
            paste: "Colar",
            paste_as_text: "Colar Com Texto Simples",
            preferences: "Preferência",
            quit: "Desistir",
            redo: "Refazer",
            reload: "Recarregar",
            reset_zoom: "Redefinir Zoom",
            select_all: "Selecionar Tudo",
            toggle_dark_mode: "Modo Escuro",
            toggle_full_screen: "Tela Cheia",
            undo: "Desfazer",
            unhide: "Mostrar",
            view: "Vista",
            window: "Janela",
            zoom: "Zoom",
            zoom_in: "Mais Zoom",
            zoom_out: "Reduzir o Zoom",
            walk_through_home_title:
                '"Semelhante ao Cérebro"\nNotas de Gestão do Conhecimento',
            walk_through_home_sub_title:
                "Aumente o Conhecimento Humano, Melhore a Eficiência da Criação do Conhecimento",
            walk_through_next: "Próximo",
            walk_through_prev: "Anterior",
            walk_through_done: " OK ",
            walk_through_slide_one_title:
                "Armazene seus Pensamentos na Biblioteca de Cartões",
            walk_through_slide_two_title:
                'Esboço do Projeto Semelhante a um Mapa Mental"',
            walk_through_slide_three_title: "Elemento de Bloco Arrastável",
            walk_through_slide_four_title:
                "Primeiro Off-line e Backup Completo da Biblioteca",
            walk_through_slide_five_title:
                "Uma Variedade de Métodos de Exportação de Documentos",
            new_project: "Novo projeto",
            change_icon: "Alterar ícone",
            new_document: "Novo artigo",
            new_article: "Novo artigo",
            duplicate: "Duplicado",
            merge_selected_docs: "Mesclar artigos",
            merge_selected_docs_as_new: "Mesclar como novo artigo",
            merge_docs_fail: "Falha ao mesclar artigos",
            delete_n_items: "Excluir {0} itens",
            continue_read: "Leitura de Sequência",
            editor_input_placeholder: "Escreva algo ou insira '/'",
            tooltip_extension_info: "Info da Extensão",
            tooltip_standalone_window: "Editar na janela autônoma",
            tooltip_article_comparison: "Comparação de Dois Artigos",
            split_vertical: "Vertical",
            split_horizontal: "Horizontal",
            tooltip_split_article: "Para Dividir o Artigo",
            words: "palavras",
            characters: "caracteres",
            words_count: "Palavras",
            words_count_characters: "Caracteres",
            words_count_characters_without_spaces: "Sem Espaço",
            words_count_asian: "Asiáticos",
            words_count_asian_non: "Não Asiáticas",
            words_count_punctuations: "Pontuações",
            words_count_paragraphs: "Parágrafos",
            cite: "Citar",
            cited: "Citado ",
            cite_target_not_found: "Citação não encontrada",
            cancel_cited: "Cancelar Citação",
            change_display_name: "Alterar Nome de Exibição",
            full_cite: "Citação Completa",
            title_cite: "Citação Título",
            display_name: "Nome de Exibição",
            turn_to_card: "Transformar em Cartão",
            link_to: "Link para",
            cite_filter_none: "Nenhum registro correspondente",
            create_or_search_cite: "Criar ou procurar uma citação",
            press_enter_add_cite: 'Pressione "Enter" para',
            add_one: " adicionar um ",
            create_one: " criar um ",
            create_or_search_footnote: "Criar ou procurar uma nota rodapé",
            add_a_comment: "Adicionar um comentário",
            comment: "Comentário",
            footnote: "Nota rodapé",
            create_table_from: "Criar a tabela",
            create_tags: "Criar tags",
            file_nonexistent: "O arquivo não existe",
            file_open: "Abrir",
            file_open_by_other: "Abrir em outras aplicações",
            file_path: "Caminho local",
            file_size: "Tamanho",
            font_family: "Fonte",
            font_size: "Tamanho da fonte",
            font_color: "Cor da fonte",
            highlight_color: "Cor do realce",
            copy_link: "Copiar link",
            align: "Alinhar",
            indent: "Recuo",
            d_indent: "Desindentar",
            line_height: "Espaçamento entre linhas",
            width: "Largura",
            layout: "Layout",
            clear_style: "Limpar estilo",
            left: "Esquerda",
            right: "Direita",
            center: "Centralizar",
            justify: "Justificar",
            turn_to: "Transformar em",
            turn_to_block_code: "Bloco de código",
            line_space_normal: "Normal",
            line_space_double: "Duplo",
            tag_deleted: "A tag foi excluída",
            last_used: "Último usado",
            card_deleted: "O {} de citação foi excluído",
            unsorted: "Não triados",
            sort: "Classificar",
            sort_mode_modified: "Tempo de modificação",
            sort_mode_created: "Tempo de criação",
            sort_mode_char_code_inc: "A-Z",
            sort_mode_char_code_sub: "Z-A",
            tag_mode_filter: "Filtro",
            tag_mode_filter_sub: "Todas as submarcas",
            trashcan: "Cesto de lixo",
            trashcan_empty: "Esvaziar",
            trashcan_put_back: "Colocar de volta",
            trashcan_delete_confirm:
                "Tem certeza de que deseja excluir permanentemente este item?",
            trashcan_empty_confirm:
                "Tem certeza de que deseja esvaziar a lixeira?",
            trashcan_err_item_not_exist: "O artigo não existe",
            trashcan_err_path_not_exist: "Caminho não existe",
            trashcan_err_project_not_exist: "Projeto não existe",
            export: "Exportar",
            export_article: "Exportação de documentos",
            export_image: "Exportar imagem",
            export_image_loading: "Exportando imagem",
            export_image_size: "Tamanho da imagem",
            export_notes: "Notas",
            export_pdf: "Exportar PDF",
            export_pdf_basic: "Básico",
            export_pdf_advance: "Avançado",
            export_pdf_page_comment: "Comentários",
            export_pdf_page_footnote: "Exportar notas rodapé",
            export_pdf_page_footnote_pos: "Posição da nota rodapé",
            export_pdf_page_footnote_pos_article: "Fim do document",
            export_pdf_page_footnote_pos_page: "Fim da página",
            export_pdf_page_show_page_number: "Mostrar número da página",
            export_pdf_page_loading: "Exportando PDF",
            export_pdf_page_number: "Número de página",
            export_pdf_page_size: "Tamanho da página",
            export_pdf_page_break: "Quebra de página",
            export_project: "Exportação de projeto",
            export_type_image: "Imagem",
            export_with_type: "Exportar {}",
            page_n: "Página N",
            page_styles: "Página",
            page_styles_align_left: "Esquerdo",
            page_styles_align_center: "Centro",
            page_styles_align_right: "Certo",
            page_styles_align_justify: "Justificar",
            page_styles_footer: "Rodapé",
            page_styles_footer_page_number: "Número de página",
            page_styles_footer_page_number_pos: "Posição",
            page_styles_header: "Cabeçalho",
            page_styles_header_and_footer: "Cabeçalho e Rodapé",
            page_styles_header_text_placeholder: "Insira texto do cabeçalho",
            page_styles_page_margin: "Margem da página",
            page_styles_page_margin_top: "Topo",
            page_styles_page_margin_bottom: "Fundo",
            page_styles_page_margin_left: "Esquerdo",
            page_styles_page_margin_right: "Certo",
            table_of_contents: "Índice",
            cover: "Capa e Índice",
            hierarchy_title: "Título da hierarquia",
            slogan: "Notas sobre a gestão do conhecimento “Semelhante ao Cérebro”",
            remove_lattics_logo: "Remover logotipo Lattics",
            import: "Importar",
            import_document: "Importar documento",
            attach_local_pdf: "Anexar PDF local",
            metadata: "Metadados",
            metadata_add_author: "Adicionar autor",
            metadata_add_id: "Adicionar ID",
            metadata_item_type: "Tipo de item",
            metadata_author: "Autor",
            metadata_editor: "Editor",
            metadata_contributor: "Contribuidor",
            metadata_translator: "Tradutor",
            metadata_reviewed_author: "Autor revisado",
            metadata_title: "Título",
            metadata_abstract: "Resumo",
            metadata_journal: "Jornal",
            metadata_publication: "Publicação",
            metadata_time: "Tempo",
            metadata_issue: "Issue",
            metadata_volume: "Volume",
            metadata_page: "Página",
            metadata_publisher: "Editora",
            metadata_series: "Série",
            metadata_doi: "DOI",
            metadata_pmid: "PMID",
            metadata_arxiv: "Arxiv",
            metadata_issn: "ISSN",
            metadata_isbn: "ISBN",
            metadata_url: "URL",
            metadata_keywords: "Palavras-chave",
            metadata_add_keywords: "Adicionar palavras-chave",
            bibliography: "Bibliografia",
            addition_pin_to_right: "Fixar na Doca",
            addition_un_pin_to_right: "Desencaixar",
            addition_add_tag: "Adicionar tags",
            addition_add_project: "Adicionar projeto",
            addition_add_memo: "Memorando aqui",
            addition_forward_link: "Link de encaminhamento",
            addition_backward_link: "Link para trás",
            unlink_mention: "Não ligado",
            link: "Ligação",
            link_all: "Vincular tudo",
            addition_table_of_contents: "Índice",
            item_created: "Criado",
            item_last_modified: "Última modificação",
            source_of_card: "Fonte",
            search: "Procurar",
            search_placeholder: "Busca em Lattics",
            searching: "Procurando...",
            search_show_all: "Mostre tudo",
            no_matching_records: "Nenhum registro correspondente",
            search_find: "Encontrar",
            next: "Próximo",
            previous: "Anterior",
            search_replace: "Substituir",
            search_replace_all: "Substitua tudo",
            search_total: "{0} resultados em {1} artigos",
            math_type: "Equação Matemática",
            math_type_calculus: "Cálculo",
            math_type_character: "Alfabeto",
            math_type_elementary: "Básico",
            math_type_function_and_set: "Função e Conjunto",
            math_type_geometry: "Geometria",
            math_type_text_mode: "Sintaxe do LaTeX",
            math_type_please_use_text_mode:
                "Pode haver sintaxe não suportada para a entrada atual e é recomendável usar o modo de texto simples.",
            code_block: "Bloco de código",
            separator: "Separador",
            code_block_language: "Linguagem do Programa",
            table: "Tabela",
            add_column_before: "Adicionar coluna antes",
            add_column_after: "Adicionar coluna depois",
            add_row_before: "Adicionar linha antes",
            add_row_after: "Adicionar linha depois",
            delete_column: "Excluir coluna",
            delete_row: "Excluir linha",
            goal: "Meta",
            goal_deadline: "Prazo final",
            goal_choose_date: "Escolha a data",
            goal_today: "Hoje",
            goal_left: "Restantes",
            goal_delayed: "Atrasado",
            goal_words_target: "Palavras",
            goal_character_target: "Caracteres",
            goal_not_set: "Não configurado",
            goal_written: "Escrito",
            goal_rate: "Finalizado",
            goal_achieve: "Alcançar",
            goal_achieved: "Alcançou",
            focus_mode: "Modo de Fóco",
            focus_mode_typewriter_mode: "Modo máquina de escrever",
            focus_mode_typewriter_mode_line: "Foco na linha",
            focus_mode_typewriter_mode_sentence: "Frase",
            focus_mode_typewriter_mode_paragraph: "Parágrafo",
            focus_mode_typewriter_mode_none: "Nenhum",
            focus_mode_keyboard_sound: "Som do teclado",
            project_opening: "Abrindo projeto...",
            project_package: "Pacote de Projeto",
            project_package_info:
                "Para empacotar todos os artigos, cartões, arquivos, esboço, mapa mental, citações, notas de rodapé, memorandos, tags e outras informações completas no projeto como um arquivo independente",
            project_package_save: "Projeto de embalagem...",
            project_editors: "Editores",
            card_library: "Cartões",
            add_card: "Adicionar cartão",
            graph: "Gráfico",
            graph_filter: "Filtro de Conteúdo",
            graph_sort_out: "Alinhamento Auto",
            graph_sort_out_confirm:
                "Tem certeza de que deseja o layout automático?",
            graph_view_mind_map: "Mapa mental",
            graph_view_plot_view: "Trama da história",
            graph_view_aerial_view: "Vista aérea",
            graph_view_preview_node: "Preview",
            graph_view_title_node: "Título",
            graph_view_memo_node: "Memorando",
            tag_hint: "Tags",
            cite_graph: "Gráfico de Cite",
            graph_node_copy_cite_link: "Copiar link de citação",
            graph_node_remove_from_project: "Remover do projeto",
            graph_node_remove_from_tag: "Remover da Tag",
            graph_relation_link: "Link de Relacionamento",
            graph_drag_me: "Arraste-me",
            graph_upgrade_tip: "Excedeu 15 nós livres",
            flashcard: "Flashcard",
            flashcard_filter: "Filtro",
            flashcard_filter_article: "Artigos",
            flashcard_filter_card: "Cartões",
            flashcard_filter_outline: "Esboço do Projecto",
            flashcard_filter_extension: "Info da Extensão",
            flashcard_sort_mode_direct: "Ordem Esboço",
            flashcard_sort_mode_inverse: "Ordem Inversa do Esboço",
            flashcard_sort_mode_random: "Aleatório",
            flashcard_show_answer: "Mostrar a Resposta",
            flashcard_show_question: "Mostrar a Pergunta",
            flashcard_next: "Próximo",
            flashcard_back: "Voltar",
            flashcard_complete: "Terminar",
            flashcard_completed: "Completo",
            flashcard_empty_tip: "Cartões flash vêm de artigos ou cartões",
            flashcard_got_it: "Dominado",
            flashcard_enhance: "Melhorar",
            flashcard_ebbinghaus: "Ebbinghaus",
            flashcard_statistics: "Estatisticas",
            flashcard_statistics_total_have: "Você tem:",
            flashcard_statistics_learned: "Aprendido",
            flashcard_statistics_got_it: "Dominado",
            flashcard_statistics_recently_learned: "Aprendi recentemente:",
            flashcard_question_type_default: "Q & A",
            flashcard_question_type_fill_in_the_blanks:
                "Preencha os espaços em branco",
            flashcard_question_type_choice: "Questões de múltipla escolha",
            template: "Modelo",
            template_choose_template: "Escolha o modelo",
            template_current_article: "Artigo atual",
            template_current_project: "Projeto atua",
            template_modify_styles: "Modificar estilos",
            template_setting_scope: "Escopo de configuraçãoe",
            template_new: "Salvar como novo modelo",
            template_reset: "Restaurar estilo",
            template_set_as_default: "Definir como padrão",
            custom_style: "Modelo de Estilo",
            element_styles_color: "Cor",
            element_styles_color_default: "Revelia",
            element_styles_color_black: "Preto",
            element_styles_color_grey: "Cinza",
            element_styles_color_light_grey: "Cinza claro",
            element_styles_color_deep_blue: "Azul profundo",
            element_styles_color_blue: "Azul",
            element_styles_color_green: "Verde",
            element_styles_color_mars_green: "Marte Verde",
            element_styles_color_dark_green: "Verde escuro",
            element_styles_color_orange: "Laranja",
            element_styles_color_brown: "Marrom",
            element_styles_color_purple: "Roxo",
            element_styles_color_pink: "Rosa",
            element_styles_color_red: "Vermelho",
            element_styles_color_yellow: "Amarelo",
            element_styles_build_in_magazine: "Revista",
            element_styles_build_in_paper_thesis: "Trabalho e Tese",
            element_styles_build_in_report: "Relatório",
            element_styles_build_in_diary_notes: "Diário e Notas",
            element_styles_thickness: "Grossura",
            element_styles_number_style: "Estilo Numérico",
            element_styles_bullet_style: "Estilo com marcadores",
            element_styles_box_style: "Estilo de caixa",
            element_styles_check_style: "Estilo da caixa seleção",
            element_styles_check_style_delete_line: "Linha Através",
            element_styles_check_style_high: "Destaque",
            element_styles_check_style_high_color: "Cor de destaque",
            element_styles_bullet_disc: "Disco",
            element_styles_bullet_circle: "Círculo",
            element_styles_bullet_square: "Quadrado",
            element_styles_todo_style: "Quadrado",
            element_styles_line_style: "Estilo de linha",
            element_styles_line_style_solid: "Sólida",
            element_styles_line_style_dashed: "Tracejada",
            element_styles_todo_style_circle: "Círculo",
            element_styles_quote_style_top: "Linha superior",
            element_styles_quote_style_single: "Linha esquerda",
            element_styles_quote_style_quote: "Cotação",
            element_styles_first_indent: "Recuo da primeira linha",
            element_styles_paragraph: "Texto",
            element_styles_head_1: "Título 1",
            element_styles_head_2: "Título 2",
            element_styles_head_3: "Título 3",
            element_styles_head_4: "Título 4",
            element_styles_head_5: "Título 5",
            element_styles_head_6: "Título 6",
            element_styles_indent: "Recuar",
            element_styles_indent_none: "Nenhum",
            element_styles_border: "Borda",
            element_styles_offset: "Desvio",
            element_styles_quote_style: "Estilo de citação",
            element_styles_list_style: "Estilo de lista",
            element_styles_bulleted_list: "Lista com marcadores",
            element_styles_numbered_list: "Lista Numérica",
            element_styles_todo_list: "Lista de afazeres",
            element_styles_quote: "Citar",
            element_styles_text: "Estilo de texto",
            element_styles_spacing: "Espaçamento",
            element_styles_spacing_line: "Entre linhas",
            element_styles_spacing_after: "Depois do Parágrafo",
            element_styles_spacing_before: "Antes do Parágrafo",
            statistics: "Estatisticas",
            statistics_recently: "Recentemente",
            statistics_total: "Total",
            statistics_recently_goal_day: "d",
            statistics_recently_date_formatter: "MMM YYYY",
            statistics_recently_date_sat: "Sáb.",
            statistics_recently_last_month: "Últimos 30 dias:",
            statistics_recently_words: "Palavras adicionadas",
            statistics_recently_card: "Novos Cartões",
            statistics_recently_modified_contents: "Conteúdo modificado:",
            statistics_total_since: "Desde ",
            statistics_total_install_time_label:
                "Data de instalação do Lattics",
            statistics_total_have_written: "Você escreveu:",
            statistics_total_all:
                "Total: (incluindo restauração ou sincronização)",
            statistics_total_words: "Palavras",
            tutorial: "Tutorial",
            tutorial_url:
                "https://helps.auramarker.com/en/lattics/backup_and_sync",
            pretty_time_1_day_ago: "1 dia atrás",
            pretty_time_1_hour_ago: "1 hora atrás",
            pretty_time_1_minute_ago: "1 minuto atrás",
            pretty_time_just_now: "Agora mesmo",
            pretty_time_n_days_ago: "{0} dias atrás",
            pretty_time_n_hours_ago: "{0} hora atrás",
            pretty_time_n_minute_ago: "{0} minuto atrás",
            setting: "Configurações",
            settings: "Configurações",
            account_settings: "Configurações de Aonta",
            appearance: "Aparência",
            pref_lang: "Línguas",
            editor_preference: "Preferência do Editor",
            backup: "Backup e Sincronização",
            pref_update: "Atualizar",
            feedback: "Sugestão",
            about_us: "Sobre nós",
            hi_lattics_pro: "Olá, Lattics Pro",
            not_a_member: "Não tem conta?",
            already_a_member: "Já é um membro?",
            sign_out: "Sair",
            sign_up: "Inscrever-se",
            delete_account: "Deletar conta",
            account_delete_confirm: "Tem que deletar a conta?",
            account_delete_confirm_message:
                "Observe que esta operação excluirá completamente sua conta e dados e não é recuperável, portanto, faça backup ou exporte seus dados com antecedência.Observe que esta operação excluirá completamente sua conta e os dados não serão recuperáveis, portanto, faça backup ou exporte seus dados com antecedência.",
            delete_account_need_re_signin:
                "Faça login novamente para excluir sua conta.",
            membership_cancel_renew: "Cancelar renovação auto",
            membership_expiration_info: "A associação será expirada em {0}",
            membership_will_renew: "A associação será renovada em {0}",
            theme_light: "Claro",
            theme_dark: "Escuro",
            theme_system: "sistema",
            theme_klein_blue: "Azul Klein",
            theme_pantone_red: "Vermelho Pantone",
            theme_tiffany_green: "Verde Tiffany",
            theme_hermes_brown: "Hermes Brown",
            theme_silver: "Prata",
            theme_midnight_blue: "Azul da meia noite",
            theme_dark_rose: "rosa escura",
            theme_marrs_green: "Marrs Verde",
            theme_ink: "Tinta",
            pref_editor_font: "Fonte padrão",
            pref_editor_latin_font: "Fonte latina",
            pref_editor_asian_font: "Fonte asiática",
            pref_editor_font_size: "Tamanho da fonte",
            pref_editor_spellcheck: "Verificação ortográfica",
            pref_editor_markdown: "Ativar a sintaxe Markdown",
            pref_editor_context_menu: "Ativar menu pop-up",
            backup_before: "Defina o caminho da pasta de backup para Lattics",
            backup_choose_folder: "Escolher pasta",
            pref_backup_path: "Caminho de backup:",
            config_unset: "Não configurado",
            change_backup_dir: "Alterar caminho de backup",
            open_dir: "Diretório aberto",
            backup_now: "Fazer backup agora",
            backup_restore: "Restaurar backup",
            backup_enable_auto: "Ativar backup auto",
            backup_history: "Histórico de backup",
            size: "Tamanho",
            backup_restore_from: "Restaurar deste backup",
            interval: "Intervalo",
            every_day: "Diariamente",
            every_week: "Toda semana",
            pref_update_lasted: "Seu Lattics está atualizado",
            pref_update_version: "Versão do aplicativo",
            pref_update_check: "Checar atualização",
            pref_update_checking: "Verificando",
            new_update_available: "Nova atualização disponível",
            version_number: "Versão: {0}",
            update_now: "Atualizar agora",
            auto_update_relaunch: "Relaunch",
            feedback_placeholder:
                "Por favor, deixe suas sugestões ou idéias para nós",
            update_logs: "Enviar logs de tempo de execução",
            update_logs_desc: "É usado apenas para solução de problemas",
            pref_terms_of_service: "Termos de Serviço",
            terms_of_service_link:
                "https://lattics.zineapi.com/en-US/terms_of_service",
            pref_privacy_policy: "Política de Privacidade",
            pref_about_us_other_prod: "Nossos outros aplicativos",
            pref_about_us_more: "Saber mais",
            pref_about_us_zine:
                "Um belo aplicativo móvel para anotações e escrita",
            pref_about_us_varlens: "DSLR no telefone",
            sign_in: "Conta de login",
            sign_in_migration_check_desc:
                "Migre o conteúdo criado em não logado na conta de login",
            data_merging: "Mesclando dados...",
            register_inform:
                "Ao fazer login significa que você concorda com nossos {0} e {1}.",
            privacy_policy: "Política de Privacidade",
            privacy_link: "https://lattics.zineapi.com/en-US/privacy-policy",
            signin_err_email_invalid:
                "Por favor insira um endereço de e-mail válido",
            signin_err_email_not_exists: "Este Email não está registrado.",
            signin_err_email_not_verified: "Email não está verificado.",
            signin_err_invalid_password: "Senha inválida.",
            signin_err_password_length: "6 caracteres pelo menos",
            forget_password: "Esqueceu sua senha?",
            enter_your_account_email: "Insira o email da sua conta",
            enter_the_code: "Digite o código de verificação",
            enter_the_code_sent_to:
                "O código de verificação é enviado para: {0}",
            code_empty: "O código está vazio!",
            invalid_verify_code: "Código de verificação inválido",
            reset_password: "Redefinir senha",
            enter_new_password: "Insira a nova senha",
            enter_a_new_password: "Insira uma nova senha",
            repeat_password: "Repita a senha",
            tow_passwords_not_match: "As duas senhas não combinam",
            now_you_can_use_the_new_password:
                "Agora você pode entrar com a nova senha",
            welcome_aboard: "Bem vindo a bordo",
            welcome_back: "Bem vindo de volta",
            go_to_sign_in: "Ir para login",
            go_back: "Volte",
            signup_email_exists: "Email já existe.",
            err_unknown: "Erro desconhecido",
            err_username_characters:
                "O nome de usuário pode conter apenas letras, números, sublinhados e pontos",
            err_username_empty: "O nome de usuário não pode estar vazio",
            err_username_exist: "O nome de usuário já existe",
            err_username_length_range:
                "Insira um nome de usuário entre {0} e {1} caracteres",
            err_email_exist: "Email já existe",
            err_email_invalid: "Endereço de email inválido",
            change_plan: "Alterar Plan",
            purchase: "Comprar",
            purchase_pro_desc:
                "Bem-vindo à compra da assinatura do Lattics Pro, você pode aproveitar todos os seus recursos e nos ajudar a melhorá-lo de forma consistente",
            feature_documents_in_project: "Documentos no Projeto",
            feature_knowledge_graph_nodes: "Nós do gráfico de conhecimento",
            feature_export_custom_layout: "Modelo de estilo personalizado",
            feature_text_md_doc_export: "Exportar TXT/MD",
            feature_export_image_and_pdf: "Exportar PDF/DOCX/Imagem",
            feature_goal_and_statistic: "Meta e Estatística",
            feature_theme: "Temas Personalizados",
            feature_flashcard: "Estatística Flashcard e Ebbinghaus",
            unlimited: "Ilimitado",
            purchase_free_trail: "{}-Dias de Teste",
            purchase_monthly: "Plano Mensal",
            purchase_mas_monthly: "Plano Mensal",
            purchase_yearly: "Plano Anual",
            purchase_mas_yearly: "Plano Anual",
            years: "Anos",
            purchase_save: "Salvar",
            yearly_price_avg: "12 meses a {0}/mês",
            purchase_restore: "Restaurar compra",
            purchase_inform: "Renovação auto, cancele a qualquer momento",
            purchase_unsubscription_desc:
                'Você pode acessar as configurações da conta para gerenciar a assinatura e cancelar a assinatura após a compra. O caminho específico é: "Configurações" -> Apple ID -> Mídia e compra -> Assinatura',
            choose_payment_method: "Escolha o seu método de pagamento",
            total: "Total",
            congratulations: "Parabéns!",
            you_are_now_a_member: "Você é {} agora",
            payment_succeed: "Pagamento bem-sucedido?",
            payment_succeed_desc:
                'Se você concluiu o pagamento, clique no botão "Sim" para atualizar.',
            not_yet: "Ainda não",
            yes: "Sim",
            payment_state_not_change:
                "O status do pedido não mudou, confirme se o pagamento foi bem-sucedido ou tente novamente mais tarde.",
            purchase_user_reviews_briefly_Drlcm: "É único",
            purchase_user_reviews_content_Drlcm:
                "Na verdade, gostei muito de usar isso para organizar um documento longo. É uma ideia maravilhosa e diferente de tudo que já vi.",
            purchase_user_reviews_briefly_Drjimmoore: "Bom potencial !",
            purchase_user_reviews_content_Drjimmoore:
                "O que eu gosto muito é o fluxo de trabalho. Desde escrever em cartões no lado direito até colocar cartões em uma lista de artigos no lado esquerdo.",
            purchase_user_reviews_briefly_UltimateMac:
                "Este aplicativo torna a escrita muito divertida",
            purchase_user_reviews_content_UltimateMac:
                "Um aplicativo que vai além das ferramentas de escrita tradicionais, com design funcional não convencional, excelente design e layout de interface e estética avançada. E ter minha biblioteca de cartões de arrastar e soltar favorita torna a escrita muito divertida.",
            purchase_user_reviews_briefly_Visesen: "Parece muito bom",
            purchase_user_reviews_content_Visesen:
                "O desenvolvimento parece muito bom. Além disso, os desenvolvedores respondem rapidamente aos comentários.",
        },
        it: {
            _key: "it",
            _name: "Italiana",
            colon: ": ",
            project: "Progetto",
            projects: "Progetti",
            article: "Articolo",
            articles: "Articoli",
            card: "Carta",
            cards: "Carte",
            all_cards: "Tutte le carte",
            tag: "Tag",
            tags: "Tags",
            file: "File",
            all_files: "Tutti i files",
            folder: "Cartella",
            cancel: "Annulla",
            change: "Cambia",
            continue: "Continua",
            delete: "Elimina",
            delete_confirm: "Sei sicuro di voler eliminare questo elemento??",
            edit: "Modifica",
            loading: "Caricamento in corso...",
            remove: "Rimuovi",
            rename: "Rinomina",
            reset: "Resetta",
            save: "Salva",
            submit: "Invia",
            update: "Aggiorna",
            upgrade: "Aggiornamento",
            upgrade_now: "Aggiornamento",
            uploading: "Trasferimento",
            created_at: "Creato",
            modified_at: "Modificato",
            default: "Predefinito",
            more: "Altro",
            ok: "OK",
            success: "Successo",
            untitled: "Senza titolo",
            done: "Fatto",
            ignore: "Ignora",
            load_more: "Carica altro",
            link_add_placeholder: "Inserisci o incolla un link",
            image_caption_placeholder:
                "Inserisci didascalia per l'immagine (opzionale)",
            about: "Circa",
            close: "Chiudi",
            copy: "Copia",
            cut: "Taglia",
            help: "Aiuto",
            hide: "Nascondi",
            hide_others: "Nascondi altri",
            homepage: "Pagina iniziale",
            minimize: "Minimizza",
            open_main_window: "Finestra principale",
            paste: "Incolla",
            paste_as_text: "Incolla come testo semplice",
            preferences: "Preferenze",
            quit: "Esci",
            redo: "Rifare",
            reload: "Ricarica",
            reset_zoom: "Resetta zoom",
            select_all: "Seleziona tutto",
            toggle_dark_mode: "Modalità scura",
            toggle_full_screen: "Schermo intero",
            undo: "Disfare",
            unhide: "Mostra",
            view: "Visualizza",
            window: "Finestra",
            zoom: "Zoom",
            zoom_in: "Ingrandisci",
            zoom_out: "Rimpicciolire",
            walk_through_home_title:
                '"Simile al cervello"\nNote sulla gestione della conoscenza',
            walk_through_home_sub_title:
                "Potenzia la conoscenza umana, migliora l'efficienza nella creazione della conoscenza",
            walk_through_next: "Prossimo",
            walk_through_prev: "Indietro",
            walk_through_done: "Fatto",
            walk_through_slide_one_title:
                "Salva i tuoi pensieri nella libreria di schede",
            walk_through_slide_two_title:
                "Struttura del progetto simile a una mappa mentale",
            walk_through_slide_three_title: "Elemento blocco trascinabile",
            walk_through_slide_four_title:
                "Prima offline, Backup completo della libreria",
            walk_through_slide_five_title:
                "Una varietà di metodi di esportazione dei documenti",
            new_project: "Nuovo progetto",
            change_icon: "Cambia icona",
            new_document: "Nuovo articolo",
            new_article: "Nuovo articolo",
            duplicate: "Duplicare",
            merge_selected_docs: "Unisci articoli",
            merge_selected_docs_as_new: "Unisci come nuovo articolo",
            merge_docs_fail: "Unione articoli non riuscita",
            delete_n_items: "Elimina {0} elementi",
            continue_read: "Lettura in sequenza",
            editor_input_placeholder: "Scrivi qualcosa o inserisci '/'",
            tooltip_extension_info: "Info sull'estensione",
            tooltip_standalone_window: "Modifica nella finestra autonoma",
            tooltip_article_comparison: "Confronto tra due articoli",
            split_vertical: "Verticale",
            split_horizontal: "Orizzontale",
            tooltip_split_article: "Articolo diviso",
            words: "parole",
            characters: "caratteri",
            words_count: "Parole",
            words_count_characters: "Caratteri",
            words_count_characters_without_spaces: "Senza spazi",
            words_count_asian: "Caratteri asiatici",
            words_count_asian_non: "Parole non asiatiche",
            words_count_punctuations: "Punteggiature",
            words_count_paragraphs: "Paragrafi",
            cite: "Citare",
            cited: "Citato ",
            cite_target_not_found: "Citazione non trovata",
            cancel_cited: "Cancella Citato",
            change_display_name: "Modifica nome visualizzato",
            full_cite: "Citazione completa",
            title_cite: "Titolo Citare",
            display_name: "Nome da visualizzare",
            turn_to_card: "Converti in carta",
            link_to: "Collegamento a",
            cite_filter_none: "Nessun record corrispondente",
            create_or_search_cite: "Crea o cerca una citazione",
            press_enter_add_cite: 'Premere "Invio" per',
            add_one: " aggiungere un",
            create_one: "creare un ",
            create_or_search_footnote: "Crea o cerca una footnote",
            add_a_comment: "Aggiungi un commento",
            comment: "Commenta",
            footnote: "Footnote",
            create_table_from: "Crea tabella",
            create_tags: "Crea tag",
            file_nonexistent: "Il file non esiste",
            file_open: "Aprire",
            file_open_by_other: "Apri in altri applicativi",
            file_path: "Percorso locale",
            file_size: "Grandezza",
            font_family: "Font",
            font_size: "Dimensione del font",
            font_color: "Colore del carattere",
            highlight_color: "Evidenzia Colore",
            copy_link: "Copia link",
            align: "Allineare",
            indent: "Dentellatura",
            d_indent: "De-Indent",
            line_height: "Interlinea",
            width: "Larghezza",
            layout: "Disposizione",
            clear_style: "Cancellare stile",
            left: "Sinistra",
            right: "Giusta",
            center: "Centro",
            justify: "Giustificare",
            turn_to: "Convertire in",
            turn_to_block_code: "Passare al codice",
            line_space_normal: "Normale",
            line_space_double: "Doppio",
            unsorted: "Non categorizzato",
            sort: "Ordinare",
            sort_mode_modified: "Tempo di modifica",
            sort_mode_created: "Tempo di creazione",
            sort_mode_char_code_inc: "A-Z",
            sort_mode_char_code_sub: "Z-A",
            tag_mode_filter: "Filtro",
            tag_mode_filter_sub: "Tutti i tag secondari",
            trashcan: "Cestino",
            trashcan_empty: "Svuotare",
            trashcan_put_back: "Rimettere a posto",
            trashcan_delete_confirm:
                "Sei sicuro di eliminare definitivamente questo elemento?",
            trashcan_empty_confirm: "Sei sicuro di voler svuotare il cestino?",
            trashcan_err_item_not_exist: "L'articolo non esiste",
            trashcan_err_path_not_exist: "Il percorso non esiste",
            trashcan_err_project_not_exist: "Il progetto non esiste",
            export: "Esportare",
            export_article: "Articolo Esporta",
            export_image: "Esporta in immagine",
            export_image_loading: "Esportazione dell'immagine",
            export_image_size: "Dimensione dell'immagine",
            export_notes: "Appunti",
            export_pdf: "Esporta in PDF",
            export_pdf_basic: "Di base",
            export_pdf_advance: "Avanzate",
            export_pdf_page_comment: "Commenti",
            export_pdf_page_footnote: "Esporta Footnotes",
            export_pdf_page_footnote_pos: "Posizione della footnote",
            export_pdf_page_footnote_pos_article: "Fine del documento",
            export_pdf_page_footnote_pos_page: "Fondo alla pagina",
            export_pdf_page_show_page_number: "Mostra numero di pagina",
            export_pdf_page_loading: "Esportazione PDF",
            export_pdf_page_number: "Numero di pagina",
            export_pdf_page_size: "Dimensioni della pagina",
            export_pdf_page_break: "Interruzione di pagina",
            export_project: "Esportazione del progetto",
            export_type_image: "Immagine",
            export_with_type: "Esportare {}",
            page_n: "Pagina N",
            page_styles: "Pagina",
            page_styles_align_left: "Sinistra",
            page_styles_align_center: "Centro",
            page_styles_align_right: "Giusta",
            page_styles_align_justify: "Giustificare",
            page_styles_footer: "Piè di pagina",
            page_styles_footer_page_number: "Numero di pagina",
            page_styles_footer_page_number_pos: "Posizione",
            page_styles_header: "Intestazione",
            page_styles_header_and_footer: "Intestazione e piè di pagina",
            page_styles_header_text_placeholder:
                "Immettere il testo dell'intestazione",
            page_styles_page_margin: "Margine pagina",
            page_styles_page_margin_top: "Superiore",
            page_styles_page_margin_bottom: "Fondo",
            page_styles_page_margin_left: "Sinistra",
            page_styles_page_margin_right: "Giusta",
            table_of_contents: "Sommario",
            cover: "Copertina e sommario",
            hierarchy_title: "Titolo gerarchico",
            slogan: '"Simile al cervello" note sulla gestione della conoscenza ',
            remove_lattics_logo: "Rimuovi il logo dei Lattics",
            import: "Importare",
            import_document: "Importa documento",
            attach_local_pdf: "Allega PDF locale",
            metadata: "Metadati",
            metadata_add_author: "Aggiungi autore",
            metadata_add_id: "Aggiungi ID",
            metadata_item_type: "Tipo di articolo",
            metadata_author: "Autore",
            metadata_editor: "Editore",
            metadata_contributor: "Contributore",
            metadata_translator: "Traduttore",
            metadata_reviewed_author: "Autore della recensione",
            metadata_title: "Titolo",
            metadata_abstract: "Astratto",
            metadata_journal: "Giornale",
            metadata_publication: "Pubblicazione",
            metadata_time: "Tempo",
            metadata_issue: "Issue",
            metadata_volume: "Volume",
            metadata_page: "Pagina",
            metadata_publisher: "Editore",
            metadata_series: "Serie",
            metadata_doi: "DOI",
            metadata_pmid: "PMID",
            metadata_arxiv: "Arxiv",
            metadata_issn: "ISSN",
            metadata_isbn: "ISBN",
            metadata_url: "URL",
            metadata_keywords: "Parole chiave",
            metadata_add_keywords: "Aggiungi parole chiave",
            bibliography: "Bibliografia",
            addition_pin_to_right: "Fissa al Dock",
            addition_un_pin_to_right: "Sganciare",
            addition_add_tag: "Aggiungere tags",
            addition_add_project: "Aggiungere un progetto",
            tag_deleted: "Il tag è stato eliminato",
            addition_add_memo: "Nota qui",
            addition_forward_link: "Collegamento in avanti",
            addition_backward_link: "Collegamento all'indietro",
            unlink_mention: "Scollegato",
            link: "Collegamento",
            link_all: "Collega tutto",
            addition_table_of_contents: "Sommario",
            item_created: "Creato",
            item_last_modified: "Ultima modifica",
            last_used: "Ultimo uso",
            source_of_card: "Fonte",
            search: "Cercare",
            search_placeholder: "Cerca in Lattics",
            searching: "Alla ricerca di...",
            search_show_all: "Mostra tutto",
            no_matching_records: "Nessun record corrispondente",
            search_find: "Trovare",
            next: "Prossimo",
            previous: "Precedente",
            search_replace: "Sostituire",
            search_replace_all: "Sostituisci tutto",
            search_total: "{0} risultati in {1} articoli",
            math_type: "Equazione matematica",
            math_type_calculus: "Calcolo",
            math_type_character: "Alfabeto",
            math_type_elementary: "Elementar",
            math_type_function_and_set: "Funzioni e Insiemi",
            math_type_geometry: "Geometria",
            math_type_text_mode: "Sintassi LaTeX",
            math_type_please_use_text_mode:
                "Potrebbe esserci una sintassi non supportata per l'input corrente e si consiglia di utilizzare la modalità testo normale.",
            code_block: "Codice",
            separator: "Separatore",
            code_block_language: "Lingua del programma",
            table: "Tavolo",
            add_column_before: "Aggiungi colonna prima",
            add_column_after: "Aggiungi colonna dopo",
            add_row_before: "Aggiungi riga prima",
            add_row_after: "Aggiungi riga dopo",
            delete_column: "Elimina colonna",
            delete_row: "Elimina riga",
            goal: "Obiettivo",
            goal_deadline: "Scadenza",
            goal_choose_date: "Scegli data",
            goal_today: "Oggi",
            goal_left: "Restanti",
            goal_delayed: "Ritardato",
            goal_words_target: "Parole",
            goal_character_target: "Caratteri",
            goal_not_set: "Non impostato",
            goal_written: "Scritto",
            goal_rate: "Finito",
            goal_achieve: "Raggiungere",
            goal_achieved: "Raggiunto",
            focus_mode: "Modalità messa a fuoco",
            focus_mode_typewriter_mode: "Modalità macchina da scrivere",
            focus_mode_typewriter_mode_line: "Concentrati sulla linea",
            focus_mode_typewriter_mode_sentence: "Frase",
            focus_mode_typewriter_mode_paragraph: "Paragrafo",
            focus_mode_typewriter_mode_none: "Nessuno",
            focus_mode_keyboard_sound: "Suono della tastiera",
            project_opening: "Progetto di apertura...",
            project_package: "Pacchetto progetto",
            project_package_info:
                "Per impacchettare tutti gli articoli, le schede, i file, la struttura, la mappa mentale, le citazioni, le note a piè di pagina, i promemoria, i tag e altre informazioni complete nel progetto come file autonomo",
            project_package_save: "Progetto di imballaggio...",
            project_editors: "Editor",
            card_library: "Carte",
            add_card: "Aggiungi carta",
            card_deleted: "Il {} della citazione è stato cancellato",
            graph: "Grafico",
            graph_filter: "Filtro contenuto",
            graph_sort_out: "Layout automatico",
            graph_sort_out_confirm:
                "Sei sicuro di volere il layout automatico?",
            graph_view_mind_map: "Mappa mentale",
            graph_view_plot_view: "Trama della storia",
            graph_view_aerial_view: "Vista aerea",
            graph_view_preview_node: "Anteprima",
            graph_view_title_node: "Titolo",
            graph_view_memo_node: "Promemoria",
            tag_hint: "Tag suggerimento",
            cite_graph: "Citare il grafico",
            graph_node_copy_cite_link: "Copia il link di citazione",
            graph_node_remove_from_project: "Rimuovi dal progetto",
            graph_node_remove_from_tag: "Rimuovi dal tag",
            graph_relation_link: "Collegamento di relazione",
            graph_drag_me: "Trascinami",
            graph_upgrade_tip: "Superati 15 nodi liberi",
            flashcard: "Flashcard",
            flashcard_filter: "Filtro",
            flashcard_filter_article: "Articoli",
            flashcard_filter_card: "Carte",
            flashcard_filter_outline: "Schema del progetto",
            flashcard_filter_extension: "Info sull'estensione",
            flashcard_sort_mode_direct: "Ordine di contorno",
            flashcard_sort_mode_inverse: "Ordine contorno inverso",
            flashcard_sort_mode_random: "Casuale",
            flashcard_show_answer: "Mostra risposta",
            flashcard_show_question: "Mostra domanda",
            flashcard_next: "Avanti",
            flashcard_back: "Indietro",
            flashcard_complete: "Completare",
            flashcard_completed: "Completato",
            flashcard_empty_tip:
                "Le schede flash provengono da articoli o carte",
            flashcard_got_it: "Masterizzato",
            flashcard_enhance: "Migliorare",
            flashcard_ebbinghaus: "Ebbinghaus",
            flashcard_statistics: "Statistiche",
            flashcard_statistics_total_have: "Hai:",
            flashcard_statistics_learned: "Imparato",
            flashcard_statistics_got_it: "Masterizzato",
            flashcard_statistics_recently_learned: "Imparato di recente:",
            flashcard_question_type_default: "Q & A",
            flashcard_question_type_fill_in_the_blanks:
                "Riempi gli spazi vuoti",
            flashcard_question_type_choice: "Domande a scelta multipla",
            template: "Modello",
            template_choose_template: "Scegli Modello",
            template_current_article: "Articolo attuale",
            template_current_project: "Progetto attuale",
            template_modify_styles: "Modifica stili",
            template_setting_scope: "Ambito di impostazione",
            template_new: "Salva come nuovo modello",
            template_reset: "Ripristina lo stile",
            template_set_as_default: "Imposta come predefinito",
            custom_style: "Modello di stile",
            element_styles_color: "Colore",
            element_styles_color_default: "Predefinito",
            element_styles_color_black: "Nero",
            element_styles_color_grey: "Grigio",
            element_styles_color_light_grey: "Grigio chiaro",
            element_styles_color_deep_blue: "Profondo blu",
            element_styles_color_blue: "Blu",
            element_styles_color_green: "Verde",
            element_styles_color_mars_green: "Verde Marte",
            element_styles_color_dark_green: "Verde scuro",
            element_styles_color_orange: "Arancia",
            element_styles_color_brown: "Marrone",
            element_styles_color_purple: "Viola",
            element_styles_color_pink: "Rosa",
            element_styles_color_red: "Rosso",
            element_styles_color_yellow: "Giallo",
            element_styles_build_in_magazine: "Rivista",
            element_styles_build_in_paper_thesis: "Carta e tesi",
            element_styles_build_in_report: "Rapporto",
            element_styles_build_in_diary_notes: "Diario e appunti",
            element_styles_thickness: "Spessore",
            element_styles_number_style: "Stile numerico",
            element_styles_bullet_style: "Stile puntato",
            element_styles_box_style: "Stile scatola",
            element_styles_check_style: "Stile casella di controllo",
            element_styles_check_style_delete_line: "Linea attraverso",
            element_styles_check_style_high: "Evidenziare",
            element_styles_check_style_high_color: "Evidenzia Colore",
            element_styles_bullet_disc: "Disco",
            element_styles_bullet_circle: "Cerchio",
            element_styles_bullet_square: "Piazza",
            element_styles_todo_style: "Piazza",
            element_styles_line_style: "Stile linea",
            element_styles_line_style_solid: "Continua",
            element_styles_line_style_dashed: "Tratteggiata",
            element_styles_todo_style_circle: "Cerchio",
            element_styles_quote_style_top: "Linea superiore",
            element_styles_quote_style_single: "Linea Sinistra",
            element_styles_quote_style_quote: "Quotazione",
            element_styles_first_indent: "Rientro prima riga",
            element_styles_paragraph: "Testo",
            element_styles_head_1: "Titolo 1",
            element_styles_head_2: "Titolo 2",
            element_styles_head_3: "Titolo 3",
            element_styles_head_4: "Titolo 4",
            element_styles_head_5: "Titolo 5",
            element_styles_head_6: "Titolo 6",
            element_styles_indent: "Rientro",
            element_styles_indent_none: "Nessuno",
            element_styles_border: "Confine",
            element_styles_offset: "Offset",
            element_styles_quote_style: "Stile di citazione",
            element_styles_list_style: "Stile elenco",
            element_styles_bulleted_list: "Elenco puntato",
            element_styles_numbered_list: "Elenco numerico",
            element_styles_todo_list: "Lista di Todo",
            element_styles_quote: "Citazione",
            element_styles_text: "Stile del testo",
            element_styles_spacing: "Spaziatura",
            element_styles_spacing_line: "Interlinea",
            element_styles_spacing_after: "Dopo il paragrafo",
            element_styles_spacing_before: "Prima del paragrafo",
            statistics: "Statistiche",
            statistics_recently: "Recentemente",
            statistics_total: "Totale",
            statistics_recently_goal_day: "g",
            statistics_recently_date_formatter: "MMM YYYY",
            statistics_recently_date_sat: "Sab.",
            statistics_recently_last_month: "Ultimi 30 giorni:",
            statistics_recently_words: "Parole aggiunte",
            statistics_recently_card: "Nuove Carte",
            statistics_recently_modified_contents: "Contenuti modificati:",
            statistics_total_since: "Da ",
            statistics_total_install_time_label:
                "Data di installazione dei Lattics",
            statistics_total_have_written: "Hai scritto:",
            statistics_total_all: "Totale: (incluso ripristino o sincro)",
            statistics_total_words: "Parole",
            tutorial: "Esercitazione",
            tutorial_url:
                "https://helps.auramarker.com/en/lattics/backup_and_sync",
            pretty_time_1_day_ago: "1 giorno fa",
            pretty_time_1_hour_ago: "1 ora fa",
            pretty_time_1_minute_ago: "1 minuto fa",
            pretty_time_just_now: "Proprio ora",
            pretty_time_n_days_ago: "{0} giorni fa",
            pretty_time_n_hours_ago: "{0} ore fa",
            pretty_time_n_minute_ago: "{0} minuti fa",
            setting: "Impostazione",
            settings: "Impostazioni",
            account_settings: "Impostazione conto",
            appearance: "Aspetto",
            pref_lang: "Le lingue",
            editor_preference: "Preferenze dell'editore",
            backup: "Backup e Sincro",
            pref_update: "Aggiornamento",
            feedback: "Feedback",
            about_us: "Chi siamo",
            hi_lattics_pro: "Ciao, Lattics Pro",
            not_a_member: "Non avere account?",
            already_a_member: "Sei già un membro?",
            sign_out: "Esci dall'account",
            sign_up: "Login",
            delete_account: "Eliminare l'account",
            account_delete_confirm: "Devi eliminare l'account?",
            account_delete_confirm_message:
                "Tieni presente che questa operazione eliminerà completamente il tuo account e i dati non sono recuperabili, quindi esegui il backup o esporta i tuoi dati in anticipo.",
            delete_account_need_re_signin:
                "Accedi di nuovo per eliminare il tuo account.",
            membership_cancel_renew: "Annulla rinnovo auto",
            membership_expiration_info: "L'abbonamento scadrà il {0}",
            membership_will_renew: "L'abbonamento si rinnoverà il {0}",
            theme_light: "Leggera",
            theme_dark: "Buia",
            theme_system: "Sistema",
            theme_klein_blue: "Klein Blu",
            theme_pantone_red: "Pantone Rosso",
            theme_tiffany_green: "Verde Tiffany",
            theme_hermes_brown: "Hermes Marrone",
            theme_silver: "Argento",
            theme_midnight_blue: "Blu notte",
            theme_dark_rose: "Rosa Oscura",
            theme_marrs_green: "Marrs Verde",
            theme_ink: "Inchiostro",
            pref_editor_font: "Carattere predefinito",
            pref_editor_latin_font: "Carattere Latino",
            pref_editor_asian_font: "Carattere Asiatico",
            pref_editor_font_size: "Dimensione carattere",
            pref_editor_spellcheck: "Controllo ortografico",
            pref_editor_markdown: "Abilita sintassi Markdown",
            pref_editor_context_menu: "Abilita il menu a comparsa",
            backup_before: "Si prega di impostare il percorso di backup",
            backup_choose_folder: "Scegli Cartella",
            pref_backup_path: "Percorso di backup:",
            config_unset: "Non impostato",
            change_backup_dir: "Cambia percorso di backup",
            open_dir: "Cartella aperta",
            backup_now: "Backup ora",
            backup_restore: "Ripristinare il backup",
            backup_enable_auto: "Abilita backup auto",
            backup_history: "Cronologia di backup",
            size: "Dimensione",
            backup_restore_from: "Ripristina da questo backup",
            interval: "Intervallo",
            every_day: "Ogni giorno",
            every_week: "Ogni settimana",
            pref_update_lasted: "Il tuo Lattics è aggiornato",
            pref_update_version: "Versione dell'app",
            pref_update_check: "Controlla aggiornamento",
            pref_update_checking: "Controllo",
            new_update_available: "Nuovo aggiornamento disponibile",
            version_number: "Versione: {0}",
            update_now: "Aggiorna ora",
            auto_update_relaunch: "Rilancio",
            feedback_placeholder:
                "Si prega di lasciare i vostri suggerimenti o idee a noi",
            update_logs: "Invia i log di runtime",
            update_logs_desc:
                "Viene utilizzato solo per la risoluzione dei problemi",
            pref_terms_of_service: "Termini di servizio",
            terms_of_service_link:
                "https://lattics.zineapi.com/en-US/terms_of_service",
            pref_privacy_policy: "Politica sulla riservatezza",
            pref_about_us_other_prod: "Le nostre altre app",
            pref_about_us_more: "Saperne di più",
            pref_about_us_zine:
                "Una bellissima app per appunti e scrittura mobile",
            pref_about_us_varlens: "DSLR nel telefono",
            sign_in: "Login",
            sign_in_migration_check_desc:
                "Migrare i contenuti creati senza accesso all'account di accesso",
            data_merging: "Unione dati...",
            register_inform:
                "Accedendo significa che sei d'accordo con i nostri {0} e {1}.",
            privacy_policy: "Politica sulla riservatezza",
            privacy_link: "https://lattics.zineapi.com/en-US/privacy-policy",
            signin_err_email_invalid:
                "Si prega di inserire un indirizzo email valido",
            signin_err_email_not_exists: "Questa email non è registrata.",
            signin_err_email_not_verified: "L'email non è verificata.",
            signin_err_invalid_password: "Password non valida.",
            signin_err_password_length: "Almeno 6 caratteri",
            forget_password: "Hai dimenticato la password?",
            enter_your_account_email: "Inserisci l'email del tuo account",
            enter_the_code: "Inserire il codice di verifica",
            enter_the_code_sent_to:
                "Il codice di verifica viene inviato a: {0}",
            code_empty: "Il codice è vuoto!",
            invalid_verify_code: "Codice di verifica non valido",
            reset_password: "Resetta la password",
            enter_new_password: "Inserire una nuova password",
            enter_a_new_password: "Inserire una nuova password",
            repeat_password: "Ripeti la password",
            tow_passwords_not_match: "Le due password non corrispondono",
            now_you_can_use_the_new_password:
                "Ora puoi accedere con la nuova password",
            welcome_aboard: "Benvenuto a bordo",
            welcome_back: "Bentornato",
            go_to_sign_in: "Vai su Accedi",
            go_back: "Torna indietro",
            signup_email_exists: "Email già esistente",
            err_unknown: "Errore sconosciuto",
            err_username_characters:
                "Il nome utente può contenere solo lettere, numeri, caratteri di sottolineatura e punti",
            err_username_empty: "Il nome utente non può essere vuoto",
            err_username_exist: "Il nome utente esiste già",
            err_username_length_range:
                "Inserisci un nome utente tra {0} e {1} caratteri",
            err_email_exist: "Email già esistente",
            err_email_invalid: "L'indirizzo email non è valido",
            change_plan: "Cambia piano",
            purchase: "Acquistare",
            purchase_pro_desc:
                "Benvenuto per l'acquisto dell'abbonamento a Lattics Pro, puoi goderti tutte le sue funzionalità e supportarci per migliorarlo costantemente",
            feature_documents_in_project: "Documenti nel progetto",
            feature_knowledge_graph_nodes: "Nodi del grafico della conoscenza",
            feature_export_custom_layout: "Modello di stile personalizzato",
            feature_text_md_doc_export: "Esporta TXT/MD",
            feature_export_image_and_pdf: "Esporta PDF/DOCX/Immagine",
            feature_goal_and_statistic: "Obiettivo e statistica",
            feature_theme: "Temi personalizzati",
            feature_flashcard: "Statistica Flashcard ed Ebbinghaus",
            unlimited: "Illimitato",
            purchase_free_trail: "{}-giorni prova",
            purchase_monthly: "Piano Mensile",
            purchase_mas_monthly: "Piano Mensile",
            purchase_yearly: "Piano Annuale",
            purchase_mas_yearly: "Piano Annuale",
            years: "Anni",
            purchase_save: "Risparmia",
            yearly_price_avg: "12 mesi a {0}/mese",
            purchase_restore: "Ripristinare acquisto",
            purchase_inform: "Rinnovo auto, Annulla in qualsiasi momento",
            purchase_unsubscription_desc:
                "Puoi andare alle impostazioni dell'account per gestire l'abbonamento e annullare l'abbonamento dopo l'acquisto. Il percorso specifico è: \"Impostazioni\" -> ID Apple -> Media e acquisti -> Abbonamento",
            choose_payment_method: "Scegli il tuo metodo di pagamento",
            total: "Totale",
            congratulations: "Congratulazioni!",
            you_are_now_a_member: "Sei {} ora",
            payment_succeed: "Pagamento riuscito?",
            payment_succeed_desc:
                'Se hai terminato il pagamento, fai clic sul pulsante "Sì" per aggiornare.',
            not_yet: "Non ancora",
            yes: "SÌ",
            payment_state_not_change:
                "Lo stato dell'ordine non è cambiato, conferma se il pagamento è andato a buon fine o riprova più tardi. ",
            purchase_user_reviews_briefly_Drlcm: "È unico",
            purchase_user_reviews_content_Drlcm:
                "In realtà mi è piaciuto molto usarlo per organizzare un lungo documento. È un'idea meravigliosa e diversa da qualsiasi altra cosa abbia mai visto.",
            purchase_user_reviews_briefly_Drjimmoore: "Bel potenziale !",
            purchase_user_reviews_content_Drjimmoore:
                "Quello che mi piace molto è il flusso di lavoro. Dalla scrittura sulle carte sul lato destro, all'inserimento delle carte in un elenco di articoli sul lato sinistro.",
            purchase_user_reviews_briefly_UltimateMac:
                "Questa app rende la scrittura davvero divertente",
            purchase_user_reviews_content_UltimateMac:
                "Un'applicazione che va oltre i tradizionali strumenti di scrittura, con un design funzionale non convenzionale, un eccellente design e layout dell'interfaccia ed un'estetica avanzata. E avere la mia libreria di carte drag-and-drop preferita rende la scrittura molto divertente.",
            purchase_user_reviews_briefly_Visesen: "Sembra molto buono",
            purchase_user_reviews_content_Visesen:
                "Lo sviluppo sembra molto buono. Inoltre, gli sviluppatori rispondono rapidamente al feedback.",
        },
        ru: {
            _key: "ru",
            _name: "Русский",
            colon: ": ",
            project: "Проект",
            projects: "Проекты",
            article: "Статья",
            articles: "Статьи",
            card: "Карта",
            cards: "Карты",
            all_cards: "Все карты",
            tag: "Тag",
            tags: "Тags",
            file: "Файл",
            all_files: "Все файлы",
            folder: "Папка",
            cancel: "Отмена",
            change: "Изменять",
            continue: "Продолжать",
            delete: "Удалить",
            delete_confirm: "Вы уверены, что хотите удалить этот элемент?",
            edit: "Редактировать",
            loading: "Загрузка...",
            remove: "Удалять",
            rename: "Переименовать",
            reset: "вправлять",
            save: "Сохранять",
            submit: "Поставлять",
            update: "Обновлять",
            upgrade: "Модернизировать",
            upgrade_now: "Модернизировать сейчас",
            uploading: "Загружаю",
            created_at: "Созданный",
            modified_at: "Изменено",
            default: "Умолчание",
            more: "Больше",
            ok: "Окей",
            success: "Успех",
            untitled: "Без названия",
            done: "Законченный",
            ignore: "Игнорировать",
            load_more: "Загрузи больше",
            link_add_placeholder: "Введите или вставьте ссылку",
            image_caption_placeholder:
                "Введите подпись к изображению (необязательно)",
            about: "Об",
            close: "Закрываться",
            copy: "Копировать",
            cut: "Отрезать",
            help: "Помощь",
            hide: "Скрывать",
            hide_others: "Скрыть другие",
            homepage: "Домашняя страница",
            minimize: "Минимизировать",
            open_main_window: "Главное окно",
            paste: "Наклеивать",
            paste_as_text: "Вставить с обычным текстом",
            preferences: "Предпочтение",
            quit: "Покидать",
            redo: "Переделывать",
            reload: "Перезагрузить",
            reset_zoom: "Сбросить масштаб",
            select_all: "Выбрать все",
            toggle_dark_mode: "Темный режим",
            toggle_full_screen: "Полноэкранный",
            undo: "Отменить",
            unhide: "Показать",
            view: "Взгляд",
            window: "Окошко",
            zoom: "Увеличить",
            zoom_in: "Приблизить",
            zoom_out: "Уменьшить",
            walk_through_home_title:
                "«Мозговые»\nЗаметки по управлению знаниями",
            walk_through_home_sub_title:
                "Расширение человеческих знаний, повышение эффективности создания знаний",
            walk_through_next: "Следующий",
            walk_through_prev: "Пред",
            walk_through_done: "Заканчивать",
            walk_through_slide_one_title:
                "Храните свои мысли в библиотека карт",
            walk_through_slide_two_title:
                "Схема проекта, похожая на карту разума",
            walk_through_slide_three_title: "Перетаскиваемый блочный элемент",
            walk_through_slide_four_title:
                "Сначала автономный режим, полная резервная копия библиотеки",
            walk_through_slide_five_title:
                "Разнообразие методов экспорта документов",
            new_project: "Новый проект",
            change_icon: "Изменить значок",
            new_document: "Новая статья",
            new_article: "Новая статья",
            duplicate: "Дублировать",
            merge_selected_docs: "Объединить статьи",
            merge_selected_docs_as_new: "Объединить как новую статью",
            merge_docs_fail: "Не удалось объединить статьи",
            delete_n_items: "Удалить {0} элементов",
            continue_read: "Читать последовательно",
            editor_input_placeholder: "Напишите что-нибудь или введите '/'",
            tooltip_extension_info: "Информация о расширении",
            tooltip_standalone_window: "Редактировать в отдельном окне",
            tooltip_article_comparison: "Сравнение двух статей",
            split_vertical: "Вертикальный",
            split_horizontal: "Горизонтальный",
            tooltip_split_article: "Разделить статью",
            words: "слова",
            characters: "символов",
            words_count: "Слова",
            words_count_characters: "Символов",
            words_count_characters_without_spaces: "Без пробелов",
            words_count_asian: "Азиатские иероглифы",
            words_count_asian_non: "Неазиатские слова",
            words_count_punctuations: "Знаки препинания",
            words_count_paragraphs: "Пункты",
            cite: "Цитировать",
            cited: "Цитируется ",
            cite_target_not_found: "Цитировать не найдено",
            cancel_cited: "Отменить цитирование",
            change_display_name: "Изменить отображаемое имяe",
            full_cite: "Полный цитировать",
            title_cite: "Название цитируется",
            display_name: "Отображаемое имя",
            turn_to_card: "Поверну к карте",
            link_to: "Ссылка к",
            cite_filter_none: "Нет совпадающих записей",
            create_or_search_cite: "Создание или поиск цитировать",
            press_enter_add_cite: "Нажмите «Ввод», чтобы",
            add_one: "добавить",
            create_one: "создать",
            create_or_search_footnote: "Создать или найти сноску",
            add_a_comment: "Добавить комментарий",
            comment: "Комментар",
            footnote: "Сноска",
            create_table_from: "Создать таблицу",
            create_tags: "Создать Tags",
            file_nonexistent: "Файл не существует",
            file_open: "Открыть",
            file_open_by_other: "Открыть в других приложениях",
            file_path: "Локальный путь",
            file_size: "Размер",
            font_family: "Шрифт",
            font_size: "Размер шрифта",
            font_color: "Цвет шрифта",
            highlight_color: "Цвет выделения",
            copy_link: "Копировать ссылку",
            align: "Выровнять",
            indent: "Отступ",
            d_indent: "Удаление отступов",
            line_height: "Межстрочный интервал",
            width: "Ширина",
            layout: "Макета",
            clear_style: "Очистить стиль",
            left: "Левый",
            right: "Правая",
            center: "Центр",
            justify: "Оправдывать",
            turn_to: "Повернуться к",
            turn_to_block_code: "Кодовый блок",
            line_space_normal: "Нормальный",
            line_space_double: "Двойной",
            unsorted: "Несортированный",
            sort: "Сортировать",
            sort_mode_modified: "Время модификации",
            sort_mode_created: "Время создания",
            sort_mode_char_code_inc: "A-Z",
            sort_mode_char_code_sub: "Z-A",
            tag_mode_filter: "Фильтр",
            tag_mode_filter_sub: "Все подтеги",
            trashcan: "Мусорное ведро",
            trashcan_empty: "Опустошать",
            trashcan_put_back: "Вернуть",
            trashcan_delete_confirm:
                "Вы уверены, что хотите навсегда удалить этот элемент?",
            trashcan_empty_confirm: "Вы уверены, что хотите очистить корзину?",
            trashcan_err_item_not_exist: "Товар не существует",
            trashcan_err_path_not_exist: "Путь не существует",
            trashcan_err_project_not_exist: "Проект не существует",
            export: "Экспорт",
            export_article: "Экспорт статьи",
            export_image: "Экспорт в изображение",
            export_image_loading: "Экспорт изображения",
            export_image_size: "Размер изображения",
            export_notes: "Примечания",
            export_pdf: "Экспорт в PDF",
            export_pdf_basic: "Основной",
            export_pdf_advance: "Передовой",
            export_pdf_page_comment: "Комментарии",
            export_pdf_page_footnote: "Экспорт сносок",
            export_pdf_page_footnote_pos: "Позиция сноски",
            export_pdf_page_footnote_pos_article: "Конец документа",
            export_pdf_page_footnote_pos_page: "Нижняя часть страницы",
            export_pdf_page_show_page_number: "Показать номер страницы",
            export_pdf_page_loading: "Экспорт PDF",
            export_pdf_page_number: "Номер страницы",
            export_pdf_page_size: "Размер страницы",
            export_pdf_page_break: "Разрыв страницы",
            export_project: "Экспорт проекта",
            export_type_image: "Изображение",
            export_with_type: "Экспорт {}",
            page_n: "Страница N",
            page_styles: "Страница",
            page_styles_align_left: "Левый",
            page_styles_align_center: "Правая",
            page_styles_align_right: "Правая",
            page_styles_align_justify: "Оправдывать",
            page_styles_footer: "Нижний колонтитул",
            page_styles_footer_page_number: "Номер страницы",
            page_styles_footer_page_number_pos: "Позиция",
            page_styles_header: "Заголовок",
            page_styles_header_and_footer: "Верхний и нижний колонтитулы",
            page_styles_header_text_placeholder: "Введите текст заголовка",
            page_styles_page_margin: "Поле страницы",
            page_styles_page_margin_top: "Вершина",
            page_styles_page_margin_bottom: "Нижний",
            page_styles_page_margin_left: "Левый",
            page_styles_page_margin_right: "Правая",
            table_of_contents: "Оглавление",
            cover: "Обложка и оглавление",
            hierarchy_title: "Иерархия Заголовки",
            slogan: "«Мозговые» заметки по управлению знаниями",
            remove_lattics_logo: "Удалить логотип Lattics",
            import: "Импортировать",
            import_document: "Импорт документа",
            attach_local_pdf: "Прикрепить локальный PDF",
            metadata: "Метаданные",
            metadata_add_author: "Добавить автора",
            metadata_add_id: "Добавить идентификатор",
            metadata_item_type: "Тип элемента",
            metadata_author: "Автор",
            metadata_editor: "Редактор",
            metadata_contributor: "Сотрудник",
            metadata_translator: "Переводчик",
            metadata_reviewed_author: "Автор обзора",
            metadata_title: "Заголовок",
            metadata_abstract: "Аннотация",
            metadata_journal: "Журнал",
            metadata_publication: "Публикация",
            metadata_time: "Время",
            metadata_issue: "Выпуск",
            metadata_volume: "Объем",
            metadata_page: "Страница",
            metadata_publisher: "Издатель",
            metadata_series: "Серия",
            metadata_doi: "DOI",
            metadata_pmid: "PMID",
            metadata_arxiv: "Arxiv",
            metadata_issn: "ISSN",
            metadata_isbn: "ISBN",
            metadata_url: "URL",
            metadata_keywords: "Ключевые слова",
            metadata_add_keywords: "Добавить ключевые слова",
            bibliography: "Библиография",
            addition_pin_to_right: "Закрепить на док-станции",
            addition_un_pin_to_right: "Отстыковать",
            addition_add_tag: "Добавлять tags",
            addition_add_project: "Добавить проект",
            tag_deleted: "Тag удален",
            addition_add_memo: "Памятка здесь",
            addition_forward_link: "Ссылка для пересылки",
            addition_backward_link: "Обратная ссылка",
            unlink_mention: "Не связан",
            link: "Ссылка",
            link_all: "Связать все",
            addition_table_of_contents: "Оглавление",
            item_created: "Созданный",
            item_last_modified: "Последнее изменение",
            last_used: "Последний используемый",
            source_of_card: "Источник карты",
            search: "Поиск",
            search_placeholder: "Искать в Lattics",
            searching: "Идет поиск...",
            search_show_all: "Показать все",
            no_matching_records: "Нет соответствующих записей",
            search_find: "Находить",
            next: "Следующий",
            previous: "Предыдущий",
            search_replace: "Заменять",
            search_replace_all: "Заменить все",
            search_total: "{0} результата в {1} статьях",
            math_type: "Математическое уравнение",
            math_type_calculus: "Исчисление",
            math_type_character: "Алфавит",
            math_type_elementary: "Основной",
            math_type_function_and_set: "функции и набор",
            math_type_geometry: "Геометрия",
            math_type_text_mode: "Синтаксис LaTeX",
            math_type_please_use_text_mode:
                "Для текущего ввода может быть неподдерживаемый синтаксис, поэтому рекомендуется использовать обычный текстовый режим.",
            code_block: "Код",
            separator: "Сепаратор",
            code_block_language: "Язык программы",
            table: "Таблица",
            add_column_before: "Добавить столбец перед",
            add_column_after: "Добавить столбец после",
            add_row_before: "Добавить строку перед",
            add_row_after: "Добавить строку после",
            delete_column: "Удалить столбец",
            delete_row: "Удалить строку",
            goal: "Цель",
            goal_deadline: "Крайний срок",
            goal_choose_date: "Выберите дату",
            goal_today: "Сегодня",
            goal_left: "Оставшийся",
            goal_delayed: "Отложенный",
            goal_words_target: "Слова",
            goal_character_target: "Символов",
            goal_not_set: "Не задано",
            goal_written: "Написано",
            goal_rate: "Законченный",
            goal_achieve: "Достигать",
            goal_achieved: "Достигнуто",
            focus_mode: "Режим фокусировки",
            focus_mode_typewriter_mode: "Режим пишущей машинки",
            focus_mode_typewriter_mode_line: "Сосредоточьтесь на линии",
            focus_mode_typewriter_mode_sentence: "Приговор",
            focus_mode_typewriter_mode_paragraph: "Параграф",
            focus_mode_typewriter_mode_none: "Никто",
            focus_mode_keyboard_sound: "Звук клавиатуры",
            project_opening: "Открытие проекта...",
            project_package: "Пакет проектов",
            project_package_info:
                "Чтобы упаковать все статьи, карточки, файлы, план, ментальную карту, цитаты, сноски, заметки, теги и другую полную информацию в проекте в виде отдельного файла.",
            project_package_save: "Проект упаковки...",
            project_editors: "Редакторы",
            card_library: "Карты",
            add_card: "Добавить карту",
            card_deleted: "{} цитирования было удалено",
            graph: "График",
            graph_filter: "Фильтр содержимого",
            graph_sort_out: "Автоматический макет",
            graph_sort_out_confirm:
                "Вы уверены, что хотите автоматический макет?",
            graph_view_mind_map: "Карта разума",
            graph_view_plot_view: "Сюжет истории",
            graph_view_aerial_view: "Птичьего полета",
            graph_view_preview_node: "Предварительный просмотр",
            graph_view_title_node: "Заголовок",
            graph_view_memo_node: "Памятка",
            tag_hint: "Подсказка Таg",
            cite_graph: "Процитировать график",
            graph_node_copy_cite_link: "Копировать цитировать ссылку",
            graph_node_remove_from_project: "Удалить из проекта",
            graph_node_remove_from_tag: "Удалить из Таg",
            graph_relation_link: "Ссылка на отношения",
            graph_drag_me: "Перетащи меня",
            graph_upgrade_tip: "Превышено 15 свободных узлов",
            flashcard: "Флеш - накопитель",
            flashcard_filter: "Фильтр",
            flashcard_filter_article: "Статьи",
            flashcard_filter_card: "Карты",
            flashcard_filter_outline: "Общий обзор проекта",
            flashcard_filter_extension: "Информация о расширении",
            flashcard_sort_mode_direct: "Очередность набросков",
            flashcard_sort_mode_inverse: "Порядок инверсии контуров",
            flashcard_sort_mode_random: "Случайный",
            flashcard_show_answer: "Показать ответ",
            flashcard_show_question: "Показать проблему",
            flashcard_next: "Следующий",
            flashcard_back: "Возвращение",
            flashcard_complete: "Завершать",
            flashcard_completed: "Завершенный",
            flashcard_empty_tip: "Флэш - карты от предметов или карт",
            flashcard_got_it: "Освоен",
            flashcard_enhance: "Усиливать",
            flashcard_ebbinghaus: "Эббингауз",
            flashcard_statistics: "Статистика",
            flashcard_statistics_total_have: "Вы уже:",
            flashcard_statistics_learned: "Научился",
            flashcard_statistics_got_it: "Освоен",
            flashcard_statistics_recently_learned: "Недавно узнал:",
            flashcard_question_type_default: "Q & A",
            flashcard_question_type_fill_in_the_blanks: "Заполнить бланки",
            flashcard_question_type_choice:
                "Вопросы с несколькими вариантами ответов",
            template: "Шаблон",
            template_choose_template: "Выберите шаблон",
            template_current_article: "Текущая статья",
            template_current_project: "Текущий проект",
            template_modify_styles: "Изменить стили",
            template_setting_scope: "Настройка области действия",
            template_new: "Сохранить как новый шаблон",
            template_reset: "Восстановить стиль",
            template_set_as_default: "Установить по умолчанию",
            custom_style: "Шаблон стиля",
            element_styles_color: "Цвет",
            element_styles_color_default: "По умолчанию",
            element_styles_color_black: "Черный",
            element_styles_color_grey: "Серый",
            element_styles_color_light_grey: "Светло-серый",
            element_styles_color_deep_blue: "Темно-синий",
            element_styles_color_blue: "Синий",
            element_styles_color_green: "Зеленый",
            element_styles_color_mars_green: "Марс Грин",
            element_styles_color_dark_green: "Темно-зеленый",
            element_styles_color_orange: "Апельсин",
            element_styles_color_brown: "Коричневый",
            element_styles_color_purple: "Фиолетовый",
            element_styles_color_pink: "Розовый",
            element_styles_color_red: "Красный",
            element_styles_color_yellow: "Желтый",
            element_styles_build_in_magazine: "Журнал",
            element_styles_build_in_paper_thesis: "Бумага и диссертация",
            element_styles_build_in_report: "Отчет",
            element_styles_build_in_diary_notes: "Дневник и заметки",
            element_styles_thickness: "Толщина",
            element_styles_number_style: "Числовой стиль",
            element_styles_bullet_style: "Маркированный стиль",
            element_styles_box_style: "Стиль коробки",
            element_styles_check_style: "Стиль флажка",
            element_styles_check_style_delete_line: "Линия через",
            element_styles_check_style_high: "Выделять",
            element_styles_check_style_high_color: "Цвет выделения",
            element_styles_bullet_disc: "Диск",
            element_styles_bullet_circle: "Круг",
            element_styles_bullet_square: "Квадрат",
            element_styles_todo_style: "Квадрат",
            element_styles_line_style: "Стиль линии",
            element_styles_line_style_solid: "Сплошная",
            element_styles_line_style_dashed: "Пунктирная",
            element_styles_todo_style_circle: "Круг",
            element_styles_quote_style_top: "Линия верха",
            element_styles_quote_style_single: "Линия слева",
            element_styles_quote_style_quote: "Цитата",
            element_styles_first_indent: "Отступ первой строки",
            element_styles_paragraph: "Текст",
            element_styles_head_1: "Заголовок 1",
            element_styles_head_2: "Заголовок 2",
            element_styles_head_3: "Заголовок 3",
            element_styles_head_4: "Заголовок 4",
            element_styles_head_5: "Заголовок 5",
            element_styles_head_6: "Заголовок 6",
            element_styles_indent: "Отступ",
            element_styles_indent_none: "Никто",
            element_styles_border: "Граница",
            element_styles_offset: "Компенсировать",
            element_styles_quote_style: "Стиль цитаты",
            element_styles_list_style: "Стиль списка",
            element_styles_bulleted_list: "Маркированный список",
            element_styles_numbered_list: "Числовой список",
            element_styles_todo_list: "Список дел",
            element_styles_quote: "Цитировать",
            element_styles_text: "Стиль текста",
            element_styles_spacing: "Интервал",
            element_styles_spacing_line: "Межстрочный",
            element_styles_spacing_after: "После абзаца",
            element_styles_spacing_before: "Перед абзацем",
            statistics: "Статистика",
            statistics_recently: "Недавно",
            statistics_total: "Всего",
            statistics_recently_goal_day: "д",
            statistics_recently_date_formatter: "MMM YYYY",
            statistics_recently_date_sat: "Сб.",
            statistics_recently_last_month: "Последние 30 дней:",
            statistics_recently_words: "Добавлены слова",
            statistics_recently_card: "Новые карты",
            statistics_recently_modified_contents: "Измененное содержимое:",
            statistics_total_since: "Со времени",
            statistics_total_install_time_label: "Дата установки Lattics",
            statistics_total_have_written: "Ты написал:",
            statistics_total_all:
                "Итого: (включая восстановление или синхронизацию)",
            statistics_total_words: "Слова",
            tutorial: "Руководство",
            tutorial_url:
                "https://helps.auramarker.com/en/lattics/backup_and_sync",
            pretty_time_1_day_ago: "1 день назад",
            pretty_time_1_hour_ago: "1 час назад",
            pretty_time_1_minute_ago: "1 минуту назад",
            pretty_time_just_now: "Сейчас",
            pretty_time_n_days_ago: "{0} дней назад",
            pretty_time_n_hours_ago: "{0} часа назад",
            pretty_time_n_minute_ago: "{0} минут назад",
            setting: "Настройки",
            settings: "Настройки",
            account_settings: "Настройки аккаунта",
            appearance: "Появление",
            pref_lang: "Языки",
            editor_preference: "Предпочтения редактора",
            backup: "Резервное копи и синхрони",
            pref_update: "Обновлять",
            feedback: "Обратная связь",
            about_us: "О нас",
            hi_lattics_pro: "Привет, Lattics Pro",
            not_a_member: "Нет аккаунта?",
            already_a_member: "Уже есть членство?",
            sign_out: "Выйти",
            sign_up: "Авторизоваться",
            delete_account: "Удалить аккаунт",
            account_delete_confirm: "Обязательно ли удалять аккаунт?",
            account_delete_confirm_message:
                "Обратите внимание, что эта операция полностью удалит вашу учетную запись, а данные нельзя будет восстановить, поэтому сделайте резервную копию или экспортируйте свои данные заранее.",
            delete_account_need_re_signin:
                "Пожалуйста, войдите снова, чтобы удалить свою учетную запись.",
            membership_cancel_renew: "Отменить автоматическое продление",
            membership_expiration_info: "Срок действия членства истекает в {0}",
            membership_will_renew: "Членство будет продлено в {0}",
            theme_light: "Светлый",
            theme_dark: "Темный",
            theme_system: "Чернила",
            theme_klein_blue: "Клейн Блю",
            theme_pantone_red: "Пантон Красный",
            theme_tiffany_green: "Тиффани Грин",
            theme_hermes_brown: "Гермес Браун",
            theme_silver: "Серебро",
            theme_midnight_blue: "Темно-синий",
            theme_dark_rose: "Темная роза",
            theme_marrs_green: "Маррс Грин",
            theme_ink: "Чернила",
            pref_editor_font: "Шрифт по умолчанию",
            pref_editor_latin_font: "Латинский шрифт",
            pref_editor_asian_font: "Азиатский шрифт",
            pref_editor_font_size: "Размер шрифта",
            pref_editor_spellcheck: "Проверка орфографии",
            pref_editor_markdown: "Включить синтаксис Markdown",
            pref_editor_context_menu: "Включить всплывающее меню",
            backup_before: "Устанавливать путь резервного копия для Lattics",
            backup_choose_folder: "Выберите папку",
            pref_backup_path: "Путь резервного копия:",
            config_unset: "Не задано",
            change_backup_dir: "Изменить путь резервного копия",
            open_dir: "Открыть каталог",
            backup_now: "Резервное копирование сейчас",
            backup_restore: "Восстановление резервной копии",
            backup_enable_auto: "Включить автоматическое резервное копирование",
            backup_history: "История резервного копирования",
            size: "Размер",
            backup_restore_from: "Восстановить из этой резервной копии",
            interval: "Интервал",
            every_day: "Каждый день",
            every_week: "Каждую неделю",
            pref_update_lasted: "Ваши Lattics обновлены",
            pref_update_version: "Версия приложения",
            pref_update_check: "Проверить обновление",
            pref_update_checking: "Проверка",
            new_update_available: "Доступно новое обновление",
            version_number: "Версия: {0}",
            update_now: "Обновить сейчас",
            auto_update_relaunch: "перезапустить",
            feedback_placeholder:
                "Пожалуйста, оставьте нам свои предложения или идеи",
            update_logs: "Отправить журналы выполнения",
            update_logs_desc: "Он используется только для устранения неполадок",
            pref_terms_of_service: "Условия использования",
            terms_of_service_link:
                "https://lattics.zineapi.com/en-US/terms_of_service",
            pref_privacy_policy: "политика конфиденциальности",
            pref_about_us_other_prod: "Другие наши приложения",
            pref_about_us_more: "Узнать больше",
            pref_about_us_zine:
                "Красивое мобильное приложение для заметок и письма",
            pref_about_us_varlens: "DSLR в телефоне",
            sign_in: "Авторизоваться",
            sign_in_migration_check_desc:
                "Перенесите содержимое, созданное без входа в систему, в учетную запись для входа.",
            data_merging: "Объединение данных...",
            register_inform:
                "Вход означает, что вы согласны с нашими {0} и {1}.",
            privacy_policy: "Политика конфиденциальности",
            privacy_link: "https://lattics.zineapi.com/en-US/privacy-policy",
            signin_err_email_invalid:
                "Пожалуйста, введите действительный адрес электронной почты",
            signin_err_email_not_exists:
                "Этот адрес электронной почты не зарегистрирован.",
            signin_err_email_not_verified: "Адрес эл почты не подтвержден",
            signin_err_invalid_password: "Неверный пароль",
            signin_err_password_length: "Минимум 6 символов",
            forget_password: "Забыли пароль?",
            enter_your_account_email:
                "Введите адрес электронной почты вашей учетной записи",
            enter_the_code: "Введите код подтверждения",
            enter_the_code_sent_to:
                "Код подтверждения отправлен по адресу: {0}",
            code_empty: "Код пустой!",
            invalid_verify_code: "Неверный код подтверждения",
            reset_password: "Сброс пароля",
            enter_new_password: "Введите новый пароль",
            enter_a_new_password: "Введите новый пароль",
            repeat_password: "Повторите пароль",
            tow_passwords_not_match: "Два пароля не совпадают",
            now_you_can_use_the_new_password:
                "Теперь вы можете войти с новым паролем",
            welcome_aboard: "Добро пожаловать на борт",
            welcome_back: "Добро пожаловать",
            go_to_sign_in: "Перейти к входу",
            go_back: "Возвращаться",
            signup_email_exists: "Адрес электронной почты уже существует",
            err_unknown: "Неизвестная ошибка",
            err_username_characters:
                "Имя пользователя может содержать только буквы, цифры, символы подчеркивания и точки",
            err_username_empty: "Имя пользователя не может быть пустым",
            err_username_exist: "Имя пользователя уже занято",
            err_username_length_range:
                "Пожалуйста, введите имя пользователя от {0} до {1} символов",
            err_email_exist: "Эл адрес уже существует",
            err_email_invalid: "Адрес электронной почты недействителен",
            change_plan: "Изменить план",
            purchase: "Покупка",
            purchase_pro_desc:
                "Добро пожаловать на покупку членства в Lattics Pro, вы можете пользоваться всеми его функциями и поддерживать нас, чтобы постоянно улучшать его.",
            feature_documents_in_project: "Документы в проекте",
            feature_knowledge_graph_nodes: "Узлы графа знаний",
            feature_export_custom_layout: "Индивидуальный шаблон стиля",
            feature_text_md_doc_export: "Экспорт TXT/MD",
            feature_export_image_and_pdf: "Экспорт PDF/DOCX/изображения",
            feature_goal_and_statistic: "Цель и статистика",
            feature_theme: "Индивидуальные темы",
            feature_flashcard: "Статистика по карточкам и Эббингауз",
            unlimited: "Неограниченный",
            purchase_free_trail: "{}-дней пробной",
            purchase_monthly: "Ежемесячный План",
            purchase_mas_monthly: "Ежемесячный План",
            purchase_yearly: "Годовой План",
            purchase_mas_yearly: "Годовой План",
            years: "Годы",
            purchase_save: "Уменьшать",
            yearly_price_avg: "12 месяцев в {0}/мес.",
            purchase_restore: "Восстановить покупку",
            purchase_inform: "Автоматическое продление, отмена в любое время",
            purchase_unsubscription_desc:
                "Вы можете перейти в настройки учетной записи, чтобы управлять подпиской и отменить подписку после покупки. Конкретный путь: «Настройки» -> Apple ID -> Медиа и покупка -> Подписка.",
            choose_payment_method: "Выберите метод оплаты",
            total: "Всего",
            congratulations: "Поздравления!",
            you_are_now_a_member: "Вам сейчас {}",
            payment_succeed: "Оплата прошла успешно?",
            payment_succeed_desc:
                "Если вы завершили платеж, нажмите кнопку «Да», чтобы обновить",
            not_yet: "Еще нет",
            yes: "Да",
            payment_state_not_change:
                "Статус заказа не изменился, пожалуйста, подтвердите, прошла ли оплата успешно, или повторите попытку позже ",
            purchase_user_reviews_briefly_Drlcm: "Это уникально",
            purchase_user_reviews_content_Drlcm:
                "На самом деле мне очень понравилось использовать это для организации длинного документа. Это замечательная идея, не похожая ни на что другое, что я видел.",
            purchase_user_reviews_briefly_Drjimmoore: "Хороший потенциал !",
            purchase_user_reviews_content_Drjimmoore:
                "Что мне очень нравится, так это рабочий процесс. От записи на карточках с правой стороны до размещения карточек в списке статей с левой стороны",
            purchase_user_reviews_briefly_UltimateMac:
                "Это приложение делает написание действительно увлекательным",
            purchase_user_reviews_content_UltimateMac:
                "Приложение, выходящее за рамки традиционных инструментов письма, с нетрадиционным функциональным дизайном, отличным дизайном интерфейса и компоновкой, а также передовой эстетикой. А моя любимая библиотека карточек с функцией перетаскивания делает написание очень увлекательным.",
            purchase_user_reviews_briefly_Visesen: "Выглядит очень хорошо",
            purchase_user_reviews_content_Visesen:
                "Разработка выглядит очень хорошо. Кроме того, разработчики быстро реагируют на отзывы.",
        },
        kr: {
            _key: "kr",
            _name: "한국인",
            colon: ": ",
            project: "프로젝트",
            projects: "프로젝트",
            article: "기사",
            articles: "기사",
            card: "카드",
            cards: "카드",
            all_cards: "모든 카드",
            tag: "태그",
            tags: "태그",
            file: "파일",
            all_files: "모든 파일",
            folder: "폴더",
            cancel: "취소하다",
            change: "바꾸다",
            continue: "계속하다",
            delete: "삭제하다",
            delete_confirm: "이 항목을 삭제하시겠습니까?",
            edit: "편집하다",
            loading: "로드 중...",
            remove: "빼다",
            rename: "이름 바꾸기",
            reset: "초기화",
            save: "저장",
            submit: "제출하다",
            update: "업데이트",
            upgrade: "업그레이드",
            upgrade_now: "지금 업그레이드",
            uploading: "업로드 중",
            created_at: "생성됨",
            modified_at: "수정된",
            default: "디폴트",
            more: "더",
            ok: "승인",
            success: "성공",
            untitled: "무제",
            done: "완료",
            ignore: "무시하다",
            load_more: "더 불러오기",
            link_add_placeholder: "링크 입력 또는 붙여넣기",
            image_caption_placeholder: "이미지 캡션 입력(선택사항)",
            about: "대해",
            close: "닫다",
            copy: "베끼다",
            cut: "자르다",
            help: "돕다",
            hide: "숨다",
            hide_others: "다른 사람 숨기기",
            homepage: "홈페이지",
            minimize: "최소화",
            open_main_window: "기본 창",
            paste: "붙여넣기",
            paste_as_text: "일반 텍스트로 붙여넣기",
            preferences: "선호",
            quit: "그만두다",
            redo: "다시 하다",
            reload: "재장전하다",
            reset_zoom: "줌 재설정",
            select_all: "모두 선택",
            toggle_dark_mode: "다크 모드",
            toggle_full_screen: "전체 화면",
            undo: "실행 취소",
            unhide: "숨기기 해제",
            view: "전망",
            window: "창문",
            zoom: "줌",
            zoom_in: "확대",
            zoom_out: "축소",
            walk_through_home_title: '"두뇌 같은"\n지식 관리 노트',
            walk_through_home_sub_title:
                "인간 지식 증대,  지식 생성 효율성 향상",
            walk_through_next: "다음",
            walk_through_prev: "이전",
            walk_through_done: "완료",
            walk_through_slide_one_title: "생각을 카드 라이브러리에 저장",
            walk_through_slide_two_title: "마인드맵과 같은 프로젝트 개요",
            walk_through_slide_three_title: "드래그 가능한 블록 요소",
            walk_through_slide_four_title:
                "오프라인 우선, 전체 라이브러리 백업",
            walk_through_slide_five_title: "문서를 내보내는 다양한 방법",
            new_project: "새 프로젝트",
            change_icon: "아이콘 변경",
            new_document: "새로운 기사",
            new_article: "새로운 기사",
            duplicate: "복제하다",
            merge_selected_docs: "기사 병합",
            merge_selected_docs_as_new: "새 문서로 병합",
            merge_docs_fail: "기사 병합 실패",
            delete_n_items: "{0} 항목 삭제",
            continue_read: "순차적으로 읽기",
            editor_input_placeholder: "무언가를 쓰거나 '/'를 입력하십시오.",
            tooltip_extension_info: "확장 정보",
            tooltip_standalone_window: "독립 실행형 창에서 편집",
            tooltip_article_comparison: "이중 기사 비교",
            split_vertical: "수직의",
            split_horizontal: "수평의",
            tooltip_split_article: "기사 분할하기",
            words: "단어 수",
            characters: "문자 수",
            words_count: "단어 수",
            words_count_characters: "문자 수",
            words_count_characters_without_spaces: "공백없이",
            words_count_asian: "아시아 문자",
            words_count_asian_non: "비 아시아 단어",
            words_count_punctuations: "문장 부호",
            words_count_paragraphs: "단락",
            cite: "인용하다",
            cited: "인용",
            cite_target_not_found: "이 인용문을 찾을 수 없습니다",
            cancel_cited: "인용 취소",
            change_display_name: "표시 이름 변경",
            full_cite: "전체 인용",
            title_cite: "제목 인용",
            display_name: "이름 표시하기",
            turn_to_card: "카드로 변신",
            link_to: "다음으로 연결",
            cite_filter_none: "일치하는 레코드 없음",
            create_or_search_cite: "인용 생성 또는 검색",
            press_enter_add_cite: '"엔터"를 눌러',
            add_one: "추가하려면",
            create_one: "만들기",
            create_or_search_footnote: "각주 만들기 또는 검색",
            add_a_comment: "의견을 추가하다",
            comment: "논평",
            footnote: "각주",
            create_table_from: "테이블 만들기",
            create_tags: "태그 만들기",
            file_nonexistent: "파일이 존재하지 않습니다",
            file_open: "열기 위해",
            file_open_by_other: "다른 앱에서 열기",
            file_path: "로컬 경로",
            file_size: "크기",
            font_family: "폰트",
            font_size: "글꼴 크기",
            font_color: "글꼴 색상",
            highlight_color: "강조 색상",
            copy_link: "링크 복사",
            align: "정렬",
            indent: "들여쓰기",
            d_indent: "들여쓰기 해제",
            line_height: "줄 간격",
            width: "너비",
            layout: "레이아웃",
            clear_style: "스타일 삭제",
            left: "왼쪽",
            right: "오른쪽",
            center: "센터",
            justify: "양쪽 맞춤",
            turn_to: "로 전환",
            turn_to_block_code: "블록 코드로 전환",
            line_space_normal: "정상",
            line_space_double: "더블",
            unsorted: "정렬되지 않음",
            sort: "정렬하다",
            sort_mode_modified: "수정된 날짜",
            sort_mode_created: "생성 일자",
            sort_mode_char_code_inc: "A-Z",
            sort_mode_char_code_sub: "Z-A",
            tag_mode_filter: "필터",
            tag_mode_filter_sub: "모든 하위 태그",
            trashcan: "쓰레기통",
            trashcan_empty: "비우다",
            trashcan_put_back: "다시 집어 넣어",
            trashcan_delete_confirm: "이 항목을 영구적으로 삭제하시겠습니까?",
            trashcan_empty_confirm: "휴지통을 비우시겠습니까?",
            trashcan_err_item_not_exist: "항목이 존재하지 않습니다",
            trashcan_err_path_not_exist: "경로가 존재하지 않습니다",
            trashcan_err_project_not_exist: "프로젝트가 존재하지 않습니다",
            export: "수출하다",
            export_article: "기사 내보내기",
            export_image: "이미지로 내보내기",
            export_image_loading: "이미지 내보내기",
            export_image_size: "이미지 크기",
            export_notes: "노트",
            export_pdf: "PDF로 내보내기",
            export_pdf_basic: "기초적인",
            export_pdf_advance: "고급의",
            export_pdf_page_comment: "코멘트",
            export_pdf_page_footnote: "각주 내보내기",
            export_pdf_page_footnote_pos: "각주 위치",
            export_pdf_page_footnote_pos_article: "문서의 끝",
            export_pdf_page_footnote_pos_page: "페이지 하단",
            export_pdf_page_show_page_number: "페이지 번호 표시",
            export_pdf_page_loading: "PDF 내보내기",
            export_pdf_page_number: "페이지 번호",
            export_pdf_page_size: "페이지 크기",
            export_pdf_page_break: "페이지 나누기",
            export_project: "프로젝트 내보내기",
            export_type_image: "이미지",
            export_with_type: "내보내다 {}",
            page_n: "페이지 N",
            page_styles: "페이지",
            page_styles_align_left: "왼쪽",
            page_styles_align_center: "센터",
            page_styles_align_right: "오른쪽",
            page_styles_align_justify: "양쪽 맞춤",
            page_styles_footer: "바닥글",
            page_styles_footer_page_number: "페이지 번호",
            page_styles_footer_page_number_pos: "위치",
            page_styles_header: "머리글",
            page_styles_header_and_footer: "머리글과 바닥 글",
            page_styles_header_text_placeholder: "헤더 텍스트 입력",
            page_styles_page_margin: "페이지 여백",
            page_styles_page_margin_top: "상단",
            page_styles_page_margin_bottom: "아래쪽",
            page_styles_page_margin_left: "왼쪽",
            page_styles_page_margin_right: "오른쪽",
            table_of_contents: "목차",
            cover: "표지 및 목차",
            hierarchy_title: "계층 제목",
            slogan: '"두뇌와 같은" 지식 관리 노트',
            remove_lattics_logo: "Lattics 로고 제거",
            import: "가져오기",
            import_document: "문서 가져오기",
            attach_local_pdf: "로컬 PDF 첨부",
            metadata: "메타 데이터",
            metadata_add_author: "저자 추가",
            metadata_add_id: "ID 추가",
            metadata_item_type: "항목 유형",
            metadata_author: "저자",
            metadata_editor: "편집자",
            metadata_contributor: "기고자",
            metadata_translator: "번역가",
            metadata_reviewed_author: "검토된 저자",
            metadata_title: "표제",
            metadata_abstract: "초록",
            metadata_journal: "저널",
            metadata_publication: "발표",
            metadata_time: "시간",
            metadata_issue: "논쟁점",
            metadata_volume: "부피",
            metadata_page: "페이지",
            metadata_publisher: "발행인",
            metadata_series: "시리즈",
            metadata_doi: "DOI",
            metadata_pmid: "PMID",
            metadata_arxiv: "Arxiv",
            metadata_issn: "ISSN",
            metadata_isbn: "ISBN",
            metadata_url: "URL",
            metadata_keywords: "키워드",
            metadata_add_keywords: "키워드 추가",
            bibliography: "참고 문헌",
            addition_pin_to_right: "옆에 고정",
            addition_un_pin_to_right: "고정 해제",
            addition_add_tag: "태그 추가",
            addition_add_project: "프로젝트 추가",
            tag_deleted: "태그가 삭제되었습니다",
            addition_add_memo: "여기에 메모",
            addition_forward_link: "정방향 링크",
            addition_backward_link: "역방향 링크",
            unlink_mention: "연결된 아니",
            link: "링크",
            link_all: "모두 연결",
            addition_table_of_contents: "목차",
            item_created: "만들어진",
            item_last_modified: "마지막 수정",
            last_used: "마지막 사용",
            source_of_card: "카드 출처",
            search: "찾다",
            search_placeholder: "Lattics 에서 검색",
            searching: "수색...",
            search_show_all: "모두 보이기",
            no_matching_records: "일치하는 레코드 없음",
            search_find: "찾다",
            next: "다음",
            previous: "이전의",
            search_replace: "바꾸다",
            search_replace_all: "모두 다 바꿔",
            search_total: "{1} 개 기사에서 {0} 개의 결과",
            math_type: "수학 방정식",
            math_type_calculus: "계산법",
            math_type_character: "알파벳",
            math_type_elementary: "기초적인",
            math_type_function_and_set: " 함수 및 컬렉션",
            math_type_geometry: "기하학",
            math_type_text_mode: "LaTeX 구문",
            math_type_please_use_text_mode:
                "현재 입력에 대해 지원되지 않는 구문이 있을 수 있으며 일반 텍스트 모드를 사용하는 것이 좋습니다..",
            code_block: "코드",
            separator: "분리 기호",
            code_block_language: "프로그램 언어",
            table: "테이블",
            add_column_before: "앞에 열 추가",
            add_column_after: "뒤에 열 추가",
            add_row_before: "앞에 행 추가",
            add_row_after: "뒤에 줄 추가",
            delete_column: "열 삭제",
            delete_row: "행 삭제",
            goal: "목표",
            goal_deadline: "마감 시간",
            goal_choose_date: "날짜 선택",
            goal_today: "오늘",
            goal_left: "남은",
            goal_delayed: "지연",
            goal_words_target: "단어 수",
            goal_character_target: "문자 수",
            goal_not_set: "설정되지 않음",
            goal_written: "쓴",
            goal_rate: "완성된",
            goal_achieve: "성취하다",
            goal_achieved: "달성했다",
            focus_mode: "초점 모드",
            focus_mode_typewriter_mode: "타자기 모드",
            focus_mode_typewriter_mode_line: "라인에 집중",
            focus_mode_typewriter_mode_sentence: "문장",
            focus_mode_typewriter_mode_paragraph: "구절",
            focus_mode_typewriter_mode_none: "설정되지 않음",
            focus_mode_keyboard_sound: "키보드 사운드",
            project_opening: "프로젝트를 여는 중...",
            project_package: "프로젝트 패키지",
            project_package_info:
                "프로젝트의 모든 기사, 카드, 파일, 개요, 마인드맵, 인용, 각주, 메모, 태그 및 기타 완전한 정보를 독립형 파일로 패키징",
            project_package_save: "포장 프로젝트...",
            project_editors: "편집자",
            card_library: "카드",
            add_card: "카드 추가",
            card_deleted: "인용 {}이(가) 삭제되었습니다",
            graph: "그래프",
            graph_filter: "콘텐츠 필터",
            graph_sort_out: "자동 레이아웃",
            graph_sort_out_confirm: "자동 레이아웃을 사용하시겠습니까?",
            graph_view_mind_map: "마인드 맵",
            graph_view_plot_view: "이야기의 줄거리",
            graph_view_aerial_view: "조감도",
            graph_view_preview_node: "시사",
            graph_view_title_node: "제목",
            graph_view_memo_node: "메모",
            tag_hint: "태그 힌트",
            cite_graph: "인용 그래프",
            graph_node_copy_cite_link: "인용 링크 복사",
            graph_node_remove_from_project: "프로젝트에서 제거",
            graph_node_remove_from_tag: "태그에서 제거",
            graph_relation_link: "관계 링크",
            graph_drag_me: "나를 끌어",
            graph_upgrade_tip: "무료 노드 15개 초과",
            flashcard: "플래시 디스크",
            flashcard_filter: "필터",
            flashcard_filter_article: "기사",
            flashcard_filter_card: "카드",
            flashcard_filter_outline: "프로젝트 개요",
            flashcard_filter_extension: "확장 정보",
            flashcard_sort_mode_direct: "개요 순서",
            flashcard_sort_mode_inverse: "프로파일 순서 반전",
            flashcard_sort_mode_random: "임의적",
            flashcard_show_answer: "답변 표시",
            flashcard_show_question: "문제 표시",
            flashcard_next: "다음",
            flashcard_back: "반환",
            flashcard_complete: "마치다",
            flashcard_completed: "완전한",
            flashcard_empty_tip: "플래시 카드는 물건이나 카드에서 온다",
            flashcard_got_it: "마스터",
            flashcard_enhance: "향상시키다",
            flashcard_ebbinghaus: "Ebbinghaus",
            flashcard_statistics: "통계",
            flashcard_statistics_total_have: "당신은 이미:",
            flashcard_statistics_learned: "배운",
            flashcard_statistics_got_it: "마스터",
            flashcard_statistics_recently_learned: "최근에 배운 내용:",
            flashcard_question_type_default: "Q & A",
            flashcard_question_type_fill_in_the_blanks: "빈칸을 채워보세요",
            flashcard_question_type_choice: "객관식 질문",
            template: "주형",
            template_choose_template: "템플릿 선택",
            template_current_article: "현재 기사",
            template_current_project: "현재 프로젝트",
            template_modify_styles: "스타일 편집",
            template_setting_scope: "범위 설정",
            template_new: "새 템플릿으로 저장",
            template_reset: "스타일 복원",
            template_set_as_default: "기본값으로 설정",
            custom_style: "스타일 템플릿",
            element_styles_color: "색상",
            element_styles_color_default: "기본",
            element_styles_color_black: "검은색",
            element_styles_color_grey: "회색",
            element_styles_color_light_grey: "밝은 회색",
            element_styles_color_deep_blue: "진한 파랑",
            element_styles_color_blue: "파란색",
            element_styles_color_green: "녹색",
            element_styles_color_mars_green: "마스 그린",
            element_styles_color_dark_green: "짙은 녹색",
            element_styles_color_orange: "주황색",
            element_styles_color_brown: "갈색",
            element_styles_color_purple: "보라",
            element_styles_color_pink: "핑크",
            element_styles_color_red: "빨간색",
            element_styles_color_yellow: "노란색",
            element_styles_build_in_magazine: "잡지",
            element_styles_build_in_paper_thesis: "논문",
            element_styles_build_in_report: "보고서",
            element_styles_build_in_diary_notes: "일기 및 메모",
            element_styles_thickness: "두께",
            element_styles_number_style: "숫자 스타일",
            element_styles_bullet_style: "총알 스타일",
            element_styles_box_style: "박스 스타일",
            element_styles_check_style: "체크박스 스타일",
            element_styles_check_style_delete_line: "라인 스루",
            element_styles_check_style_high: "가장 밝은 부분",
            element_styles_check_style_high_color: "강조 색상",
            element_styles_bullet_disc: "디스크",
            element_styles_bullet_circle: "원",
            element_styles_bullet_square: "정사각형",
            element_styles_todo_style: "정사각형",
            element_styles_line_style: "선 스타일",
            element_styles_line_style_solid: "실선",
            element_styles_line_style_dashed: "점선",
            element_styles_todo_style_circle: "원",
            element_styles_quote_style_top: "상단 라인",
            element_styles_quote_style_single: "왼쪽 라인",
            element_styles_quote_style_quote: "인용",
            element_styles_first_indent: "첫 줄 들여쓰기",
            element_styles_paragraph: "텍스트",
            element_styles_head_1: "표제 1",
            element_styles_head_2: "표제 2",
            element_styles_head_3: "표제 3",
            element_styles_head_4: "표제 4",
            element_styles_head_5: "표제 5",
            element_styles_head_6: "표제 6",
            element_styles_indent: "톱니 모양",
            element_styles_indent_none: "설정되지 않음",
            element_styles_border: "국경",
            element_styles_offset: "오프셋",
            element_styles_quote_style: "견적 스타일",
            element_styles_list_style: "목록 스타일",
            element_styles_bulleted_list: "글머리기호 목록",
            element_styles_numbered_list: "숫자 목록",
            element_styles_todo_list: "할 일 목록",
            element_styles_quote: "인용하다",
            element_styles_text: "텍스트 스타일",
            element_styles_spacing: "간격",
            element_styles_spacing_line: "선",
            element_styles_spacing_after: "단락 뒤",
            element_styles_spacing_before: "단락 앞",
            statistics: "통계",
            statistics_recently: "최근에",
            statistics_total: "전체로",
            statistics_recently_goal_day: "낮",
            statistics_recently_date_formatter: "MMM YYYY",
            statistics_recently_date_sat: "토요일",
            statistics_recently_last_month: "지난 30일:",
            statistics_recently_words: "추가된 단어",
            statistics_recently_card: "새 카드",
            statistics_recently_modified_contents: "수정된 내용:",
            statistics_total_since: "부터 ",
            statistics_total_install_time_label: "Lattics 설치 날짜",
            statistics_total_have_written: "작성했습니다:",
            statistics_total_all: "합계: (복원 또는 동기화 포함)",
            statistics_total_words: "단어",
            tutorial: "지도 시간",
            tutorial_url:
                "https://helps.auramarker.com/en/lattics/backup_and_sync",
            pretty_time_1_day_ago: "1 일 전",
            pretty_time_1_hour_ago: "1 시간 전",
            pretty_time_1_minute_ago: "1분 전",
            pretty_time_just_now: "방금",
            pretty_time_n_days_ago: "{0}일 전",
            pretty_time_n_hours_ago: "{0}시간 전",
            pretty_time_n_minute_ago: "{0}분 전",
            setting: "설정",
            settings: "설정",
            account_settings: "계정 설정",
            appearance: "외모",
            pref_lang: "언어",
            editor_preference: "에디터 기본 설정",
            backup: "백업 및 동기화",
            pref_update: "업데이트",
            feedback: "피드백",
            about_us: "회사 소개",
            hi_lattics_pro: "안녕하세요, Lattics Pro",
            not_a_member: "계정이 없습니까?",
            already_a_member: "이미 회원이십니까?",
            sign_out: "로그아웃",
            sign_up: "로그인",
            delete_account: "계정 삭제",
            account_delete_confirm: "계정을 삭제하시겠습니까?",
            account_delete_confirm_message:
                "이 작업을 수행하면 계정이 완전히 삭제되고 데이터는 복구할 수 없으므로 미리 데이터를 백업하거나 내보내십시오.",
            delete_account_need_re_signin:
                "계정을 삭제하려면 다시 로그인하세요.",
            membership_cancel_renew: "자동 갱신 취소",
            membership_expiration_info: "멤버십은 {0}에 만료됩니다.",
            membership_will_renew: "멤버십은 {0}에 갱신됩니다",
            theme_light: "밝은",
            theme_dark: "어두운",
            theme_system: "체계",
            theme_klein_blue: "클라인 블루",
            theme_pantone_red: "팬톤 레드",
            theme_tiffany_green: "티파니 그린",
            theme_hermes_brown: "에르메스 브라운",
            theme_silver: "은",
            theme_midnight_blue: "자정 블루",
            theme_dark_rose: "다크 로즈",
            theme_marrs_green: "마르스 그린",
            theme_ink: "잉크",
            pref_editor_font: "기본 글꼴",
            pref_editor_latin_font: "스페인어 글꼴",
            pref_editor_asian_font: "한글글꼴",
            pref_editor_font_size: "글꼴 크기",
            pref_editor_spellcheck: "철자 검사",
            pref_editor_markdown: "Markdown 구문 활성화",
            pref_editor_context_menu: "팝업 메뉴 활성화",
            backup_before: "Lattics의 백업 경로를 설정하십시오.",
            backup_choose_folder: "폴더 선택",
            pref_backup_path: "백업 경로:",
            config_unset: "설정되지 않음",
            change_backup_dir: "백업 경로 변경",
            open_dir: "디렉토리 열기",
            backup_now: "백업 지금",
            backup_restore: "백업 복원",
            backup_enable_auto: "자동 백업 활성화",
            backup_history: "백업 기록",
            size: "크기",
            backup_restore_from: "이 백업에서 복원",
            interval: "간격",
            every_day: "매일",
            every_week: "E매주",
            pref_update_lasted: "Lattics가 최신 상태입니다.",
            pref_update_version: "앱 버전",
            pref_update_check: "업데이트 확인",
            pref_update_checking: "확인 중",
            new_update_available: "새로운 업데이트 가능",
            version_number: "버전: {0}",
            update_now: "지금 업데이트",
            auto_update_relaunch: "다시 시작하다",
            feedback_placeholder: "제안이나 아이디어를 저희에게 남겨주세요",
            update_logs: "런타임 로그 보내기",
            update_logs_desc: "문제 해결에만 사용됩니다.",
            pref_terms_of_service: "서비스 약관",
            terms_of_service_link:
                "https://lattics.zineapi.com/en-US/terms_of_service",
            pref_privacy_policy: "개인 정보 정책",
            pref_about_us_other_prod: "우리의 다른 앱",
            pref_about_us_more: "더 알아보기",
            pref_about_us_zine: "아름다운 메모 및 쓰기 모바일 앱",
            pref_about_us_varlens: "휴대폰 속 DSLR",
            sign_in: "로그인",
            sign_in_migration_check_desc:
                "비로그인 상태에서 생성된 컨텐츠를 로그인 계정으로 마이그레이션",
            data_merging: "데이터 병합...",
            register_inform: "로그인하면 {0} 및 {1}에 동의하는 것입니다.",
            privacy_policy: "개인 정보 정책",
            privacy_link: "https://lattics.zineapi.com/en-US/privacy-policy",
            signin_err_email_invalid: "유효한 이메일 주소를 입력하세요",
            signin_err_email_not_exists: "이 이메일은 등록되지 않았습니다.",
            signin_err_email_not_verified: "이메일이 확인되지 않았습니다.",
            signin_err_invalid_password: "유효하지 않은 비밀번호",
            signin_err_password_length: "최소 6자",
            forget_password: "비밀번호를 잊어 버렸습니까?",
            enter_your_account_email: "계정 이메일을 입력하세요",
            enter_the_code: "인증 코드를 입력하세요",
            enter_the_code_sent_to: "확인 코드는 {0}로 전송됩니다.",
            code_empty: "코드가 비어 있습니다!",
            invalid_verify_code: "잘못된 확인 코드",
            reset_password: "암호를 재설정",
            enter_new_password: "새 비밀번호를 입력하십시오",
            enter_a_new_password: "새 비밀번호를 입력하세요",
            repeat_password: "비밀번호 반복",
            tow_passwords_not_match: "두 비밀번호가 일치하지 않습니다",
            now_you_can_use_the_new_password:
                "이제 새 비밀번호로 로그인할 수 있습니다.",
            welcome_aboard: "탑승을 환영합니다",
            welcome_back: "다시 오신 것을 환영합니다",
            go_to_sign_in: "로그인으로 이동",
            go_back: "돌아가기",
            signup_email_exists: "이메일이 이미 존재합니다",
            err_unknown: "알수없는 오류",
            err_username_characters:
                "사용자 이름에는 문자, 숫자, 밑줄 및 점만 사용할 수 있습니다.",
            err_username_empty: "사용자 이름은 비워둘 수 없습니다.",
            err_username_exist: "사용자 이름이 이미 존재합니다",
            err_username_length_range:
                "{0}에서 {1}자 사이의 사용자 이름을 입력하세요.",
            err_email_exist: "이메일이 이미 존재합니다",
            err_email_invalid: "이메일 주소가 잘못되었습니다.",
            change_plan: "계획을 변경하다",
            purchase: "구입",
            purchase_pro_desc:
                "Lattics Pro 멤버십 구매를 환영합니다. 모든 기능을 즐기고 지속적으로 개선할 수 있도록 지원하세요.",
            feature_documents_in_project: "프로젝트의 문서 수",
            feature_knowledge_graph_nodes: "지식 그래프 노드 수",
            feature_export_custom_layout: "맞춤형 스타일 템플릿",
            feature_text_md_doc_export: "TXT/MD 내보내기",
            feature_export_image_and_pdf: "PDF/DOCX/이미지 내보내기",
            feature_goal_and_statistic: "목표 및 통계",
            feature_theme: "맞춤형 테마",
            feature_flashcard: "플래시카드 통계 및 Ebbinghaus",
            unlimited: "제한 없는",
            purchase_free_trail: "{}일 평가판",
            purchase_monthly: "월간 요금제",
            purchase_mas_monthly: "월간 요금제",
            purchase_yearly: "연간 요금제",
            purchase_mas_yearly: "연간 요금제",
            years: "년",
            purchase_save: "줄이다",
            yearly_price_avg: "12개월 {0}/월",
            purchase_restore: "구매 복원",
            purchase_inform: "자동 갱신, 언제든지 취소",
            purchase_unsubscription_desc:
                '계정 설정으로 이동하여 구독을 관리하고 구매 후 구독을 취소할 수 있습니다. 구체적인 경로는 "설정" -> Apple ID -> 미디어 및 구매 -> 구독입니다.',
            choose_payment_method: "결제 방법 선택",
            total: "합계",
            congratulations: "축하해요!",
            you_are_now_a_member: "당신은 지금 {}입니다",
            payment_succeed: "결제 성공?",
            payment_succeed_desc:
                "결제가 완료되었으면 '예' 버튼을 눌러 새로고침 해주세요.",
            not_yet: "아직 아님",
            yes: "예",
            payment_state_not_change:
                "주문 상태가 변경되지 않았습니다. 결제가 완료되었는지 확인하거나 나중에 다시 시도하십시오.",
            purchase_user_reviews_briefly_Drlcm: "매우 독특합니다",
            purchase_user_reviews_content_Drlcm:
                "나는 실제로 이것을 사용하여 긴 문서를 정리하는 것을 즐겼습니다. 그것은 훌륭한 아이디어이며 내가 본 다른 어떤 것과도 다릅니다.",
            purchase_user_reviews_briefly_Drjimmoore: "좋은 잠재력!",
            purchase_user_reviews_content_Drjimmoore:
                "내가 매우 좋아하는 것은 작업 흐름입니다. 오른쪽의 카드 쓰기에서 왼쪽의 기사 목록에 카드 넣기까지.",
            purchase_user_reviews_briefly_UltimateMac:
                "이 앱은 글쓰기를 정말 재미있게 만들어줍니다.",
            purchase_user_reviews_content_UltimateMac:
                "색다른 기능적 디자인, 뛰어난 인터페이스 디자인 및 레이아웃, 고급 미학으로 기존의 필기 도구를 능가하는 애플리케이션입니다. 그리고 제가 가장 좋아하는 끌어서 놓기 카드 라이브러리가 있으면 글쓰기가 훨씬 즐거워집니다.",
            purchase_user_reviews_briefly_Visesen: "아주 좋아 보인다",
            purchase_user_reviews_content_Visesen:
                "전개가 아주 좋아 보입니다. 또한 개발자는 피드백에 신속하게 응답합니다.",
        },
        "zh-CN": De,
        "zh-TW": Me,
    }

class Ie {
    constructor(e = "en") {
        ;(this.locale = void 0), (this.lang = void 0), (this.locale = e)
        const t = this
        this.lang = new Proxy({}, {get: (e, a) => t.trans(a)})
    }

    trans(e, t) {
        let a = Ee[this.locale],
            n = ""
        return (
            e in a && (n = a[e].toString()),
            t &&
            t.map((e, t) => {
                let a = new RegExp(`{s*${t}s*}`)
                n = n.replace(a, e.toString())
            }),
                n
        )
    }
}

const Le = async () => {
        let e = fe.app.getLocale()
        e &&
        (ye.info(`System locale: ${e}`),
            (e = e.toLowerCase()),
            e.startsWith("en")
                ? (e = "en")
                : e.startsWith("zh") &&
                (e = e.includes("tw") || e.includes("hk") ? "zh_tw" : "zh"),
            ye.info(`Will set locale to: ${e}`),
        ((e) => Object.keys(Ee).includes(e))(e) &&
        (global.system_locale = e))
    },
    Be = process.env.LAT_API_SERVER || "https://mid.zineapi.com",
    Oe = Be + "/@lattics",
    Re = process.env.CLIENT_ID || "lattics_desktop",
    Fe =
        process.env.CLIENT_SECRET ||
        "7vCivq499DwxsTrLDOaOiG1jn3NPN6w5fZIuIOU2SzIzkjQZOv2b9UZAo5rEz99cPu2X0yju2SMKW10RBtuKa1Lgbd3M3bWIvBu7lDgSj6mxpXcaqVqFZ9SpUpiIPcdo",
    qe = async (e) => (e || (e = await configGet("locale")), new Ie(e)),
    Ne = [1, 18, 0, 396],
    Ue = require("axios")
var Ge = modulex.fn(Ue)
const We = require("querystring")
var $e = modulex.fn(We)
const Ve = async (e, t = null, a = {}) => {
        e.match(/^https?:\/\//) || (e = `${Oe}${e}`),
            (t = {_r: Math.random(), ...t})
        try {
            return (
                await (async (e, t = null, a = {}) => {
                    let {lang: n} = await qe(),
                        i = ""
                    t && (i = $e().stringify(t)),
                    i && (e += (e.includes("?") ? "&" : "?") + i)
                    const r = {
                        "User-Agent": `${global.ua} Lattics/${Ne.join(".")}`,
                        "Accept-Language": n._key,
                    }
                    let o = {
                        timeout: a.timeout || 3e4,
                        headers: {...r, ...a.headers},
                    }
                    if (await configGet("use_proxy")) {
                        let e = await configGet("proxy_protocol"),
                            t = await configGet("proxy_host"),
                            a = await configGet("proxy_port")
                        t && a && (o.proxy = {protocol: e, host: t, port: a})
                    }
                    const s = Ge().create(o)
                    return ye.info(`GET ${e}`), await s.get(e)
                })(e, t, a)
            ).data
        } catch (_err) {
            return {
                success: !1,
                message: _err?.message || "error",
                code: _err?.code,
            }
        }
    },
    He = async (e, t, a = {}) => {
        ye.info(`POST ${e}`)
        let {lang: n} = await qe()
        const i = {
            "User-Agent": `${global.ua} Lattics/${Ne.join(".")}`,
            "Accept-Language": n._key,
        }
        let r = {timeout: a.timeout || 3e4, headers: {...i, ...a.headers}}
        if (await configGet("use_proxy")) {
            let e = await configGet("proxy_protocol"),
                t = await configGet("proxy_host"),
                a = await configGet("proxy_port")
            t && a && (r.proxy = {protocol: e, host: t, port: a})
        }
        const o = Ge().create(r)
        return await o.post(e, a.is_form ? $e().stringify({...t}) : t)
    },
    Ye = async (e, t, a = {}) => {
        e.match(/^https?:\/\//) || (e = `${Oe}${e}`)
        try {
            return (await He(e, t, a)).data
        } catch (_err) {
            return (
                console.log(_err),
                    {
                        success: !1,
                        message: _err?.message || "error",
                        code: _err?.code,
                    }
            )
        }
    },
    Je = require("compare-versions")
var Ke = modulex.fn(Je)
const Ze = "1575605022"

async function checkUpdate(e, t = 60) {
    const a = Date.now(),
        n = await globalKvGet("last_check_update_time_ms")
    if ("number" == typeof n && a - n < 1e3 * t) return
    await globalKvSet("last_check_update_time_ms", a)
    let i = "US",
        r = "en_us"
    ;["zh", "zh-CN"].includes(e)
        ? ((i = "CN"), (r = "zh_cn"))
        : ["zh_tw", "zh-TW", "zh-HK"].includes(e)
            ? ((i = "TW"), (r = "zh_tw"))
            : "jp" === e
                ? ((i = "JP"), (r = "ja_jp"))
                : "kr" === e
                    ? ((i = "KR"), (r = "ko_kr"))
                    : "en" !== e &&
                    ((i = e.includes("-")
                        ? e.split("-")[1].toUpperCase()
                        : e.toUpperCase()),
                        (r = e.toLowerCase()))
    const o = `https://itunes.apple.com/lookup?id=${Ze}&country=${i}&lang=${r}`
    "win32" === process.platform && (await autoUpdateCheck())
    let s = await Ve(o)
    if (s?.errorMessage?.startsWith("Invalid value(s) for key(s)")) {
        ye.error("checkUpdateFromMAS: invalid locale, use default value"),
            (i = "US"),
            (r = "en_us")
        const e = `https://itunes.apple.com/lookup?id=${Ze}&country=${i}&lang=${r}`
        s = await Ve(e)
    }
    if (!s || !s.results || !s.results.length)
        return void ye.error("checkUpdateFromMAS: fail!", s)
    let l = s.results[0]
    if ("object" != typeof l) return
    let {version: c, releaseNotes: d} = l
    if (!c || !d) return
    ye.info("MAS version:", c)
    let _ = await globalKvGet("skip_version")
    if (t > 0 && _ && Ke()(c, _) <= 0)
        return void ye.info("checkUpdateFromMAS: skip version", c)
    if (Ke()(c, Ne.join(".")) <= 0) return
    let m = ""
    ;(m =
        "darwin" === process.platform
            ? `https://apps.apple.com/app/id${Ze}`
            : "https://lattics.zineapi.com/"),
        be("app_update_available", {
            version: c,
            releaseNotes: d,
            update_link: m,
        })
}

const Xe = async () => {
        let e = await configGetLocale()
        await checkUpdate(e)
    },
    et = require("node-rsa")
var tt = modulex.fn(et)
const at = require("crypto")
var nt = modulex.fn(at)
const it = new (tt())(
        "MIIEpAIBAAKCAQEA5BdGxfMo/heHaZIHcyOIA026Rx0jCKolWBvptAps40od0AbT\n+kxPc3FT8bqJ/VAtTLWHN5LwUr/9U4Y84FARaN4PFrGFEOb59MgEHru5kyWjqnLL\ns7EeNY4REzbx0Vhb86LEeNALKbhhG3NryM6vkohllMqGN2dozdEcZ/9zwUL4qTjl\n0lL4W25JAmHCCrw5vGKPtHFmBRJFO57xsCHGE3dJzNjTJb1mRRK8WEBckhyLt06z\nACYAg7C+88u90Sk9Q3091vL3Ym69j14atbAsZ0eu2F9/oQEU4O1ALr4VAHI0/HTi\nNN/sqjKp0zIyAkdqThkhNPhCrQdSYSW1GLlC4wIDAQABAoIBAAMCr6NzNypLYzUo\ngUKqyGPKxdekcc7ud/m2vJnsvU0usEALpwaZtT6/0yzQmnumcEKf7r30CYn+ELjm\nf60yQViR/b797tSvR8NMVImXTra7e3KHe1rOzqhETMNlKUHrGaOYlWFG1a7iSR3U\noyqOV9DmTfjtx2G50q9MwEQ7Ier+Eeh3VjJ8oA3tInReQdLEmDb+dyIqKfrYruQL\nBTWTawLCNRe4ok8eo7j0XsXV4CE88dcqSNGUI8G+Kja9LCI46WLqyq5mZz2aQO9V\ni9nJ6zlRu1Ah6kXkm5nb3R9aZz34Y2zQY+OITOgzNtD6A5OYAQCeCwzDxZvHg5NV\nR7nmR6ECgYEA5CrygY0+M7+VfHNf/dD0yMWcf6PgX17GUjzqcXwP2JcGRc9p88VV\n417FqKQC7ksO729wn24fz5pUKhmK6pguKrurA1KUZ7mU5+q2GZght0UI659JT655\nPNE+3VYoibc6hJZEiN8V1lXvwm7FbqAuf+vpw8ID+TEb2z6X3v2McFECgYEA/+nu\nAEoqNmNDhpCSbmRF0ZEPa+t7+HDUKmtYrjIb0QWzDqpZ2dOLqhXsFbcB9E+dH/KY\niDd5g4R27yWbbLStDnAXmcHnGioJUvQgG1su3FnlyhH0CFirghi33Lb8XB5p4lr/\nTv/oJPqNLvTmiE78CBdLlEHg8IjnzxQYUz3MxvMCgYEAzxAWofFfOLEt5RIDVCFU\nc/u56a/7yDEHQ8yaakDPVJzCCYqQubQlHMF+GWw2aLDfLfVxPI5A+jMxHD+v7PQM\nOaW0LcC8g2FMvCcp+RIxztMspEAa1OAekE3Igi9VfJ020upX6eqiM7ArdMT4EUv2\nxwp+S7P/zR5/DDnCs5Bf6fECgYAKFxcjO8leS5ul+p1LbPizwpxxDN/ec9Rpt8HP\nXHpsS2U79suEIysmkaa1VHnnQBxZ3h7VgBpybQ6jb0ApkRYhs5m6nkKWbYHgm2+I\npJe8aG7/AKY2jgh1ILRfJ3fbyfcyzZOzcbOdgaN/bniId1TInOKF/fL4iO1a5Nfw\nsEcasQKBgQDRUt2bPxkFxky7FJPNR+PL/g4iIw4EzxDi5gh9Udui3ScTa6Lk4EQ4\ngIlXXq/bfpp5J8wVfhbaEzc387iul7uDbVb68kID0JIbEoDxty+o3LiTUAi8/CLL\naQfBR3pbVAutSkeKa1v2btvdt7uVzejRvQUtYtS/HV4+uRYeHh0bLg==",
        "pkcs1-private-pem",
        {
            encryptionScheme: {
                scheme: "pkcs1",
                padding: at.constants.RSA_PKCS1_PADDING,
            },
        },
    ),
    rt = {},
    ot = {}

async function st(e) {
    let t = le().join(ca(), "lat_ac"),
        a =
            ((n = JSON.stringify(e)),
                new Buffer.from(n)
                    .toString("base64")
                    .split("")
                    .map((e) => (rt.hasOwnProperty(e) ? rt[e] : e))
                    .join(""))
    var n
    await ae().promises.writeFile(t, a), ye.info(`dumpData to: ${t}`)
}

async function lt() {
    let e = le().join(ca(), "lat_ac")
    if (!ae().existsSync(e)) return null
    let t = await ae().promises.readFile(e)
    try {
        return JSON.parse(
            (function (e) {
                let t = e
                    .split("")
                    .map((e) => (ot.hasOwnProperty(e) ? ot[e] : e))
                    .join("")
                return (t = new Buffer.from(t, "base64").toString()), t
            })(t.toString()),
        )
    } catch (_err) {
        return null
    }
}

async function accountGetInfoFromServer(e = !1) {
    if (!global.access_token) return {success: !1, code: "no_token"}
    const t = global.access_token
    try {
        const n = Math.random().toString(36).substr(2)
        let i = await Ve(
            "/api/user/info/v3",
            {uuid_code: n},
            {headers: {Authorization: `Bearer ${global.access_token}`}},
        )
        if (
            (ye.info(
                "main/actions/account/getInfoFromServer.ts",
                JSON.stringify(i, null, 2),
            ),
            t !== global.access_token)
        )
            return {
                success: !1,
                code: "no_token",
            }
        if (i.success) {
            try {
                if (i.data && i.data.content) {
                    const {
                        uid: e,
                        uuid_code: t,
                        membership_role_name: r,
                        membership_end_time: o,
                        membership_end_time_ms: s,
                    } = ((a = i.data.content), it.decrypt(a, "json"))
                    ye.info("time", t),
                        (i.data.content = void 0),
                        (i.data.uid = e),
                        n !== t
                            ? (i.data.membership = null)
                            : i.data.membership &&
                            ((i.data.membership.role_name = r),
                                (i.data.membership.end_time = o),
                                (i.data.membership.end_time_ms = s))
                }
            } catch (_err) {
                ye.error("main/actions/account/getInfoFromServer.ts desc", _err)
            }
            ;(global.account_info = i.data),
                (global.uid = i.data.is_guest ? "guest" : i.data.uid),
                (global.is_guest = i.data.is_guest),
                localKvDelete("LAST_FAIL_UPDATE_USER_INFO").catch(console.log)
        } else {
            const e = await dt()
            if (e) return {success: !0, data: e}
        }
        return e && _t(i), i
    } catch (_err) {
        ye.error("main/actions/account/getInfoFromServer.ts", _err.message),
            ye.error(`response status: ${_err.response.status}`)
        const t = await dt()
        if (t) return {success: !0, data: t}
        let a = "unknown"
        return (
            _err.response && 401 === _err.response.status && (a = "not_login"),
                {success: !1, code: a}
        )
    }
    var a
}

async function dt() {
    ye.info("get info failed handleLastFailUpdateUserInfo")
    try {
        if (
            "basic" !== (global.account_info?.membership?.role_name ?? "basic")
        ) {
            const e = new Date().getTime()
            if (
                global.account_info?.membership?.end_time_ms &&
                global.account_info?.membership?.end_time_ms < e
            )
                return (
                    ye.info("Long time to not login and membership expired"),
                    global.account_info &&
                    (global.account_info.membership = null),
                        setTimeout(() => {
                            be("force_refresh_account_info", "basic")
                        }, 100),
                        global.account_info
                )
            ye.info("membership ok")
        }
    } catch (_err) {
        ye.error(_err)
    }
}

"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
    .split("")
    .map((e, t) => {
        let a =
            "wJvBd9qYgE45WCZloHhFLcimPNtrjk82yDG3QTnfe1IUVzOsupaXMKA67xRS0b".substr(
                t,
                1,
            )
        ;(rt[e] = a), (ot[a] = e)
    })
const _t = async (e) => {
    let t = await lt(),
        a = t?.token?.access_token
    if (a && e.success) {
        const a = e.data,
            n = a?.membership?.role_name
        n && "basic" !== n && ((t = t || {}), (t.info = a), await st(t))
    }
}

async function mt() {
    let e = await lt()
    ye.info(`local account_data: ${JSON.stringify(e, null, 2)}`),
        (global.uid = e?.info?.is_guest ? "guest" : e?.info?.uid || "guest"),
        (global.account_info = e?.info)
    let t = e?.token
    if (t) {
        let {expires_at_ms: a, expires_in: n, refresh_token: i} = t,
            r = !1
        if (a) {
            let e = Date.now()
            if (e + 1e3 * n * 0.25 > a) {
                const t = e > a
                await accountRefreshToken(i).catch((e) => {
                    if ((ye.error(e), t)) return accountSignOut()
                }),
                    (r = !0)
            }
        } else
            await accountRefreshToken(i).catch(
                (e) => (ye.error(e), accountSignOut()),
            ),
                (r = !0)
        r && ((e = await lt()), (t = e?.token))
    }
    ;(global.access_token = t?.access_token),
        (global.uid = e?.info?.is_guest ? "guest" : e?.info?.uid || "guest"),
        (async function (e) {
            let t = e?.token?.access_token
            if ((ye.info("-> getLatestInfoFromServer() :access_token:", t), !t))
                return void ye.info("getLatestInfoFromServer: no access_token")
            let a = !1,
                n = null,
                i = ""
            try {
                let e = await accountGetInfoFromServer()
                e.success
                    ? ((n = e.data), (a = !0), be("refresh_account_info"))
                    : (i = e.code)
            } catch (_err) {
                return (
                    ye.error("getLatestInfoFromServer:", _err.message),
                        void ye.error(_err.response.status)
                )
            }
            if (a && n) return ((e = e || {}).info = n), void (await st(e))
            ye.error(
                "getLatestInfoFromServer:",
                "用户信息获取失败，不登出当前账号，登出只能手动或者证书超过60天",
            )
        })(e).catch((e) => ye.error(e))
}

function pt(e, t) {
    if (!e || !t || !t.content) return []
    const a = [],
        n = [t]
    for (; n.length;) {
        const t = n.pop()
        t.type !== e
            ? t.content &&
            t.content.forEach((e) => {
                n.unshift(e)
            })
            : a.push(t)
    }
    return a
}

async function ut() {
    try {
        const e = Date.now(),
            t = await ua()
        let a = await t.collection.items.all()
        for (let e = 0; e < a.length; e++) {
            const t = a[e]
            "object" == typeof t.content &&
            pt("inlineCitation", t.content).map((e) => e.attrs.citeId)
                .length &&
            (await updateForwardsCites(t.id, null, !0))
        }
        ye.info("generateCiteRelationsIfNecessary cost: ", Date.now() - e)
    } catch (_err) {
        ye.error("generateCiteRelationsIfNecessary Error: ", _err?.message)
    }
}

async function ht(e) {
    try {
        const t = await ua()
        let a = await t.list.card_ids.all()
        if ((console.log("normalizeDocItems start"), a.length))
            for (let t = 0; t < a.length; t++) e.update(a[t], {rawType: "card"})
        console.log("normalizeDocItems end")
    } catch (_err) {
        console.log("normalizeDocItems error: ", _err)
    }
}

const ft = (e, t = !0) => {
    let a = []
    return (
        e.map((e) => {
            "item" === e.type
                ? (a.push(e.data.id),
                e.data.children &&
                we(e.data.children).map((e) => a.push(e.id)))
                : "card" === e.type
                    ? a.push(e.data.id)
                    : "project" === e.type &&
                    (we(e.data.tree).map((e) => a.push(e.id)),
                    t &&
                    e.data.children &&
                    e.data.children.forEach(function e(t) {
                        const n = we(t.tree)
                        a.push(...n.map((e) => e.id)),
                        t.children && t.children.forEach(e)
                    }))
        }),
            a
    )
}

async function gt(e) {
    try {
        const t = await trashcanAll(),
            a = ft(t)
        for (let t of a) e.update(t, {isInTrashcan: !0})
    } catch (_err) {
        ye.error("scanTrashcanItems error: ", _err)
    }
}

const yt = async (e) => {
    await tagScan(e)
}
let bt = {}
const wt = (e, t) => {
        t && (bt[e]?.includes(t) || (bt[e] = bt[e] ? [...bt[e], t] : [t]))
    },
    vt = (e) => {
        const t = e.id
        ;(e.tree
                ? e.tree.flatMap(function e(t) {
                    return t.children ? [t.id, ...t.children.flatMap(e)] : []
                })
                : []
        ).forEach((e) => wt(e, t))
    }

async function xt(e) {
    try {
        const t = Date.now()
        bt = {}
        const a = await ua()
        let n = await a.collection.items.all()
        const i = await projectAll()
        for (let e of i) vt(e)
        const r = await trashcanAll()
        for (let e of r)
            "project" === e.type && vt(e.data),
            "item" === e.type && wt(e.data.id, e.project_id)
        ye.info(
            "defineItemPropertyBelongsTo belongsToMap: ",
            JSON.stringify(bt, null, 2),
        ),
            n
                .filter(
                    (e) =>
                        JSON.stringify(e.belongsTo || []) !==
                        JSON.stringify(bt[e.id] || []),
                )
                .map((t) => e.update(t.id, {belongsTo: bt[t.id] || []})),
            ye.info("itemsUpdate belongsTo cost: ", Date.now() - t)
    } catch (_err) {
        ye.error("defineItemPropertyBelongsTo error: ", _err)
    }
}

const kt = require("child_process")
let At = null

class St extends class {
    constructor(e) {
        this.db = e
    }
} {
    constructor(...e) {
        super(...e),
            (this._itemMap = void 0),
            (this.updateMap = {}),
            (this._docs = this.db._collection.items._docs)
    }

    get itemMap() {
        if (this._itemMap) return this._itemMap
        const e = {}
        for (let t in this._docs) {
            const a = this._docs[t]._data
            e[a.id] = a
        }
        return (this._itemMap = e), e
    }

    update(e, t) {
        const a = this.updateMap[e] || this.itemMap[e]
        a && (this.updateMap[e] = {...a, ...t})
    }

    load() {
        for (let e in this.updateMap) {
            const t = this.updateMap[e]
            t && (this._docs[t._id]._data = t)
        }
    }

    async save() {
        if (!Object.values(this.updateMap).length) return Zt()
        await (async (e) => (
            At ||
            ((At = (0, kt.fork)(le().join(__dirname, "server.js"))),
                At.on("error", (e) => {
                    ye.error("server process error:", e)
                }),
                At.on("message", (t) => {
                    const {actions: a} = t
                    if ("logger" !== a) {
                        if ("finished" === a) {
                            At = null
                            for (let t in e) be(f, t)
                            return (
                                ye.info("server process update finished"),
                                    void Zt()
                            )
                        }
                    } else {
                        const {events: e, args: a} = t
                        ye[e](...a)
                    }
                })),
                At.send({
                    actions: "init",
                    data: {dataDir: await pa(), itemsMap: e},
                }),
                At
        ))(this.updateMap)
    }
}

const Tt = ["sample"],
    zt = [
        "Lattics.Pro.Monthly.Subscribe",
        "Lattics.Pro.Yearly.Subscribe",
        "Lattics.Pro.Prepay",
    ],
    Ct = ["Lattics.Pro.Monthly.Subscribe", "Lattics.Pro.Yearly.Subscribe"],
    jt = "persist:lattics",
    Pt = [
        "title",
        "color",
        "template",
        "own_template",
        "memo",
        "content",
        "icon",
        "tags",
        "titled",
        "goal",
    ],
    Dt = [
        "title",
        "template",
        "own_template",
        "icon",
        "title",
        "tree",
        "children",
        "goal",
    ],
    Mt = ["source", "target", "label", "color", "isHidden", "relationType"],
    Et = ["ris", "enw", "nbib", "bib"],
    It = new (require("events").EventEmitter)()
let Lt = []

function Bt(e, t, a) {
    try {
        e.send(t, ...a)
    } catch (_err) {
        console.error(_err), console.log(t), console.log(a)
    }
}

fe.ipcMain.on("x_broadcast", (e, t) => {
    It.emit(t.event, ...t.args)
    let a = fe.BrowserWindow.getAllWindows()
    for (let n of a)
        try {
            if (t.skipBroadcastBack && e.sender === n.webContents) continue
            if (t.justBroadcastBack && e.sender !== n.webContents) continue
            n.webContents.send("y_broadcast", t)
        } catch (_err) {
            ye.error("x_broadcast error!"), ye.error(_err)
        }
}),
    fe.ipcMain.handle("x_is_focused", (e) => e.sender.isFocused()),
    fe.ipcMain.on("x_action", async (e, t) => {
        let a = e.sender,
            {action: n, params: r, callback: o} = t,
            s = mod2[n]
        if ("function" == typeof s) {
            Array.isArray(r) || (r = [r])
            try {
                let e = {sender: a}
                const t = Date.now()
                let i = await s.call(e, ...r)
                ye.info(`[actions]:${n} cost`, Date.now() - t),
                    Bt(a, o, [null, i])
            } catch (_err) {
                console.error(_err),
                    ye.error(`[actions: ${n}]`, _err),
                    ye.info(`[actions: ${n}]`, r),
                    Bt(a, o, [_err])
            }
        } else {
            let e = `unknown action [${n}].`
            console.error(e), Bt(a, o, [e])
        }
    })
const Ot = (e) => {
        if (e.isDestroyed()) return
        let t = e.getChildWindows()
        for (let e of t) Ot(e)
        Lt = Lt.filter((t) => t !== e.webContents)
    },
    Rt = require("url")
var Ft = modulex.fn(Rt)
const qt = () => {
        let e
        return (
            (e = Rt.format({
                pathname: le().join(__dirname, "renderer", "index.html"),
                protocol: "file:",
                slashes: !0,
            })),
                e
        )
    },
    Nt = require("electron-window-state")
var Ut = modulex.fn(Nt)

function Gt(e = {}) {
    const t = Ut()({
        defaultWidth: 840,
        defaultHeight: 640,
        file: "quick-edit-win.json",
    })
    let a = new fe.BrowserWindow({
        hasShadow: !0,
        width: t.width,
        height: t.height,
        minWidth: 480,
        minHeight: 360,
        show: !1,
        autoHideMenuBar: !0,
        fullscreen: !1,
        fullscreenable: !0,
        titleBarStyle: "hidden",
        webPreferences: {
            contextIsolation: !0,
            sandbox: !1,
            preload: le().join(__dirname, "preload.js"),
            spellcheck: !1,
            webSecurity: !1,
            allowRunningInsecureContent: !1,
            nodeIntegrationInSubFrames: !0,
            partition: jt,
        },
    })
    const n = a.webContents.session
    return (
        ye.info(n.getUserAgent()),
            a.loadURL(`${qt()}#/blank`).catch((e) => console.error(e)),
            a.once("show", () => {
                t.manage(a)
            }),
            a.on("close", (e) => {
                Ot(a)
            }),
            a
    )
}

function Wt(e, t) {
    if (!Object.prototype.hasOwnProperty.call(e, t))
        throw new TypeError("attempted to use private field on non-instance")
    return e
}

var $t = 0

function Vt(e) {
    return "__private_" + $t++ + "_" + e
}

let Ht = null,
    Yt = null
var Jt = Vt("windows")

class Kt {
    constructor() {
        if (
            (Object.defineProperty(this, Jt, {writable: !0, value: new Map()}),
                Ht)
        )
            return Ht
        Ht = this
    }

    get windows() {
        return Wt(this, Jt)[Jt]
    }

    get windowIds() {
        return Array.from(Wt(this, Jt)[Jt].keys())
    }

    get windowCount() {
        return Wt(this, Jt)[Jt].size
    }

    getWindow(e) {
        return Wt(this, Jt)[Jt].get(e)
    }

    hasWindow(e) {
        return Wt(this, Jt)[Jt].has(e)
    }

    addWindow(e, t) {
        Wt(this, Jt)[Jt].set(e, t),
            t.on("closed", () => {
                this.removeWindow(e)
            })
    }

    removeWindow(e) {
        Wt(this, Jt)[Jt].delete(e)
    }

    showWindow(e) {
        const t = this.getWindow(e)
        t && t.show()
    }

    getUrl(e) {
        return `${qt()}#/quick-edit/?&id=${e}`
    }

    async createOrShowWindow(e, t = {}) {
        this.hasWindow(e) ? this.showWindow(e) : await this.createWindow(e, t)
    }

    async createWindow(e, t) {
        const a = new Date().getTime()
        let n
        Yt
            ? (ye.info("Has preCreatedStandaloneWindow, reuse it."),
                (n = Yt),
                (Yt = null))
            : (n = Gt()),
            n.show(),
            n.focus(),
            ye.info("win.show", new Date().getTime() - a),
            await n.loadURL(this.getUrl(e)),
            ye.info("win.loadURL", new Date().getTime() - a),
            this.addWindow(e, n),
            this.preCreateStandaloneWindow(),
            ye.info(
                "open standalone window end, cost: ",
                new Date().getTime() - a,
            )
    }

    preCreateStandaloneWindow() {
        Yt = Gt()
    }

    closeWindow(e) {
        const t = this.getWindow(e)
        t && t.close()
    }

    destroy() {
        ye.info("destroy standalone windows: ", this.windowCount),
            Wt(this, Jt)[Jt].forEach((e) => {
                try {
                    e.close()
                } catch (_err) {
                    ye.error("destroy standalone window error: ", _err)
                }
            }),
        Yt && Yt.close()
    }
}

const Zt = async () => {
        await setDataVersion(1.66), ye.info("update data version: ", 1.66)
    },
    Qt = () => {
        const e = [
                [Xe, 999],
                [Xt, 999],
                [ut, 1.6],
            ],
            t = [
                [ht, 1.6],
                [gt, 1.6],
                [xt, 1.6],
                [yt, 1.66],
            ]
        setTimeout(async () => {
            const a = Date.now(),
                n = await getDataVersion()
            ye.info("dataVersion: ", n)
            for (let [t, a] of e)
                try {
                    a - n > 1e-4 && (await t())
                } catch (_err) {
                    ye.error(_err)
                }
            const i = await ua(),
                r = new St(i)
            for (let [e, a] of t)
                try {
                    a - n > 1e-4 && (await e(r))
                } catch (_err) {
                    ye.error(_err)
                }
            r.load(), r.save(), ye.info("onstart tasks cost: ", Date.now() - a)
        }, 5e3)
    }

function Xt() {
    new Kt().preCreateStandaloneWindow()
}

const ea = (e) => ae().existsSync(e) && ae().lstatSync(e).isDirectory(),
    ta = (e) => ae().existsSync(e) && ae().lstatSync(e).isFile()
let aa = !1,
    na = null,
    ia = null,
    ra = null,
    oa = null,
    sa = null,
    la = null
const ca = () => fe.app.getPath("userData"),
    da = async () => {
        let e = global.uid || "guest"
        return (
            "string" == typeof e &&
            (e = ((e) => e.replace(/[^a-zA-Z0-9-_]+/g, "_"))(e)),
                e && "string" == typeof e ? e : "guest"
        )
    },
    _a = async (e) => {
        const t = e || (await da())
        return re.join(fe.app.getPath("userData"), "lat_cfg", t)
    },
    ma = async () => {
        if (!ia) {
            let e = await _a()
            ;(ia = new (q())(e)), ye.info(`cfgdb: ${ia.dir}`)
        }
        return ia
    },
    pa = async (e) => {
        if (e)
            return (
                ye.info("uid:", e),
                    re.join(fe.app.getPath("userData"), "lat_db", e)
            )
        const t = await da()
        if ((ye.info("user_id:", t), oa)) return oa
        if (!oa) {
            let e = await ma()
            oa = (await e.dict.cfg.get("data_dir", "")) || ""
        }
        return (
            oa || (oa = re.join(fe.app.getPath("userData"), "lat_db", t)),
                ye.info(`data_dir: ${oa}, exist: ${ea(oa)}`),
                oa
        )
    },
    ua = async () => {
        if (aa) return await N(200), await ua()
        if (!ra) {
            aa = !0
            let e = await pa(),
                t = !ea(re.join(e, "collection"))
            ;(ra = new (q())(e)),
                ye.info(`-> New data db: ${ra.dir}, is_new_start: ${t}`),
            t &&
            (ye.info("-> It's a new db, add the getting start docs..."),
                await ra.loadJSON(
                    await (async function (e) {
                        let t = le().join(ga(), "lattics_getting_start")
                        await ie().ensureDir(t)
                        let a = new (q())(t)
                        await a.loadJSON(
                            await (async (e) =>
                                ["zh", "zh-CN"].includes(e)
                                    ? await Ce("zh.json")
                                    : ["zh_tw", "zh-TW", "zh-HK"].includes(
                                        e,
                                    )
                                        ? await Ce("zh_tw.json")
                                        : await Ce("en.json"))(e),
                        ),
                            await (async (e) => {
                                let t = [],
                                    a = await e.collection.projects.all()
                                for (let n of a) {
                                    await e.collection.projects.update(
                                        (e) => e.id === n.id,
                                        {
                                            title: n.title?.replace(
                                                /^\$[A-Z]{2}:/,
                                                "",
                                            ),
                                        },
                                    )
                                    let {tree: a} = n
                                    t = [...t, ...we(a).map((e) => e.id)]
                                }
                                let n = await e.list.card_ids.all()
                                ;(t = [...t, ...n]),
                                    await e.collection.items.delete(
                                        (e) => !t.includes(e.id),
                                    )
                            })(a)
                        let n = await a.toJSON()
                        try {
                            await ie().remove(t)
                        } catch (_err) {
                            ye.error(_err)
                        }
                        return n
                    })(global.system_locale || "en"),
                ),
                be("new_user_start"),
                Qt()),
                await ra.collection.items.addIndex("id"),
                await ra.collection.cards.addIndex("id"),
                ra.collection.items.rebuildIndexes().catch((e) => ye.error(e)),
                ra.collection.cards.rebuildIndexes().catch((e) => ye.error(e)),
                (aa = !1)
        }
        return ra
    },
    ha = async () => {
        if (!sa) {
            let e = await pa()
            ;(sa = re.join(e, "assets")), ye.info(`assets: ${sa}`)
        }
        return sa
    },
    fa = async () => {
        if (!la) {
            let e = await pa()
            ;(la = re.join(e, "Y_CHANGES")), ye.info(`y_changes_dir: ${la}`)
        }
        return la
    },
    ga = () => fe.app.getPath("temp"),
    ya = async () => {
        na && (na = null),
        ia && (ia = null),
        ra && (ra = null),
            (oa = null),
            (sa = null),
            (la = null)
    },
    ba = {
        is_dev_mode: !1,
        left_panel_show: !0,
        left_panel_tags_show: !1,
        left_panel_width: 240,
        left_panel_tag_height: 0,
        document_list_width: 240,
        editor_right_panel_width: 220,
        editor_right_external_panel_width: 220,
        locale: "en",
        is_locale_auto_detect: !0,
        theme_source: "light",
        theme: "light",
        use_proxy: !1,
        proxy_protocol: "http",
        proxy_host: "",
        proxy_port: 0,
        editor_feature: {
            contextMenu: !1,
            markdown: !0,
            spellcheck: !0,
            defaultFont: "",
            asianFont: "",
            latinFont: "",
            defaultFontSize: "",
            defaultLineHeight: "",
        },
        auto_lock: !1,
        auto_backup: !1,
        auto_backup_time: "1d",
        backup_dir: "",
        auto_lock_wait_time_ms: 3e5,
        autocomplete: !0,
        auto_spaces_between_char_and_operator: !1,
        auto_spaces_between_cn_and_en: !1,
        doc_title_auto_n: !0,
        show_toolbar: !0,
        enable_plus_menu: !1,
        show_line_number: !1,
        db_dir: "",
        float_editor_width: 500,
        float_editor_height: 400,
        data_version: 0.1,
    },
    configAll = async () => {
        let e = await ma(),
            t = await e.dict.cfg.all()
        return Object.assign({}, ba, t)
    },
    configGet = async (e) => {
        let t = await ma()
        return await t.dict.cfg.get(e, ba[e])
    },
    configGetLocale = async () => {
        let e
        const t = await configGet("is_locale_auto_detect"),
            a = await configGet("locale")
        return (e = (t && global.system_locale) || a), e
    },
    configSet = async (e, t) => {
        let a = await ma()
        await a.dict.cfg.set(e, t), ye.info(`config:store.set [${e}]: ${t}`)
    },
    Aa = [
        {
            theme: "light",
            image: "theme_light",
            lang: "theme_light",
            isPro: !1,
            mainBackground: "#fff",
        },
        {
            theme: "dark",
            image: "theme_dark",
            lang: "theme_dark",
            isPro: !1,
            mainBackground: "#1d1f1f",
        },
        {
            theme: "system",
            image: "theme_system",
            lang: "theme_system",
            isPro: !1,
            mainBackground: "",
        },
        {
            theme: "klein-blue",
            image: "theme_klein_blue",
            lang: "theme_klein_blue",
            isPro: !0,
            mainBackground: "#fff",
        },
        {
            theme: "pantone-red",
            image: "theme_pantone_red",
            lang: "theme_pantone_red",
            isPro: !0,
            mainBackground: "#fff",
        },
        {
            theme: "tiffany-green",
            image: "theme_tiffany_green",
            lang: "theme_tiffany_green",
            isPro: !0,
            mainBackground: "#fff",
        },
        {
            theme: "hermes-brown",
            image: "theme_hermes_brown",
            lang: "theme_hermes_brown",
            isPro: !0,
            mainBackground: "#fff",
        },
        {
            theme: "silver",
            image: "theme_silver",
            lang: "theme_silver",
            isPro: !0,
            mainBackground: "#fff",
        },
        {
            theme: "midnight-blue",
            image: "theme_midnight_blue",
            lang: "theme_midnight_blue",
            isPro: !0,
            mainBackground: "#1b1e25",
        },
        {
            theme: "dark-rose",
            image: "theme_dark_rose",
            lang: "theme_dark_rose",
            isPro: !0,
            mainBackground: "#1d1b1e",
        },
        {
            theme: "marrs-green",
            image: "theme_marrs_green",
            lang: "theme_marrs_green",
            isPro: !0,
            mainBackground: "#1a1d1e",
        },
        {
            theme: "ink",
            image: "theme_ink",
            lang: "theme_ink",
            isPro: !0,
            mainBackground: "#1c1c1c",
        },
    ]

function Sa(e, t) {
    if (!Object.prototype.hasOwnProperty.call(e, t))
        throw new TypeError("attempted to use private field on non-instance")
    return e
}

var Ta = 0

function za(e) {
    return "__private_" + Ta++ + "_" + e
}

let Ca = null,
    ja = null
var Pa = za("windows")

class Da {
    constructor() {
        if (
            (Object.defineProperty(this, Pa, {writable: !0, value: new Map()}),
                Ca)
        )
            return Ca
        Ca = this
    }

    get windows() {
        return Sa(this, Pa)[Pa]
    }

    get windowIds() {
        return Array.from(Sa(this, Pa)[Pa].keys())
    }

    get windowCount() {
        return Sa(this, Pa)[Pa].size
    }

    getWindow(e) {
        return Sa(this, Pa)[Pa].get(e)
    }

    hasWindow(e) {
        return Sa(this, Pa)[Pa].has(e)
    }

    addWindow(e, t) {
        Sa(this, Pa)[Pa].set(e, t),
            t.on("closed", () => {
                this.removeWindow(e)
            })
    }

    removeWindow(e) {
        Sa(this, Pa)[Pa].delete(e)
    }

    showWindow(e) {
        const t = this.getWindow(e)
        t && t.show()
    }

    async createOrShowWindow(e, t = {}) {
        this.hasWindow(e) ? this.showWindow(e) : await this.createWindow(e, t)
    }

    getUrl(e) {
        return `${qt()}#/imagePreview/?&id=${e}`
    }

    async createWindow(e, t) {
        const a = new Date().getTime()
        let n
        ja
            ? (ye.info("Has preImagePreviewWindow, reuse it."),
                (n = ja),
                (ja = null))
            : (n = await (async () => {
                const e = await configGet("theme").catch(ye.error),
                    t = Ut()({defaultWidth: 840, defaultHeight: 581})
                let a = new fe.BrowserWindow({
                    parent: global.main_win || void 0,
                    hasShadow: !0,
                    frame: !1,
                    width: t.width,
                    height: t.height,
                    minWidth: 300,
                    minHeight: 200,
                    maximizable: !1,
                    minimizable: !1,
                    show: !1,
                    fullscreen: !1,
                    fullscreenable: !1,
                    webPreferences: {
                        contextIsolation: !0,
                        sandbox: !1,
                        preload: le().join(__dirname, "preload.js"),
                        partition: jt,
                        nodeIntegrationInWorker: !0,
                    },
                })
                if (e) {
                    const t =
                        Aa.find((t) => t.theme === e)?.mainBackground || ""
                    a.setBackgroundColor(t)
                }
                a.loadURL(`${qt()}#/blank`).catch((e) => console.error(e)),
                    a.once("show", () => {
                        t.manage(a)
                    }),
                    a.on("close", (e) => {
                        Ot(a)
                    })
                try {
                    a.show(), a.focus()
                } catch (_err) {
                    console.error(_err)
                }
                return a
            })()),
            ye.info("win.show", new Date().getTime() - a),
            await n.loadURL(this.getUrl(e)),
            ye.info("win.loadURL", new Date().getTime() - a),
            this.addWindow(e, n),
            ye.info(
                "open imaePreview window end, cost: ",
                new Date().getTime() - a,
            )
    }

    closeWindow(e) {
        const t = this.getWindow(e)
        t && t.close()
    }

    destroy() {
        ye.info("destroy imagePreview windows: ", this.windowCount),
            Sa(this, Pa)[Pa].forEach((e) => {
                try {
                    e.close()
                } catch (_err) {
                    ye.error("destroy imagePreview window error: ", _err)
                }
            }),
        ja && ja.close()
    }
}

const Ma = async () => {
        let e = global.main_win
        if (
            (ye.info("activeOrCreateMainWindow: ", e ? "has win" : "no win"), e)
        )
            return await e.show(), void (await e.focus())
        let t = Ut()({defaultWidth: 1200, defaultHeight: 800}),
            a = new fe.BrowserWindow({
                x: t.x,
                y: t.y,
                width: t.width,
                height: t.height,
                minWidth: 480,
                minHeight: 360,
                titleBarStyle: "hiddenInset",
                autoHideMenuBar: !0,
                trafficLightPosition: {x: 10, y: 8},
                frame: !1,
                hasShadow: !0,
                show: !1,
                webPreferences: {
                    contextIsolation: !0,
                    sandbox: !1,
                    preload: le().join(__dirname, "preload.js"),
                    spellcheck: !1,
                    webSecurity: !1,
                    allowRunningInsecureContent: !1,
                    nodeIntegrationInSubFrames: !0,
                    partition: jt,
                },
            })
        global.main_win = a
        const n = await configAll()
        if (n.theme) {
            const e = Aa.find((e) => e.theme === n.theme)?.mainBackground || ""
            a.setBackgroundColor(e)
        }
        const i = a.webContents.session
        ye.info(i.getUserAgent())
        global.ua = i.getUserAgent() + ` Lattics/${Ne.join(".")}`
        a.webContents.setWindowOpenHandler(
            ({url: e}) => (fe.shell.openExternal(e), {action: "deny"}),
        )
        try {
            fe.ipcMain.on("sendContentModifyCommands", (e, t) => {
                "paste" === t
                    ? a.webContents.paste()
                    : "cut" === t
                        ? a.webContents.cut()
                        : "copy" === t
                            ? a.webContents.copy()
                            : "delete" === t && a.webContents.delete()
            })
        } catch (_err) {
            console.log(_err)
        }
        try {
            a.webContents.setVisualZoomLevelLimits(1, 1).finally(() => {
            })
        } catch (_err) {
        }
        t.manage(a)
        La(await configGetLocale()),
            a.loadURL(qt()).catch((e) => console.error(e)),
            a.once("ready-to-show", () => {
                ye.info("show mainWin:", Date.now()), a.show()
            }),
            a.on("focus", async () => {
                a.webContents.send("focus"), be("window_focused")
                let e = await configGetLocale()
                await checkUpdate(e)
            }),
            a.on("blur", () => {
                a.webContents.send("blur")
            }),
            a.on("close", (e) => {
                if (global.is_will_quit) Ot(a)
                else {
                    if (
                        ("win32" === process.platform &&
                        (new Kt().destroy(), new Da().destroy()),
                        "darwin" === process.platform)
                    )
                        return (
                            e.preventDefault(),
                            a.isFullScreen() && a.setFullScreen(!1),
                                void a.hide()
                        )
                    Ot(a)
                }
            }),
            a.on("closed", () => {
                ;(global.main_win = null), ye.info("the main window is closed.")
            })
    },
    Ea = (e) => {
        let t = []
        for (let a of e) a && t.push(a)
        return t
    },
    Ia = (e = "en") => {
        if ("darwin" === process.platform) {
            const t = new Ie(e),
                {lang: a} = t,
                n = fe.Menu.buildFromTemplate([
                    {
                        label: a.open_main_window,
                        click() {
                            Ma().catch((e) => console.error(e))
                        },
                    },
                ])
            fe.app.dock.setMenu(n)
        }
    },
    La = (e = "en") => {
        const t = new Ie(e),
            {lang: a} = t,
            n = "darwin" === process.platform,
            i = Ea([
                n && {
                    label: "Lattics",
                    submenu: [
                        {label: a.about, role: "about"},
                        {type: "separator"},
                        {
                            label: a.preferences,
                            accelerator: "CommandOrControl+,",
                            click: () => {
                                be(z)
                            },
                        },
                        {type: "separator"},
                        {role: "hide", label: a.hide},
                        {
                            role: "hideOthers",
                            label: a.hide_others,
                        },
                        {role: "unhide", label: a.unhide},
                        {type: "separator"},
                        {role: "quit", label: a.quit},
                    ],
                },
                !n && {
                    label: a.file,
                    submenu: Ea([
                        !n && {
                            label: `${a.about} Lattics`,
                            role: "about",
                        },
                        !n && {type: "separator"},
                        !n && {type: "separator"},
                        !n && {
                            label: a.preferences,
                            accelerator: "CommandOrControl+,",
                            click: () => {
                                be(z)
                            },
                        },
                        !n && {type: "separator"},
                        !n && {
                            role: "quit",
                            label: a.quit,
                            accelerator: "CmdOrCtrl+Q",
                        },
                    ]),
                },
                {
                    label: a.edit,
                    submenu: [
                        {
                            accelerator: "CommandOrControl+Z",
                            label: a.undo,
                            click() {
                                be(M, "undo")
                            },
                        },
                        {
                            accelerator: "CommandOrControl+Shift+Z",
                            label: a.redo,
                            click() {
                                be(M, "redo")
                            },
                        },
                        {type: "separator"},
                        {role: "cut", label: a.cut},
                        {role: "copy", label: a.copy},
                        {
                            role: "paste",
                            label: a.paste,
                        },
                        {
                            role: "pasteAndMatchStyle",
                            label: a.paste_as_text,
                            accelerator: "CommandOrControl+Shift+V",
                        },
                        {role: "delete", label: a.delete},
                        {
                            role: "selectAll",
                            label: a.select_all,
                        },
                        {type: "separator"},
                        {
                            label: a.search,
                            accelerator: "CommandOrControl+F",
                            click() {
                                be("search_start")
                            },
                        },
                    ],
                },
                {
                    label: a.view,
                    submenu: [
                        {
                            label: a.reload,
                            accelerator: "CmdOrCtrl+R",
                            click(e, t) {
                                t && t.reload()
                            },
                        },
                        {type: "separator"},
                        {
                            label: a.toggle_dark_mode,
                            click() {
                                be("theme_update")
                            },
                        },
                        {role: "togglefullscreen", label: a.toggle_full_screen},
                    ],
                },
                {
                    label: a.window,
                    role: "window",
                    submenu: Ea([
                        {
                            accelerator: "CmdOrCtrl+W",
                            role: "close",
                            label: a.close,
                        },
                        {
                            accelerator: "",
                            role: "minimize",
                            label: a.minimize,
                        },
                        {role: "zoom", label: a.zoom},
                        n && {type: "separator"},
                        n && {
                            label: a.open_main_window,
                            click() {
                                Ma().catch((e) => console.error(e))
                            },
                        },
                    ]),
                },
                {
                    label: a.help,
                    role: "help",
                    submenu: [
                        {
                            label: a.homepage,
                            click() {
                                fe.shell
                                    .openExternal(
                                        "https://lattics.zineapi.com/",
                                    )
                                    .catch((e) => ye.error(e))
                            },
                        },
                    ],
                },
            ]),
            r = fe.Menu.buildFromTemplate(i)
        fe.Menu.setApplicationMenu(r)
    },
    configSetLocale = async (e) => {
        await configSet("locale", e),
            await configSet("is_locale_auto_detect", !1),
            La(e),
            Ia(e),
            be("set_locale", e)
    },
    configUpdate = async (e) => {
        let t = await ma()
        const a = await t.dict.cfg.all()
        await t.dict.cfg.update(e), a.locale !== e.locale && La(e.locale)
    },
    Ra = require("node-localstorage"),
    Fa = le().join(fe.app.getPath("userData"), "lat_json_storage")
ie().ensureDirSync(Fa)
const qa = new Ra.JSONStorage(Fa)

async function globalKvDelete(e) {
    qa.removeItem(e)
}

async function globalKvGet(e) {
    return qa.getItem(e)
}

async function globalKvSet(e, t) {
    qa.setItem(e, t)
}

const localKvDelete = async (e) => {
        let t = await ma()
        return await t.dict.localkv.delete(e)
    },
    localKvGet = async (e) => {
        let t = await ma()
        return await t.dict.localkv.get(e)
    },
    localKvSet = async (e, t) => {
        let a = await ma()
        return await a.dict.localkv.set(e, t)
    }

async function getHasSeenWalkThrough() {
    return !!(await globalKvGet("has_walked_through"))
}

async function setHasSeenWalkThrough(e) {
    await globalKvSet("has_walked_through", e)
}

const Ja = require("uuid"),
    Ka = async (e, t = {}) => {
        const a = await ua()
        let n = await a.list.root_project_ids.all()
        const {siblingId: i, insertTo: r, needInsertToTop: o} = t
        if (i && r) {
            const t = n.findIndex((e) => e === i)
            if (~t) {
                const a = "before" === r ? t : t + 1
                n.splice(a, 0, e), (n = [...new Set(n)])
            } else n = [...new Set([...n, e])]
        } else n = o ? [...new Set([e, ...n])] : [...new Set([...n, e])]
        await a.list.root_project_ids.set(n)
    },
    Za = async (e) => {
        const t = await ua(),
            a = await t.list.root_project_ids.all()
        await t.list.root_project_ids.set(a.filter((t) => t !== e))
    }

async function Qa(e, t, a, n) {
    if ("item" === e) {
        if (Pt.some((e) => t.includes(e))) {
            const e = await ua(),
                i = await e.collection.items.find(
                    ["id", n],
                    ["fieldModifyTimes"],
                )
            if (i) {
                const r = i.fieldModifyTimes || {}
                Pt.forEach((e) => {
                    t.includes(e) && (r[e] = a)
                }),
                    await e.collection.items.update(["id", n], {
                        fieldModifyTimes: r,
                    })
            }
        }
    } else if (
        "project" === e &&
        Dt.some((e) => "tree" !== e && t.includes(e))
    ) {
        const e = await ua(),
            i = await e.collection.projects.find(
                (e) => e.id === n,
                ["fieldModifyTimes"],
            )
        if (!i) return
        const r = i.fieldModifyTimes || {}
        Dt.forEach((e) => {
            "tree" !== e && t.includes(e) && (r[e] = a)
        }),
            await e.collection.projects.update((e) => e.id === n, {
                fieldModifyTimes: r,
            })
    }
}

const Xa = async (e, t = "???") => {
        try {
            const a = Date.now(),
                n = await ua(),
                i = await n.collection.projects.update((t) => t.id === e.id, {
                    ...e,
                    edit_time_ms: a,
                })
            return (
                ye.info("project update in:", t),
                    await Qa("project", Object.keys(e), a, e.id),
                    i
            )
        } catch (_err) {
            ye.error("project update error:", _err)
        }
    },
    en = async (e, t, a = {}) => {
        const n = await ua(),
            i = await n.collection.projects.find((t) => t.id === e)
        if (!i) return
        const {siblingId: r, insertTo: o} = a
        let s = i.children
        const l = {id: t}
        if (s) {
            if (!s.find((e) => e.id === t))
                if (r && o) {
                    const e = s.findIndex((e) => e.id === r)
                    if (~e) {
                        const t = "before" === o ? e : e + 1
                        s.splice(t, 0, l)
                    } else s = [...s, l]
                } else s = [...s, l]
        } else s = [l]
        return await Xa({id: e, children: s}, "addChildrenToProject")
    },
    tn = async (e, t) => {
        const a = await ua(),
            n = await a.collection.projects.find((t) => t.id === e)
        if (!n) return
        let i = n.children
        return (
            i && (i = i.filter((e) => e.id !== t)),
                await Xa({id: e, children: i}, "removeChildrenFromProject")
        )
    },
    projectAdd = async (e = {}, t = {disable_edit: !1}) => {
        const a = new Date().getTime(),
            n = await ua()
        let i = {
            title: "",
            tree: [],
            tree_for_show: [],
            ...e,
            id: (0, Ja.v4)(),
            add_time_ms: a,
            edit_time_ms: a,
            level: 0,
        }
        if ((t = t || {}).need_to_top)
            await n.collection.projects.insert(i),
                await Ka(i.id, {needInsertToTop: !0})
        else {
            const {relative_id: e, relative_where: a = "after"} = t
            if (e)
                if ("in" === a) {
                    const t = (await en(e, i.id))?.[0]
                    t
                        ? ((i.level = t.level ? t.level + 1 : 1),
                            (i = await n.collection.projects.insert(i)))
                        : (await n.collection.projects.insert(i),
                            await Ka(i.id))
                } else {
                    const t = (await n.collection.projects.all()).find((t) =>
                        t.children?.find((t) => t.id === e),
                    )
                    t
                        ? (await en(t.id, i.id, {
                            siblingId: e,
                            insertTo: a,
                        }),
                            (i.level = t.level ? t.level + 1 : 1),
                            await n.collection.projects.insert(i))
                        : (await n.collection.projects.insert(i),
                            await Ka(i.id, {
                                siblingId: e,
                                insertTo: a,
                            }))
                }
            else await n.collection.projects.insert(i), await Ka(i.id)
        }
        return (
            trackEvent("new", "project"),
                be(x),
                be("projects_added", i.id, t.disable_edit),
                {...i, children: void 0}
        )
    },
    itemGet = async (e, t = !1) => {
        const a = await ua()
        let n = await a.collection.items.find(["id", e])
        try {
            if (t && n && n.currentVersion && "file" !== n.rawType) {
                const t = {...n},
                    [a, i] = await getCachedLocalChangesState(e)
                return (
                    (t.currentYDocChange = i),
                        (t.currentYDocChangeIndex = a),
                    t.unSyncedVersions &&
                    (t.unSyncedYDocChanges = await Promise.all(
                        t.unSyncedVersions.map(
                            async (t) => await getVersion(e, t),
                        ),
                    )),
                        t
                )
            }
            return n
        } catch (_err) {
            return console.log(_err), n
        }
    }

async function rn(e, t) {
    try {
        if (!e || !t) return !1
        const a = await itemGet(e)
        if (!a) return !1
        const n = a.belongsTo || []
        if (~n.findIndex((e) => e === t)) return !0
        const i = [...n, t]
        return await itemUpdateBelongsTo({id: e, belongsTo: i}, !0), !0
    } catch (_err) {
        return ye.error(_err), !1
    }
}

async function on(e, t) {
    try {
        if (!e || !t) return !1
        const a = await itemGet(e)
        if (!a) return !1
        const n = a.belongsTo || [],
            i = n.findIndex((e) => e === t)
        return (
            ~i &&
            (n.splice(i, 1),
                await itemUpdateBelongsTo({id: e, belongsTo: n}, !0)),
                !0
        )
    } catch (_err) {
        return ye.error(_err), !1
    }
}

const projectAddItem = async (e, t, a = {}) => {
        const {
                relate_item_id: n,
                relate_where: i,
                from_project_id: r,
                insert_at_first: s,
            } = a,
            l = a.children || [],
            c = await ua(),
            d = await c.collection.projects.find((t) => t.id === e)
        if (!d) return void console.error(`invalid project #${e} !`)
        let _,
            m,
            p = d.tree || []
        if ("object" == typeof t) (m = await itemAdd(t, e, a)), (_ = m.id)
        else {
            if (((_ = t), (m = await itemGet(_)), !m))
                return void console.error(`invalid item #${_} !`)
            if (we(p).find((e) => e.id === _)) return
        }
        let u = null
        if (n) {
            let e = xe(p, (e) => e.id === n)
            e.length > 0 && (u = e[0])
        }
        if (u && n) {
            let e = Se(p, n),
                t = e.findIndex((e) => e.id === n)
            "before" === i
                ? e.splice(t, 0, {id: _, children: l})
                : "after" === i
                    ? e.splice(t + 1, 0, {
                        id: _,
                        children: l,
                    })
                    : (Array.isArray(u.children) || (u.children = []),
                        s
                            ? u.children.unshift({
                                id: _,
                                children: l,
                            })
                            : u.children.push({id: _, children: l}))
        } else p.push({id: _, children: l})
        let h = {id: e, tree: p}
        if (
            (a.selected_item_ids && (h.selected_item_ids = a.selected_item_ids),
            a.current_item_id && (h.current_item_id = a.current_item_id),
                await projectUpdateTree(h, {
                    silent_save: !0,
                    fromGraph: a.fromGraph,
                }),
                await rn(_, e),
                r)
        ) {
            let e = await c.collection.projects.find((e) => e.id === r)
            if (e) {
                let t = e.tree
                ke(t, (e) => e.id === _),
                    await projectUpdateTree(
                        {id: r, tree: t},
                        {
                            silent_save: !0,
                            fromGraph: a.fromGraph,
                        },
                    ),
                    await on(_, r)
            }
        }
        return (
            l.length &&
            (await Promise.all(we(l).map((t) => rn(t.id, e))),
            r && (await Promise.all(we(l).map((e) => on(e.id, r))))),
            a.is_card &&
            (await c.list.card_ids.delete((e) => e === _),
                await itemUpdateOther(
                    {
                        id: _,
                        rawType: "doc",
                    },
                    !0,
                ),
                be(O),
                be(o, _)),
                be(w, e, a.fromGraph),
                m
        )
    },
    ln = (e, t, a) => {
        const n = t.map((e) => ({id: e.id, children: []})),
            {relate_item_id: i, relate_where: r} = a
        if (!i || !r) return e.push(...n), e
        if ("before_in" === r) {
            if (e[0]?.id === i) return e
            let n = we(e),
                r = n.findIndex((e) => e.id === i)
            if (r <= 0) return e
            let o = n[r - 1]
            return ln(e, t, {...a, relate_item_id: o.id, relate_where: "in"})
        }
        if ("after_in" === r) return ln(e, t, {...a, relate_where: "in"})
        let o = null
        if (i) {
            let t = xe(e, (e) => e.id === i)
            t.length > 0 && (o = t[0])
        }
        if (!o) return e.push(...n), e
        let s = Se(e, i),
            l = s.findIndex((e) => e.id === i)
        return (
            "before" === r
                ? s.splice(l, 0, ...n)
                : "after" === r
                    ? s.splice(l + 1, 0, ...n)
                    : (Array.isArray(o.children) || (o.children = []),
                        o.children.push(...n)),
                e
        )
    },
    projectAddItems = async (e, t, a = {}) => {
        if (!t.length) return
        const n = await ua(),
            i = await n.collection.projects.find((t) => t.id === e)
        if (!i) return void console.error(`invalid project #${e} !`)
        const r = []
        for (let a of t) {
            const t = await itemAdd({...a, belongsTo: [e]}, void 0, {
                needNotEditTitle: !0,
            })
            r.push(t)
        }
        let o = i.tree || []
        o = ln(o, r, a)
        let s = {id: e, tree: o}
        return await projectUpdateTree(s, {fromGraph: a.fromGraph}), r
    },
    projectAll = async () => {
        const e = await ua()
        return await e.collection.projects.all()
    },
    projectDuplicateItem = async (e, t) => {
        if (!(await projectGet(e, !0)))
            return void ye.info(`project #${e} is not found!`)
        const a = await itemGetWithLocalContent(t)
        if (!a) return void ye.info(`item with id #${t} is not found!`)
        const n = await itemAdd({
            title: a.title,
            titled: a.titled,
            content: a.content,
            icon: a.icon,
            forwards_cites: a.forwards_cites,
            tags_in_content: a.tags_in_content,
        })
        return (
            await projectAddItem(e, n.id, {
                relate_item_id: a.id,
                relate_where: "after",
                current_item_id: n.id,
                selected_item_ids: [n.id],
            }),
                n.id
        )
    },
    mn = async (e) =>
        await Promise.all(
            Object.values(e.collection.items._docs).map(
                (e) => e._data || e.ensure(),
            ),
        )
let pn = !0
const un = async (e) => {
        const t = await mn(e),
            a = {}
        for (let e of t)
            e.id ? (a[e.id] = e) : pn && ((a.notLoaded = e), (pn = !1))
        return a
    },
    hn = async (e, t, a, n = !1) => {
        let i = e[t]
        if (i)
            return {
                ...$().pick(i, ["id", "title", "type", "icon"]),
                children: [],
                is_collapsed: n,
                _tid: `${a}_${t}`,
                is_in_trashcan: i.isInTrashcan,
                is_removable: !!i.belongsTo?.length,
                is_got_flashcard: i.isGotFlashcard,
                is_enhanced_flashcard: i.isEnhancedFlashcard,
                ebbinghausLevel: i.ebbinghausLevel,
                showAsFlashcardLastTimeMs: i.showAsFlashcardLastTimeMs,
            }
    },
    fn = async (e, t, a) => {
        let n = []
        for (let i of t) {
            a++
            let t = await hn(e, i.id, a, i.is_collapsed)
            t &&
            (i.children && (t.children = await fn(e, i.children, a)),
                n.push(t))
        }
        return n
    },
    gn = async (e) => {
        const t = await ua()
        let a = await t.collection.projects.find((t) => t.id === e)
        if (!a) return !1
        let n = await un(t)
        if (
            (n.notLoaded &&
            (ye.warning("updateTreeForShow: itemsMap notLoaded"),
                (n = await (async () => {
                    const e = await itemAll(),
                        t = {}
                    for (let a of e) t[a.id] = a
                    return t
                })())),
                (a = await (async (e, t) => {
                    let a = e.tree || []
                    if (0 === a.length) return e
                    let n = we(a).map((e) => e.id),
                        i = n.length,
                        r = n.flatMap((e) => (t[e] ? e : []))
                    if (r.length === i) return e
                    const o = []
                    for (let e of n)
                        r.includes(e) || (await itemGet(e)) || o.push(e)
                    return o.length
                        ? (ye.warning("cleanProjectTree idsToDelete:", o),
                            ke(a, (e) => o.includes(e.id)),
                            (e.tree = a),
                            e)
                        : e
                })(a, n)),
                !a)
        )
            return !1
        let i = a.tree || [],
            r = await fn(n, i, 0),
            o = a.current_item_id,
            s = a.selected_item_ids
        if (o) {
            const e = n[o]
            !e || e.isInTrashcan ? (o = null) : s?.length || (s = [o])
        }
        if (!o) {
            const e = ((e) => we(e).find((e) => !e.is_in_trashcan))(r)
            e ? ((o = e.id), (s = [e.id])) : (s = [])
        }
        return (
            s?.length &&
            (s = s.filter((e) => {
                const t = n[e]
                return t && !t.isInTrashcan
            })),
                await t.collection.projects.update((t) => t.id === e, {
                    tree: i,
                    tree_for_show: r,
                    current_item_id: o,
                    selected_item_ids: s,
                }),
                !0
        )
    },
    projectGet = async (e, t = !1) => {
        t || (await gn(e))
        const a = await ua()
        return await a.collection.projects.find((t) => t.id === e)
    },
    bn = async () => {
        const e = await ua()
        return (await e.collection.projects.all()).reduce(
            (e, t) => ((e[t.id] = t), e),
            {},
        )
    },
    wn = (e, t) =>
        e.children?.flatMap(({id: e}) => {
            const a = t[e]
            return a ? {...a, children: wn(a, t)} : []
        }),
    projectGetTreeItem = async (e, t = !1) => {
        if (!t && !(await gn(e))) return
        const a = await bn(),
            n = a[e]
        return n ? {...n, children: wn(n, a)} : void 0
    },
    projectGetItems = async (e) => {
        let t = await projectGet(e, !0)
        if (!t) return []
        let {tree: a} = t,
            n = we(a).map((e) => e.id)
        return (await Promise.all(n.map((e) => itemGet(e)))).filter((e) => !!e)
    },
    projectGetItemIds = async (e, t = !0) => {
        let a = await projectGet(e, !0)
        if (!a) return []
        const n = await ua(),
            i = await un(n)
        let {tree: r} = a
        return we(r)
            .map((e) => i[e.id])
            .filter(
                (e) => !(!e || e.isInTrashcan || (t && "file" === e.rawType)),
            )
    },
    projectGetTree = async () => {
        const e = await ua(),
            t = await e.list.root_project_ids.all(),
            a = await bn()
        if (!t.length) {
            const t = Object.values(a)
            return t.length
                ? (await e.list.root_project_ids.set(
                    t.flatMap((e) => e?.id || []),
                ),
                    t.flatMap((e) =>
                        e
                            ? {
                                ...e,
                                children: [],
                            }
                            : [],
                    ))
                : []
        }
        return t.flatMap((e) => {
            const t = a[e]
            return t ? {...t, children: wn(t, a)} : []
        })
    },
    Sn = async (e, t) => {
        let a = [{id: e.id, type: "project", title: e.title || ""}],
            {tree_for_show: n} = e,
            i = ze(n, t).map((e) => ({
                id: e.id,
                type: e.type,
                title: e.title || "",
                icon: e.icon,
            }))
        return i && (a = [...a, ...i]), a
    },
    Tn = ["tag-hint"],
    zn = {
        IMAGE: [
            "jpg",
            "jpeg",
            "png",
            "gif",
            "bmp",
            "tiff",
            "tif",
            "dng",
            "heic",
            "webp",
        ],
        AUDIO: ["mp3", "aac", "wma", "wav", "flac", "m4a", "ogg"],
        VIDEO: ["mp4", "avi", "mov", "wmv", "mkv", "flv"],
        PDF: ["pdf"],
        RIS: ["ris", "enw", "bib", "nbib"],
        PPT: ["pptx", "ppt"],
        DOC: ["docx", "doc"],
        EXCEL: ["xlsx", "xls"],
        CSV: ["csv"],
        KEYNOTE: ["key"],
        NUMBERS: ["numbers"],
        PAGES: ["pages"],
    },
    Cn =
        (Object.keys(zn).reduce((e, t) => {
            const a = zn[t]
            for (let n of a) e[n] = t
            return e
        }, {}),
            (e) =>
                e && e.children
                    ? e.children.flatMap(function e(t) {
                        return t.children
                            ? [t.id, ...t.children.flatMap(e)]
                            : [t.id]
                    })
                    : [])
new (class {
    constructor(e) {
        ;(this.t = e), (this.queue = []), (this.running = !1), (this.t = e)
    }

    step() {
        const e = this.queue.shift()
        e ? (e(), setTimeout(() => this.step(), this.t)) : (this.running = !1)
    }

    run() {
        this.running || ((this.running = !0), this.step())
    }

    add(e) {
        this.queue.push(e)
    }

    clear() {
        this.queue = []
    }
})(100)
const jn = 8e3,
    Pn = 8e3,
    Dn = (e) => {
        const {width: t, height: a} = e
        return t > jn || a > Pn
            ? t / jn > a / Pn
                ? {width: jn}
                : {height: Pn}
            : t < 200 || a < 200
                ? t / 200 > a / 200
                    ? {height: 200}
                    : {width: 200}
                : e
    },
    Mn = (e) => 96 * e,
    En = (e) => e / 96,
    In = (e, t) =>
        e.flatMap(
            (e) => (
                e.children && (e.children = In(e.children, t)),
                    t.includes(e.id) ? e.children || [] : [e]
            ),
        ),
    Ln = (e, t, a, n = []) => {
        t && !n.includes(t) && (e = t)
        let i = e ? [e] : []
        if (a?.length) {
            const t = a.filter((e) => !n.includes(e))
            t.length && ((i = t), (e && t.includes(e)) || (e = t[0]))
        }
        return {next: e, nextSelectedIds: i}
    },
    projectRemoveItems = async (e, t, a = {}) => {
        const n = await projectGet(e)
        if (!n) return ye.info(`project #${e} is not found!`), !1
        let i = n.tree
        i = In(i, t)
        const r = n.current_item_id,
            o = n.selected_item_ids,
            s = n.tree_for_show,
            l =
                Ae(s, t, (e) => "file" !== e.type && !e.is_in_trashcan)?.id ||
                null
        if (
            !a.skipMoveToNextItem &&
            ((r && t.includes(r)) || o?.find((e) => t.includes(e)))
        ) {
            const {next: a, nextSelectedIds: n} = Ln(l, r, o, t)
            await projectUpdateTree({
                id: e,
                tree: i,
                selected_item_ids: n,
                current_item_id: a,
            }),
                be(b, e, n, a)
        } else await projectUpdateTree({id: e, tree: i})
        for (let a of t) await on(a, e)
        return be(B), trackEvent("article", "move_to_unsorted"), !0
    },
    On = (e, t) => {
        let a = Se(e, t)
        if (!a) return null
        let n = a.findIndex((e) => e.id === t)
        if (-1 === n) return null
        let i = a[n + 1]
        return i ? i.id : null
    }

function Rn(e, t) {
    e && t.push(e.id), e.children && e.children.forEach((e) => Rn(e, t))
}

const projectMoveItemsToTrashcan = async (e, t, a = {}) => {
        const n = await projectGet(e)
        if (!n) return ye.info(`project #${e} is not found!`), null
        let i = (0, W.cloneDeep)(n.tree_for_show),
            r = n.tree,
            o = xe(i, (e) => t.includes(e.id))
        const s = []
        o.forEach((e) => Rn(e, s))
        const l = n.current_item_id,
            c = n.selected_item_ids
        let d =
            Ae(
                i,
                o.length ? s : t,
                (e) => "file" !== e.type && !e.is_in_trashcan,
            )?.id || null
        if (0 === o.length) return ye.info("items not found!"), null
        const _ = []
        for (let a of o)
            ke(a.children, (e) => t.includes(e.id)),
                await trashcanAdd({
                    type: "item",
                    data: a,
                    project_id: e,
                    path: await Sn(n, a.id),
                    next_id: On(r, a.id),
                }),
                _.push([a.id, ...Cn(a)]),
                ke(r, (e) => e.id === a.id)
        const m = _.flat()
        if (
            (a.fromGraph && be("graph_menu_delete_articles", m),
            !a.skipMoveToNextItem &&
            ((l && m.includes(l)) || c?.find((e) => m.includes(e))))
        ) {
            const {next: t, nextSelectedIds: a} = Ln(d, l, c, m)
            ;(d = t),
                await projectUpdateTree({
                    id: e,
                    tree: r,
                    selected_item_ids: a,
                    current_item_id: d,
                }),
                be(b, e, a, d)
        } else await projectUpdateTree({id: e, tree: r})
        return be(E, m), be(L), d
    },
    qn = (e, t) => {
        let a = Se(e, t)
        if (!a) return null
        let n = a.findIndex((e) => e.id === t)
        if (-1 === n) return null
        let i = a[n + 1]
        return i ? i.id : null
    },
    projectMoveItemToTrashcan = async (e, t) => {
        const a = await projectGet(e)
        if (!a) return void ye.info(`project #${e} is not found!`)
        let n = a.tree_for_show,
            i = a.tree,
            r = xe(n, (e) => e._tid === t)
        if (0 === r.length)
            return void ye.info(`item with _tid #${t} is not found!`)
        ke(n, (e) => e._tid === t)
        const o = []
        for (let t of r)
            (await itemGet(t.id)) &&
            (await trashcanAdd({
                type: "item",
                data: t,
                project_id: e,
                path: await itemGetPath(e, t.id),
                next_id: qn(i, t.id),
            }),
                o.push([t.id, ...Cn(t)])),
                ke(i, (e) => e.id === t.id)
        await projectUpdateTree({id: e, tree: i}),
            be(L),
            be(E, o.flat()),
            trackEvent("move_to_trashcan", "project")
    },
    projectMoveToTrashcan = async (e) => {
        const t = await ua(),
            a = await t.collection.projects.all(),
            n = a.reduce((e, t) => ((e[t.id] = t), e), {})
        let i = null
        const r = a.find((t) =>
                t.children?.find(
                    (t, a, n) => t.id === e && ((i = n[a + 1]?.id), !0),
                ),
            ),
            o = r ? [{id: r.id, title: r.title, icon: r.icon}] : []
        if (r) await tn(r.id, e)
        else {
            const a = await t.list.root_project_ids.all(),
                n = a.findIndex((t) => t === e)
            ~n && (i = a[n + 1] || null),
                await t.list.root_project_ids.set(a.filter((t) => t !== e))
        }
        const s = n[e]
        if (!s) return
        const l = []
        if (s.versions?.length) {
            const e = (
                await t.collection.items.filter(
                    (e) =>
                        !(
                            !e.currentVersion ||
                            e.isInTrashcan ||
                            e.hasLocalChanges ||
                            ((1 !== e.belongsTo?.length ||
                                    !e.belongsTo.includes(s.id)) &&
                                e.belongsTo?.length) ||
                            !e.receivedVersions?.every((e) =>
                                s.versions?.includes(e.version),
                            )
                        ),
                    [
                        "id",
                        "receivedVersions",
                        "currentVersion",
                        "hasLocalChanges",
                        "belongsTo",
                        "isInTrashcan",
                    ],
                )
            ).map((e) => e.id)
            ye.warning("hide item by project package", e), l.push(...e)
        }
        await Promise.all(
            l.map(async (e) =>
                itemUpdateMiscContent({id: e, isInTrashcan: !0}),
            ),
        ),
            await trashcanAdd({
                type: "project",
                data: {...s, children: wn(s, n)},
                path: o,
                next_id: i,
                items_need_to_hide: l,
            }),
            trackEvent("project", "move_to_trashcan"),
            await t.collection.projects.delete((t) => t.id === e),
            be(x),
            be(L),
        l.length && be(O)
    },
    projectSetTree = async (e, t, a) => {
        const n = await ua(),
            i = await n.collection.projects.all()
        if ("in" === a) {
            const a = Wn(e, i)
            if (a) {
                const n = a.id
                n !== t && (await tn(n, e), await en(t, e))
            } else await Za(e), await en(t, e)
        } else {
            const n = Wn(e, i),
                r = Wn(t, i)
            n ? await tn(n.id, e) : await Za(e),
                r
                    ? await en(r.id, e, {
                        siblingId: t,
                        insertTo: a,
                    })
                    : await Ka(e, {siblingId: t, insertTo: a})
        }
        be("projects_tree_update"), trackEvent("project", "sort", "drag")
    },
    Wn = (e, t) => t.find((t) => t.children?.find((t) => t.id === e)),
    $n = (e, t = 0) => {
        let a = []
        return (
            e.map((e) => {
                a.push({...e, level: t + 1}),
                e.children && (a = [...a, ...$n(e.children, t + 1)])
            }),
                a
        )
    },
    projectGetHierarchyItems = async (e, t = !0, a, n = !1) => {
        let i = await projectGet(e, !0)
        if (!i) return null
        let {tree: r} = i,
            o = $n(r).map((e) => ({id: e.id, level: e.level}))
        const s = await Promise.all(
            o.map(({id: e, level: t}) =>
                itemGetWithLocalContent(e, !0, !0, !n),
            ),
        )
        let l = "",
            c = {}
        if (i.template || i.own_template)
            (l = i.template || ""), (c = i.own_template || {})
        else {
            const e = s.find((e) => e?.template || e?.own_template)
            e && ((l = e.template || ""), (c = e.own_template || {}))
        }
        let d = s
            .map((e, t) =>
                e && "file" !== e.rawType && "file" !== e.type
                    ? {
                        ...e,
                        level: o[t]?.level,
                    }
                    : void 0,
            )
            .filter((e) => !!e)
        if (a) {
            d = d.filter((e) => a.includes(e.id))
            const e = await ua(),
                t = await e.list.card_ids.all(),
                n = a.filter((e) => t.includes(e))
            if (n.length) {
                const e = await Promise.all(
                    n.map((e) => itemGetWithLocalContent(e, !0, !0, !0)),
                )
                d = [...d, ...e.flatMap((e) => (e ? {...e, level: 1} : []))]
            }
        }
        return {items: d, projectName: i.title, template: l, own_template: c}
    },
    projectCurrentItemTab = async (e, t = {}) => {
        const a = await ua(),
            n = await a.collection.projects.find((t) => t.id === e)
        if (!n) return void console.error(`invalid project #${e} !`)
        let i = n.tree || [],
            r = n.current_item_id
        if (!r) return
        i = (function (e, t, a = !1) {
            return a
                ? (function (e, t) {
                    let a = $().cloneDeep(e)
                    const n = Te(a, t)
                    if (!n) return e
                    const i = Se(a, n.id),
                        r = i.findIndex((e) => e.id === n.id)
                    if (!~r) return e
                    if (n.children) {
                        const e = n.children.findIndex((e) => e.id === t)
                        if (~e) {
                            const t = n.children.splice(e, 1)
                            return i.splice(r + 1, 0, ...t), a
                        }
                    }
                    return e
                })(e, t)
                : (function (e, t) {
                    let a = $().cloneDeep(e)
                    const n = Se(a, t),
                        i = n.findIndex((e) => e.id === t)
                    if (!i || !~i) return e
                    const r = n[i - 1]
                    if (r) {
                        const e = n.splice(i, 1)
                        return (
                            (r.children = r.children
                                ? [...r.children, ...e]
                                : e),
                                a
                        )
                    }
                    return e
                })(e, t)
        })(i, r, t.isOutdent)
        let o = {id: e, tree: i}
        await projectUpdateTree(o)
    },
    Yn = require("jszip")
var Jn = modulex.fn(Yn)

function Kn(e) {
    let t = [],
        a = 0
    for (; a < e.length;) {
        let n = e.readUInt32BE(a)
        a += 4
        let i = e.slice(a, a + n)
        t.push(i), (a += n)
    }
    return t
}

function Zn(e, t = !1) {
    let a = []
    return (
        e.forEach((e) => {
            if (t && 0 === e.length) return
            let n = Buffer.alloc(4)
            n.writeUInt32BE(e.length, 0), a.push(n, Buffer.from(e))
        }),
            Buffer.concat(a)
    )
}

function Qn(e, t) {
    if (!Object.prototype.hasOwnProperty.call(e, t))
        throw new TypeError("attempted to use private field on non-instance")
    return e
}

var Xn = 0

function ei(e) {
    return "__private_" + Xn++ + "_" + e
}

var ti = ei("times")

class ai {
    constructor() {
        Object.defineProperty(this, ti, {writable: !0, value: {}}),
            this.markTime("process start")
    }

    markTime(e) {
        if (((Qn(this, ti)[ti][e] = Date.now()), "process end" === e)) {
            const e = Object.keys(Qn(this, ti)[ti])
                .filter((e) => e.endsWith("start"))
                .reduce((e, t) => {
                    const a = t.replace("start", "end")
                    return (
                        Qn(this, ti)[ti][a] &&
                        (e[t.replace(" start", "")] =
                            Qn(this, ti)[ti][a] - Qn(this, ti)[ti][t]),
                            e
                    )
                }, {})
            ye.info("process time: ", e), console.table(e)
        }
    }
}

const ni = require("yjs")

function ii(e, t) {
    if (!Object.prototype.hasOwnProperty.call(e, t))
        throw new TypeError("attempted to use private field on non-instance")
    return e
}

var ri = 0

function oi(e) {
    return "__private_" + ri++ + "_" + e
}

var si = oi("tree"),
    li = oi("ydoc"),
    ci = oi("root")

class di {
    constructor(e, t, a, n = (e, t) => {
    }, i = !0, r) {
        if (
            ((this.onUpdate = n),
                Object.defineProperty(this, si, {
                    writable: !0,
                    value: void 0,
                }),
                Object.defineProperty(this, li, {
                    writable: !0,
                    value: void 0,
                }),
                Object.defineProperty(this, ci, {
                    writable: !0,
                    value: void 0,
                }),
                (ii(this, si)[si] = e),
                (ii(this, li)[li] = t ?? new ni.Doc({guid: r ?? void 0})),
                (ii(this, ci)[ci] = ii(this, li)[li].getMap("tree")),
            Array.isArray(a) && a.length > 0)
        )
            this.applyUpdate(a, "init")
        else if (i) {
            const t = {}
            _i(e, t)
            for (const [e, {path: a, order: n}] of Object.entries(t)) {
                const t = new ni.Map()
                t.set("path", a), t.set("order", n), ii(this, ci)[ci].set(e, t)
            }
        }
        ii(this, li)[li].on("update", this.onYDocUpdate.bind(this))
    }

    addTreeNodeToRoot(e) {
        const t = new ni.Map()
        t.set("path", ""), t.set("order", 0), ii(this, ci)[ci].set(e.id, t)
    }

    addTreeNodeNextTo(e, t) {
        const a = new ni.Map(),
            n = ii(this, ci)[ci].get(t.id)
        if (!n) return
        let i = n.get("path")
        const r = n.get("order")
        ;(i = i ? i.replace(t.id, e.id) : ""),
            a.set("path", i),
            a.set("order", +r + 1)
    }

    onYDocUpdate(e, t) {
        "init" !== t && this.onUpdate && this.onUpdate(e, t)
    }

    deleteYElementById(e) {
        ii(this, ci)[ci].delete(e)
    }

    updateStateFromTree(e) {
        const t = {}
        let a = !1
        _i(e, t)
        const n = []
        for (const [e, {path: i, order: r}] of Object.entries(t)) {
            const t = ii(this, ci)[ci].get(e)
            if (t)
                t.get("path") !== i
                    ? ((a = !0), t.set("path", i))
                    : t.get("order") !== r && ((a = !0), t.set("order", r))
            else {
                const t = new ni.Map()
                t.set("path", i),
                    t.set("order", r),
                    ii(this, ci)[ci].set(e, t),
                    (a = !0)
            }
            n.push(e)
        }
        for (const e of ii(this, ci)[ci].keys())
            n.includes(e) || (ii(this, ci)[ci].delete(e), (a = !0))
        return a
    }

    applyUpdate(e, t = "update") {
        ni.transact(ii(this, li)[li], () => {
            e.forEach((e) => {
                ni.applyUpdate(ii(this, li)[li], e)
            }, t)
        })
    }

    destroy() {
        ii(this, li)[li].destroy()
    }

    get ydoc() {
        return ii(this, li)[li]
    }

    get root() {
        return ii(this, ci)[ci]
    }

    get tree() {
        return (function (e) {
            let t = []
            const a = {}
            for (const [n, {path: i, order: r}] of Object.entries(e).sort(
                (e, t) => e[1].path.length - t[1].path.length,
            )) {
                const e = {id: n}
                if (i) {
                    const t = i.split("/"),
                        n = a[t[t.length - 2]]
                    n.children || (n.children = []),
                        n.children[r]
                            ? Array.isArray(n.children[r])
                                ? n.children[r].push(e)
                                : (n.children = [n.children[r], e])
                            : (n.children[r] = e)
                } else
                    t[r]
                        ? Array.isArray(t[r])
                            ? t[r].push(e)
                            : (t[r] = [t[r], e])
                        : (t[r] = e)
                a[n] = e
            }
            return (
                (t = t.flat().filter((e) => !!e)),
                    Object.values(a).forEach((e) => {
                        e.children &&
                        (e.children = e.children.flat().filter((e) => !!e))
                    }),
                    t
            )
        })(ii(this, ci)[ci].toJSON())
    }

    get state() {
        return ni.encodeStateAsUpdate(ii(this, li)[li])
    }
}

function _i(e, t, a) {
    let n = 0
    for (const i of e)
        (t[i.id] = {
            path: a ? a + "/" + i.id : "",
            order: n,
        }),
        i.children && _i(i.children, t, t[i.id].path || i.id),
            n++
}

function mi(e, t) {
    if (!Object.prototype.hasOwnProperty.call(e, t))
        throw new TypeError("attempted to use private field on non-instance")
    return e
}

var pi = 0

function ui(e) {
    return "__private_" + pi++ + "_" + e
}

async function hi(e, t, a, n, i = {}, r = "article", o) {
    if (a.find((t) => t.id === e)) return
    const s = await itemGet(e)
    if (s) {
        if (
            ((s._id = void 0),
            (s.tags || s.tags_in_content) &&
            n.push(...(s.tags || []), ...(s.tags_in_content || [])),
                "file" === s.rawType
                    ? (i[e] = s)
                    : "card" === r && (s.rawType = "card"),
            s.backwards_cites &&
            (s.backwards_cites = s.backwards_cites.filter(
                (e) => ~t.findIndex((t) => t.id === e),
            )),
            s.belongsTo?.length &&
            (s.belongsTo = s.belongsTo.filter((e) => e === o)),
                a.push(s),
                s.forwards_cites)
        )
            for (let {id: e, citeType: r} of s.forwards_cites.filter(
                (e) =>
                    !t.find(
                        (t) => t.id === e.id && !a.find((t) => t.id === e.id),
                    ),
            ))
                await hi(e, t, a, n, i, r, o)
        if (Array.isArray(s.footnotes) && s.footnotes.length)
            for (let e of s.footnotes) await hi(e, t, a, n, i, "card", o)
        else if (
            !s.currentVersion &&
            "file" !== s.rawType &&
            s.content &&
            "string" != typeof s.content
        ) {
            const e = pt("footnote", s.content)
            if (e.length)
                for (let r of e) {
                    const e = r.attrs?.id || ""
                    e && (await hi(e, t, a, n, i, "card", o))
                }
            s.footnotes = e.map((e) => e.attrs?.id || "")
        }
        if (s.assetsInContent && s.assetsInContent.length)
            for (let e of s.assetsInContent) await hi(e, t, a, n, i, r, o)
    }
}

var fi = ui("projectId"),
    gi = ui("project"),
    yi = ui("items"),
    bi = ui("tags"),
    wi = ui("templates"),
    vi = ui("files"),
    xi = ui("graph"),
    ki = ui("version")
const Ai = class extends ai {
    constructor(e) {
        if (
            (super(),
                Object.defineProperty(this, fi, {
                    writable: !0,
                    value: void 0,
                }),
                Object.defineProperty(this, gi, {
                    writable: !0,
                    value: void 0,
                }),
                Object.defineProperty(this, yi, {
                    writable: !0,
                    value: [],
                }),
                Object.defineProperty(this, bi, {
                    writable: !0,
                    value: [],
                }),
                Object.defineProperty(this, wi, {
                    writable: !0,
                    value: {},
                }),
                Object.defineProperty(this, vi, {
                    writable: !0,
                    value: {},
                }),
                Object.defineProperty(this, xi, {
                    writable: !0,
                    value: void 0,
                }),
                Object.defineProperty(this, ki, {
                    writable: !0,
                    value: void 0,
                }),
                !e)
        )
            throw new Error("project is required")
                ;
        (mi(this, fi)[fi] = e.id),
            (e._id = void 0),
            (mi(this, gi)[gi] = e),
            (mi(this, ki)[ki] = (0, Ja.v4)()),
            mi(this, gi)[gi].versions
                ? mi(this, gi)[gi].versions.push(mi(this, ki)[ki])
                : (mi(this, gi)[gi].versions = [mi(this, ki)[ki]])
    }

    async package() {
        if (!mi(this, gi)[gi]) return
        const e = we(mi(this, gi)[gi].tree_for_show)
        if (mi(this, gi)[gi].template) {
            this.markTime("package template start")
            const e = await templateGet(mi(this, gi)[gi].template)
            e &&
            !e.isBuildIn &&
            "__DEFAULT__" !== e.title &&
            ((e._id = void 0),
                (mi(this, wi)[wi][mi(this, gi)[gi].template] = e)),
            e &&
            "__DEFAULT__" === e.title &&
            (mi(this, gi)[gi].template = void 0),
                this.markTime("package template end")
        }
        this.markTime("get project graph start"),
            (mi(this, xi)[xi] = await graphGetProjectGraphById(
                mi(this, fi)[fi],
            )),
        mi(this, xi)[xi] && (mi(this, xi)[xi]._id = void 0),
            this.markTime("get project graph end"),
            this.markTime("package items start"),
            ye.info("start process items and citations"),
            await this.processItemsAndCitations(e, mi(this, fi)[fi]),
            ye.info(
                "end process items and citations, items length: ",
                mi(this, yi)[yi].length,
            ),
            this.markTime("package items end")
    }

    async processItemsAndCitations(e, t) {
        for (const a of e) {
            const {id: n} = a
            await hi(
                n,
                e,
                mi(this, yi)[yi],
                mi(this, bi)[bi],
                mi(this, vi)[vi],
                void 0,
                t,
            )
        }
        if (mi(this, xi)[xi]?.externalItemList?.length)
            for (const a of mi(this, xi)[xi].externalItemList)
                await hi(
                    a.id,
                    e,
                    mi(this, yi)[yi],
                    mi(this, bi)[bi],
                    mi(this, vi)[vi],
                    void 0,
                    t,
                )
    }

    async serialize(e = () => {
    }) {
        const t = await accountGetInfo(),
            a = t?.uid || "N/A",
            n = t?.username || "N/A",
            i = {
                uid: a,
                shareTime: Date.now(),
                shareType: "Project",
                shareTypeId: mi(this, fi)[fi],
                version: mi(this, ki)[ki],
                nickname: n,
            }
        mi(this, gi)[gi].package_authors = mi(this, gi)[gi].package_authors
            ? {
                ...mi(this, gi)[gi].package_authors,
                [i.version]: i,
            }
            : {[i.version]: i}
        const r = new (Jn())()
        this.markTime("zip metadata start"),
            r.file("meta.json", JSON.stringify(i)),
            this.markTime("zip metadata start"),
            this.markTime("zip tags start")
        const o = await this.processTags()
        if (
            (this.markTime("zip tags end"),
                this.markTime("zip project data start"),
                (mi(this, gi)[gi].tree_for_show = void 0),
                (mi(this, gi)[gi].is_collapsed = void 0),
                (mi(this, gi)[gi].selected_item_ids = void 0),
                (mi(this, gi)[gi].current_item_id = void 0),
                !mi(this, gi)[gi].tree_y_state)
        ) {
            const e = new di(mi(this, gi)[gi].tree, void 0)
            mi(this, gi)[gi].tree_y_state = [...e.state]
        }
        r.file(
            "project.json",
            JSON.stringify({
                items: mi(this, yi)[yi].map((e) => e.id),
                tags: o,
                graph: mi(this, xi)[xi],
                project: mi(this, gi)[gi],
            }),
        ),
            this.markTime("zip project data end")
        const s = r.folder("Y_CHANGES")
        this.markTime("getYChangeState start")
        const l = await (async function (e) {
            const t = {}
            for (const a of e)
                "file" !== a.rawType &&
                (t[a.id] = await getYStateFromJSON(a.content))
            return t
        })(
            mi(this, yi)[yi].filter(
                (e) => "file" !== e.rawType && !e.currentVersion,
            ),
        ).catch(() => ({}))
        this.markTime("getYChangeState end")
        const c = {}
        this.markTime("zip items start")
        for (const e of mi(this, yi)[yi]) {
            let t
            ;(c[e.id] = !0),
                (e.currentVersion = mi(this, ki)[ki]),
                l[e.id]
                    ? (await addBaseState(e.id, l[e.id]),
                        (t = Buffer.from(l[e.id])),
                        (e.baseStateCreateMs = Date.now()))
                    : "file" !== e.rawType &&
                    (t = Buffer.from(await getBaseState(e.id)))
            const o = e.packagedVersionsIdxMap || {}
            if (
                ((o[mi(this, ki)[ki]] = e.currentYDocChangeIndex || 0),
                    (e.content_when_share = void 0),
                    (e.currentYDocChange = void 0),
                    (e.packagedVersionsIdxMap = void 0),
                    (e.hasLocalChanges = void 0),
                    (e.currentYDocChangeIndex = void 0),
                    "file" === e.rawType
                        ? itemUpdateMiscContent({
                            id: e.id,
                            currentVersion: mi(this, ki)[ki],
                            packagedVersionsIdxMap: o,
                        }).catch(ye.error)
                        : itemUpdateMiscContent({
                            id: e.id,
                            currentVersion: mi(this, ki)[ki],
                            baseStateCreateMs: e.baseStateCreateMs || Date.now(),
                            footnotes: e.footnotes,
                            packagedVersionsIdxMap: o,
                        }).catch(ye.error),
                s && t)
            ) {
                ;(e.packagedLocalChanges = {
                    version: mi(this, ki)[ki],
                    uid: a,
                    nickname: n,
                    time: i.shareTime,
                }),
                e.receivedVersions &&
                (e.packagedReceivedChanges = e.receivedVersions),
                "card" !== e.rawType && (e.content = void 0)
                const r = s.folder(e.id)
                if (r) {
                    r.file("baseState", t)
                    const a = await getLocalChanges(e.id, !1)
                    if ((r.file(mi(this, ki)[ki], Zn(a)), e.receivedVersions))
                        for (const t of e.receivedVersions) {
                            const a = await getVersion(e.id, t.version, !1)
                            r.file(t.version, a)
                        }
                }
            }
            if (e.template) {
                const t = await templateGet(e.template)
                t &&
                "__DEFAULT__" !== t.title &&
                !t.isBuildIn &&
                ((t._id = void 0), (mi(this, wi)[wi][t.id] = t)),
                t && "__DEFAULT__" !== t.title && (e.template = void 0)
            }
            r.file(e.id + ".json", JSON.stringify(e))
        }
        this.markTime("zip items start"), this.markTime("zip assets start")
        const d = Object.values(mi(this, vi)[vi]).filter((e) => e.is_in_assets)
        if (d.length) {
            const e = r.folder("assets")
            try {
                for (const t of d) {
                    const a = await fileGetAssetPath(t.id, t.src)
                    e &&
                    a &&
                    (0, ne.existsSync)(a) &&
                    e.file(
                        t.id + t.src?.replace(/^assets/, ""),
                        (0, ne.readFileSync)(a),
                    )
                }
            } catch (_err) {
                ye.error(_err)
            }
        }
        this.markTime("zip assets end"), this.markTime("zip templates start")
        const _ = Object.values(mi(this, wi)[wi])
        _.length && r.file("templates.json", JSON.stringify(_)),
            this.markTime("zip templates end"),
            this.markTime("zip relations start")
        const m = await relationGetAll()
        m.length &&
        r.file(
            "relations.json",
            JSON.stringify(
                m
                    .filter((e) => c[e.source] && c[e.target])
                    .map((e) => ((e._id = void 0), e)),
            ),
        ),
            this.markTime("zip relations end")
        try {
            e && e()
        } catch (_err) {
            ye.error(_err)
        }
        this.markTime("process end"),
            await this.save(r),
        mi(this, gi)[gi] &&
        (await projectUpdateOther({
            id: mi(this, gi)[gi].id,
            versions: mi(this, gi)[gi].versions,
            tree_y_state: mi(this, gi)[gi].tree_y_state,
            package_authors: mi(this, gi)[gi].package_authors,
        }))
    }

    async processTags() {
        const e = [],
            t = new Set(),
            a = {}
        if (mi(this, bi)[bi].length) {
            mi(this, bi)[bi] = [...new Set(mi(this, bi)[bi])]
            const n = (
                await Promise.all(mi(this, bi)[bi].map((e) => tagGet(e)))
            ).filter((e) => !!e)
            for (let i of n) {
                if (i.link_to) {
                    if (t.has(i.link_to)) {
                        e.push(i)
                        continue
                    }
                    {
                        const r = await tagGet(i.link_to)
                        if (r) {
                            const o = n.filter(
                                    (e) => e.link_to === i.link_to && e.id !== i.id,
                                )
                            ;(a[i.link_to] = r.id = i.id),
                                e.push(r),
                                t.add(i.id),
                                (i = r),
                            o.length &&
                            o.forEach((e) => {
                                e.link_to = i.id
                            })
                        }
                    }
                } else e.push(i), t.add(i.id)
                const r = await getHierarchicalTags(i.id)
                if (r.length && r.length >= 2) {
                    const a = r.pop()
                    if (a.id !== i.id) {
                        const n = r.pop()
                        if (t.has(n.id)) {
                            const t = e.find((e) => e.id === n.id)
                            t.child?.splice(t.child.indexOf(a.id), 1, i.id)
                        } else
                            n.child?.splice(n.child.indexOf(a.id), 1, i.id),
                                e.push(n),
                                t.add(n.id)
                    } else
                        r.forEach((a) => {
                            t.has(a.id) || (e.push(a), t.add(a.id))
                        })
                }
            }
        }
        return (
            e.forEach((e) => {
                ;(e._id = void 0),
                e.child &&
                e.child.length &&
                (e.child = e.child.filter((e) => t.has(e))),
                e.parent && a[e.parent] && (e.parent = a[e.parent]),
                    (e.versions = [...(e.versions || []), mi(this, ki)[ki]])
            }),
                console.log(e, t),
                e
        )
    }

    async save(e) {
        const t = await configGetLocale(),
            a = new Ie(t),
            {lang: n} = a,
            i = await fe.dialog.showSaveDialog({
                title: n.project_package_save,
                defaultPath: mi(this, gi)[gi]?.title,
                buttonLabel: n.save,
                filters: [
                    {name: "Lattics", extensions: ["lattics", "LATTICS"]},
                ],
            })
        if (i.filePath)
            return (
                ye.info("Writing .lattics... ", i),
                    new Promise((t, a) => {
                        be(c),
                            e
                                .generateNodeStream({
                                    type: "nodebuffer",
                                    compression: "STORE",
                                    comment: `Lattics 1.0.0-${mi(this, ki)[ki]} `,
                                })
                                .pipe(ie().createWriteStream(i.filePath))
                                .on("finish", () => {
                                    ye.success(".lattics written."), t()
                                })
                                .on("error", (e) => {
                                    ye.error(e), a(e)
                                })
                    })
            )
    }

    static async deserialize() {
    }

    static async load() {
    }
}

async function projectSerdeToLocal(e) {
    try {
        const t = await projectGet(e)
        if (!t) throw new Error("Project not found")
        const a = await configGetLocale(),
            n = new Ie(a),
            {lang: i} = n
        be(d, {info: i.project_package})
        const r = Date.now(),
            o = new Ai(t)
        await o.package(),
            await o.serialize(() => {
                be(c)
            }),
            be(v, t.id),
            ye.info(
                `serialize project ${t.title} done, cost ${Date.now() - r}ms`,
            )
    } catch (_err) {
        be(c), ye.error(_err)
    }
}

const projectUpdateIsCollapsed = async (e, t = !1) =>
        await Xa({id: e, is_collapsed: t}, "updateIsCollapsed"),
    projectUpdateTitle = async (e, t = {}) => {
        const a = await Xa(e, "updateTitle")
        if (!t.silent_save) {
            const n = a?.[0]
            be(w, e.id, t.fromGraph),
            n && be(k, {...e, edit_time_ms: n.edit_time_ms})
        }
    },
    projectUpdateIcon = async (e, t = {}) => {
        const a = await Xa(e, "updateIcon")
        if (!t.silent_save) {
            const t = a?.[0]
            t && be(k, {...e, edit_time_ms: t.edit_time_ms})
        }
    },
    projectUpdateTree = async (e, t = {}) => {
        if ((await Xa(e, "updateTree"), e.tree)) {
            const t = await ua(),
                a = await t.collection.projects.find(
                    (t) => t.id === e.id,
                    ["id", "versions", "tree_y_state", "fieldModifyTimes"],
                )
            if (a?.versions?.length && a?.tree_y_state?.length) {
                const n = new di(e.tree, void 0, [
                    new Uint8Array(a.tree_y_state),
                ])
                n.updateStateFromTree(e.tree) &&
                (await t.collection.projects.update((t) => t.id === e.id, {
                    tree_y_state: [...n.state],
                    fieldModifyTimes: {
                        ...(a.fieldModifyTimes || {}),
                        tree: Date.now(),
                    },
                }))
            }
        }
        t.silent_save || be(w, e.id, t.fromGraph)
    },
    projectUpdateOther = async (e) => await Xa(e, "updateOther"),
    Di = (e, t) => {
        let a = le().parse(e),
            {name: n, ext: i} = a,
            r = n.match(/(.*)_(\d+)$/)
        return (
            r
                ? ((t = parseInt(r[2]) + 1), (e = r[1] + `_${t}` + a.ext))
                : (e = n + `_${t}` + a.ext),
                {
                    filename: e,
                    idx: t,
                }
        )
    },
    importItem = async (e, t) => {
        if (!ie().existsSync(e)) return {success: !1, code: "not_found"}
        let a, n, i, r, o
        try {
            let t = await (async (e) => {
                    let t = le().parse(e)
                    await ie().ensureDir(t.dir)
                    let {
                            src: a,
                            src_abs: n,
                            file_name: i,
                        } = await (async (e) => {
                            let t = await ha(),
                                a = ee()()
                                    .format("YYYY/MM/DD")
                                    .replace(/\//g, le().sep),
                                n = 1
                            for (; ;) {
                                let i = le().join(a, e),
                                    r = le().join(t, i)
                                if (!ie().existsSync(r))
                                    return {src_abs: r, src: i, file_name: e}
                                let o = Di(e, n)
                                ;(e = o.filename), (n = o.idx + 1)
                            }
                        })(t.base),
                        r = t.ext.toLowerCase().replace(/^\./, ""),
                        {content: o, type: s} = await (async (e, t) => {
                            if (["txt", "md", "html"].includes(t))
                                try {
                                    return {
                                        type: "doc",
                                        content: await te.promises.readFile(
                                            e,
                                            "utf-8",
                                        ),
                                    }
                                } catch (_err) {
                                    console.error(_err)
                                }
                            return {type: "file", content: null}
                        })(e, r)
                    return (
                        null === o &&
                        (await ie().copy(e, n),
                            ye.info(`file copied to: ${n}`)),
                            {
                                type: s,
                                src: a,
                                file_name: i,
                                ext: r,
                                content: o,
                            }
                    )
                })(e)
            ;(o = t.type),
                (r = t.content),
                (a = t.src),
                (n = t.file_name),
                (i = t.ext)
        } catch (_err) {
            return (
                console.warn(_err),
                    trackEvent("article", "import_file", "fail"),
                    {
                        success: !1,
                        code: "read_fail",
                        message: _err.message,
                    }
            )
        }
        let s = {type: o, title: n, local_import_from: e}
        null !== r ? (s.content = r) : ((s.src = a), (s.ext = i))
        let {project_id: l, item_id: c} = t
        return (
            c ? await itemUpdate({id: c, ...s}) : await itemAdd(s, l),
                trackEvent("article", "import_file", "success"),
                {success: !0}
        )
    },
    importItems = async (e) => {
        let {lang: t} = await qe(),
            a = await fe.dialog.showOpenDialog({
                title: t.import_document,
                defaultPath: global.last_path,
                properties: ["openFile", "multiSelections"],
            })
        if (a.canceled) return !1
        let n = a.filePaths,
            i = []
        for (let t of n) {
            let a = {...(await importItem(t, {project_id: e})), file_path: t}
            i.push(a)
        }
        return i
    },
    itemAdd = async (e = {}, t, a) => {
        const n = await ua(),
            i = new Date().getTime()
        let r = await n.collection.items.insert({
            title: "",
            type: "doc",
            content: "",
            rawType: a?.is_card ? "card" : "doc",
            ...e,
            id: a?.uuid || (0, Ja.v4)(),
            add_time_ms: i,
            edit_time_ms: i,
        })
        return (
            ye.info("add item:", r.id),
                trackEvent("new", "article"),
            t &&
            (a && !a.relate_where && (a.relate_where = "after"),
                await projectAddItem(t, r.id, {
                    ...a,
                    current_item_id: r.id,
                    selected_item_ids: [r.id],
                })),
            e.tags && be(g, e.tags),
            e.tags_in_content && be(y, r.id, e.tags_in_content),
                be(f, r.id),
                be("items_added", r.id, a?.needNotEditTitle),
                r
        )
    },
    itemAddUnsorted = async (e, t = {}) => {
        if (!e.length) return
        const a = []
        for (let n of e) {
            const e = await itemAdd(n, void 0, t)
            a.push(e)
        }
        return be("unsorted_items_added", a), a
    },
    itemAddUnsortedFromCards = async (e) => {
        const t = await ua()
        for (let t of e)
            await itemUpdateOther({id: t, rawType: "doc"}, !0),
                be(o, t),
                trackEvent("card", "convert_to_article")
        await t.list.card_ids.delete((t) => e.includes(t)),
            be(O),
            be(B),
            trackEvent("article", "move_to_unsorted")
    },
    itemGetByIds = async (e, t = !1) => {
        const a = []
        for (let n of e) {
            const e = await itemGet(n, t)
            e && a.push(e)
        }
        return a
    },
    Ri = async (e) =>
        Object.values(e.collection.projects._docs).map(
            (e) => e._data || e.ensure(),
        )

async function Fi(e) {
    const t = {}
    for (let a of e) t[a.id] = a
    const a = await ua(),
        n = await Ri(a),
        i = {},
        r = (e, t) => {
            e?.forEach((e) => {
                const a = o(e.id, t)
                ;(i[e.id] = a), e.children?.length && r(e.children, a)
            })
        },
        o = (e, a) => {
            const n = t[e]
            return [
                ...a,
                {type: "doc", id: e, title: n?.title || "", icon: n?.icon},
            ]
        }
    for (let e of n) {
        const t = e.tree,
            a = [{type: "project", id: e.id, title: e.title || ""}]
        r(t, a)
    }
    return i
}

const qi = (e, t = 0) => {
        let a = ""
        for (let n of e)
            if (
                (n.text && (a += n.text),
                Array.isArray(n.content) && (a += qi(n.content, t)),
                ("paragraph" !== n.type &&
                    "heading" !== n.type &&
                    "code_block" !== n.type) ||
                (a += "\n"),
                t > 0 && a.length > t)
            ) {
                a = a.substring(0, t) + "..."
                break
            }
        return a
    },
    Ni =
        /[\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u4E00-\u9FD5]{1}/g,
    Ui = (e) => {
        let t = 0
        return (
            "" !=
            (e = (e = e.replace(Ni, () => (t++, " ")))
                .replace(/(< ([^>]+)<)/g, "")
                .replace(/\s+/g, " ")
                .replace(/^\s\s*/, "")
                .replace(/\s\s*$/, "")) && (t += e.split(" ").length),
                t
        )
    },
    Gi = (e) =>
        e
            ? (e = e.replaceAll(/[\u200b]/g, "").replaceAll(/\n/g, "")).length
            : 0,
    Wi = (e) => {
        let t = ""
        if ((e.text && (t += e.text), Array.isArray(e.content)))
            for (let a of e.content) t += Wi(a)
        return t.trim()
    },
    $i =
        /[\u0020-\u002f\u003a-\u0040\u005b-\u0060\u007b-\u007e\uff01-\uff0f\uff1a-\uff20\uff3b-\uff40\uff5b-\uff5e\u3000-\u303f\u2000-\u206f\ufe10-\ufe1f\u00a0-\u00bf\u2e00-\u2e7f]/g,
    Vi = (e) =>
        e
            ? "string" == typeof e
                ? e
                : "object" == typeof e && e.content
                    ? qi(e.content)
                    : e.toString()
            : "",
    Hi = (e) => {
        let {content: t} = e
        return Vi(t)
    },
    Yi = (e) => {
        const t = Vi(e)
        return Ui(t)
    },
    Ji = (e) => {
        const t = Vi(e)
        return Gi(t)
    },
    Ki = (e) => {
        const t = Hi(e)
        return Ui(t)
    },
    Zi = (e) => {
        const t = Hi(e),
            a = Ui(t),
            n = Gi(t),
            i = ((e) => (e ? (e = e.replaceAll(/[\s\u200b]/g, "")).length : 0))(
                t,
            ),
            r = ((e) => {
                if (!e) return 0
                let t = 0
                return e.replaceAll(Ni, () => (t++, "")), t
            })(t)
        return {
            textCount: a,
            charCount: n,
            charCountWithoutSpaces: i,
            asianCharCount: r,
            nonAsianCharCount: a - r,
            paragraphCount: ((e) => {
                let {content: t} = e
                if (!t) return 0
                if ("string" == typeof t) return 1
                let a = 0
                if ("object" == typeof t && t.content)
                    for (let e of t.content)
                        "paragraph" === e.type && Wi(e) && a++
                return a
            })(e),
            punctuationsCount: ((e) => {
                if (!e) return 0
                let t = 0
                return (
                    e
                        .replaceAll(/[\s\u200b]/g, () => "")
                        .replaceAll($i, (e) => (t++, "")),
                        t
                )
            })(t),
        }
    }

function Qi(e, t) {
    if (!Object.prototype.hasOwnProperty.call(e, t))
        throw new TypeError("attempted to use private field on non-instance")
    return e
}

var Xi = 0

function er(e) {
    return "__private_" + Xi++ + "_" + e
}

new Map()
var tr = er("cache"),
    ar = er("timer")
const nr = new (class {
    constructor(e = 18e4) {
        ;(this.timeout = e),
            Object.defineProperty(this, tr, {
                writable: !0,
                value: new Map(),
            }),
            Object.defineProperty(this, ar, {writable: !0, value: 0})
    }

    add(e, t) {
        Qi(this, tr)[tr].set(e, t), this.updateTimer()
    }

    updateTimer() {
        clearTimeout(Qi(this, ar)[ar]),
            (Qi(this, ar)[ar] = setTimeout(() => {
                this.clear()
            }, this.timeout))
    }

    clear() {
        ye.info("before clean cache: ", Qi(this, tr)[tr].size),
            Qi(this, tr)[tr].clear(),
            ye.info("after clean cache: ", Qi(this, tr)[tr].size)
    }

    get(e) {
        return Qi(this, tr)[tr].get(e)
    }
})()

async function itemGetByPage(e = 1, t = 20, a = "doc", n = "") {
    ye.info("getItemsByPage : ", e, n)
    let {lang: i} = await qe()
    const r = await ua()
    let o = (
        await r.collection.items.filter(
            (e) =>
                ("card" === a ? e.rawType === a : "card" !== e.rawType) &&
                !e.isInTrashcan,
        )
    ).sort((e, t) => t.edit_time_ms - e.edit_time_ms)
    const s = o.filter(
        (e) => "file" !== e.rawType && !e.content && e.currentVersion,
    )
    for (const e of s)
        try {
            e.content = await getLocalContentFromState(e.id, e.unSyncedVersions)
        } catch (_err) {
            console.log(_err)
        }
    const l = await Fi(o)
    n &&
    (o = o.filter((e) => {
        const t = nr.get(e.id)
        let a
        return (
            t && t.updateTime >= e.edit_time_ms
                ? (a = t.searchContent)
                : ((a = e.title + "\n\n" + Hi(e)),
                    nr.add(e.id, {
                        searchContent: a,
                        updateTime: e.edit_time_ms,
                    })),
            a.toLowerCase().indexOf(n.toLowerCase()) > -1
        )
    }))
    const c = (e - 1) * t,
        d = c + t >= o.length,
        _ = o.slice(c, c + t)
    return {
        list:
            "card" === a
                ? _
                : _.map((e) => ({
                    ...e,
                    path: l[e.id]
                        ? "/" +
                        l[e.id]?.map((e) => e.title || i.untitled).join("/")
                        : "",
                })),
        isFinish: d,
    }
}

const itemAll = async (e = !0) => {
        const t = await ua(),
            a = await t.collection.items.all()
        if (e) {
            const e = a.filter(
                (e) => !e.content && e.currentVersion && "file" !== e.rawType,
            )
            for (let t of e)
                try {
                    t.content = await getLocalContentFromState(
                        t.id,
                        t.unSyncedVersions,
                    )
                } catch (_err) {
                    console.log(_err)
                }
        }
        return a
    },
    itemGetUnsorted = async () => {
        const e = await ua()
        return (await mn(e)).filter(
            (e) =>
                e.id &&
                "card" !== e.rawType &&
                !e.isInTrashcan &&
                !e.fileItemInArticle &&
                !e.belongsTo?.length,
        )
    },
    itemGetTreeForShowByIds = async (e) =>
        0 === e.length
            ? []
            : (
                await Promise.all(
                    e.map((e) =>
                        (async (e) => {
                            const t = await itemGet(e)
                            if (t)
                                return {
                                    ...$().pick(t, [
                                        "id",
                                        "title",
                                        "type",
                                        "icon",
                                    ]),
                                    children: [],
                                    _tid: t.id,
                                    is_in_trashcan: t.isInTrashcan,
                                    is_removable: !!t.belongsTo?.length,
                                }
                        })(e),
                    ),
                )
            ).filter((e) => !!e),
    itemGetTemplate = async (e, t) => {
        const a = await ua()
        let n = !1,
            {
                own_template: i = {},
                template: r = "",
                belongsTo: o,
            } = (await a.collection.items.find(["id", e])) || {}
        const s = t || o?.[0] || ""
        if (r)
            return {
                own_template: i,
                template: r,
                id: e,
                isProject: n,
                project_id: s,
            }
        const l = s ? await projectGet(s, !0) : void 0
        return (
            l &&
            (l.own_template || l.template) &&
            ((r = l.template || ""), (i = l.own_template || {}), (n = !0)),
                {
                    own_template: i,
                    template: r,
                    id: e,
                    isProject: n,
                    project_id: l?.id || "",
                }
        )
    },
    itemGetKeys = async (e, ...t) => {
        const a = await ua()
        let n = await a.collection.items.find(["id", e])
        if (n && t.length) {
            const a = {}
            for (const e of t) a[e] = n[e]
            return (a.id = e), a
        }
        return n
    },
    itemGetPath = async (e, t) => {
        let a = await projectGet(e)
        if (!a) return null
        let n = [{id: e, type: "project", title: a.title || ""}],
            {tree_for_show: i} = a,
            r = ze(i, t).map((e) => ({
                id: e.id,
                type: e.type,
                title: e.title || "",
                icon: e.icon,
            }))
        return r && (n = [...n, ...r]), n
    },
    _r = async (e, t) => (await mn(e)).filter((e, a, n) => e.id && t(e, a, n)),
    mr = (e, t) => {
        for (const a of t) if (-1 === e.indexOf(a)) return !1
        return !0
    },
    pr = (e, t = () => !0) => {
        const a = []
        let n = ""
        const i = (e = "content") => {
                n && (a.push({content: n, type: e}), (n = ""))
            },
            r = (e, o) => {
                const {type: s, text: l, content: c, attrs: d} = e
                if (!t(s)) return i()
                if ("footnote" === s) return i()
                if (l)
                    if (o) {
                        const e = l
                            .split(o)
                            .map((e) => ({content: e, type: "content"}))
                        i(), a.push(...e)
                    } else n += l
                else if (
                    ("code_block" === s && (o = "\n"),
                    c && (i(), c.forEach((e) => r(e, o)), i()),
                    d && "comment" === s)
                ) {
                    const e = d.comment
                    if (e) {
                        const t = e
                            .split("\n")
                            .map((e) => ({content: e, type: "comment"}))
                        a.push(...t)
                    }
                }
            }
        return r(e), a
    },
    ur = ["heading", "inlineCitation", "code_block", "comment"],
    hr = (e) => {
        let {content: t} = e
        return t
            ? "string" == typeof t
                ? [t]
                : "object" == typeof t
                    ? pr(t, (e) => !ur.includes(e)).map((e) => e.content)
                    : [t.toString()]
            : []
    },
    itemGetUnlink = async (e) => {
        const t = await ua(),
            a = await t.collection.items.find(["id", e])
        if (!a || !a.title) return {}
        const {title: n, rawType: i} = a,
            r = await _r(t, (t) => !t.isInTrashcan && t.id !== e),
            o = {}
        for (let e of r) {
            const {id: t, title: a, rawType: r} = e,
                s = hr(e)
            for (let e of s)
                mr(e, [n]) &&
                (o[t] ||
                (o[t] = {
                    id: t,
                    contents: [],
                    type: r,
                    currentType: i,
                    title: a,
                    currentTitle: n,
                }),
                    o[t].contents.push(e))
        }
        return ye.info("get unlink mention in items"), o
    },
    itemMoveToProject = async (e, t, a, n) => {
        if (a === t) return
        const i = await ua(),
            r = await projectGet(t, !0),
            s = a ? await projectGet(a, !0) : void 0
        if (!r) return
        let l = []
        const c = n?.is_card || !1
        if (!c && a && s) {
            const t = s.tree
            for (let n of e) {
                let e = ve(t, (e) => e.id === n)
                e &&
                (l.push(e),
                    await Promise.all(we([e]).map((e) => on(e.id, a)))),
                    ke(t, (e) => e.id === n)
            }
            await projectUpdateTree({
                id: a,
                tree: t,
                selected_item_ids: [],
                current_item_id: null,
            })
        } else
            for (let t of e)
                c &&
                (await itemUpdateOther({id: t, rawType: "doc"}, !0),
                    be(o, t)),
                    l.push({id: t})
        const d = r.tree,
            _ = we(d)
        l = l.filter(({id: e}) => !_.find((t) => t.id === e))
        const m = n?.relate_item_id,
            p = n?.relate_where
        let u = null
        if (m) {
            let e = xe(d, (e) => e.id === m)
            e.length > 0 && (u = e[0])
        }
        if (u && m) {
            let e = Se(d, m),
                t = e.findIndex((e) => e.id === m)
            "before" === p
                ? e.splice(t, 0, ...l)
                : "after" === p
                    ? e.splice(t + 1, 0, ...l)
                    : (Array.isArray(u.children) || (u.children = []),
                        u.children.push(...l))
        } else d.push(...l)
        const h = [...e]
        await projectUpdateTree(
            {
                id: t,
                tree: d,
                selected_item_ids: h,
                current_item_id: h.length ? h[0] : null,
            },
            {fromGraph: n?.fromGraph},
        ),
            be(b, t, h)
        for (let e of l) await Promise.all(we([e]).map((e) => rn(e.id, t)))
        c && (await i.list.card_ids.delete((t) => e.includes(t)), be(O)),
            trackEvent("article", "move_to_project")
    },
    itemMoveToTrashcan = async (e) => {
        const t = await trashcanAll(),
            a = [],
            n = []
        for (let i of e) {
            let e = await itemGet(i)
            e
                ? "card" !== e.rawType
                    ? t.find(
                        (e) =>
                            "item" === e.type &&
                            e.data.id === i &&
                            !e.project_id,
                    )
                        ? ye.warning(
                            `moveToTrashcan: item【${i}】 is in trashcan`,
                        )
                        : (await trashcanAdd({
                            type: "item",
                            data: {...e, children: [], _tid: ""},
                            path: null,
                        }),
                            a.push(e.id))
                    : n.push(i)
                : ye.error(`moveToTrashcan fail: ${i}`)
        }
        n.length && (await cardMoveToTrashcan(n)),
            trackEvent("move_to_trashcan", "article"),
            be(L),
            be(E, a),
            be("unsorted_move_to_trashcan", a),
            ye.info(`moveToTrashcan finished: ${a}`)
    },
    br = (e, t, a = {}) => {
        const n = Date.now(),
            i = Ut()({
                defaultWidth: 840,
                defaultHeight: 640,
                file: "quick-edit-win.json",
            })
        let r = new fe.BrowserWindow({
            title: t,
            hasShadow: !0,
            width: i.width,
            height: i.height,
            minWidth: 480,
            minHeight: 360,
            skipTaskbar: !0,
            show: !1,
            autoHideMenuBar: !0,
            fullscreen: !1,
            fullscreenable: !0,
            titleBarStyle: "hidden",
            webPreferences: {
                contextIsolation: !0,
                sandbox: !1,
                preload: le().join(__dirname, "preload.js"),
                spellcheck: !1,
                webSecurity: !1,
                allowRunningInsecureContent: !1,
                nodeIntegrationInSubFrames: !0,
                partition: jt,
            },
        })
        const o = r.webContents.session
        return (
            ye.info(o.getUserAgent()),
                i.manage(r),
                r
                    .loadURL(`${qt()}#/quick-edit/?&id=${e}`)
                    .catch((e) => console.error(e)),
                r.once("ready-to-show", () => {
                    ye.info("Create Editor Win: ", Date.now() - n)
                }),
                r.on("close", (e) => {
                    Ot(r)
                }),
                r.show(),
                r.focus(),
                r
        )
    },
    itemOpenInNewWindow = async (e) => {
        br("doc", e)
    },
    vr = require("xlsx")
var xr = modulex.fn(vr)

function kr(e) {
    if (!e) return {}
    const {SheetNames: t, Sheets: a} = e
    return t.map((e) => {
        const t = a[e],
            n = xr().utils.sheet_to_json(t, {header: 1}),
            i = []
        try {
            for (let e = 0; e < n.length; e++)
                for (let t = 0; t < n[e].length; t++)
                    i.push({
                        r: e,
                        c: t,
                        v: n[e][t] || null,
                    })
        } catch (_err) {
            console.log("handle sheet json error", _err)
        }
        return {name: e, celldata: i}
    })
}

"xls|xlsx|xlsm|xlsb|xml|csv|txt|dif|sylk|slk|prn|ods|fods|htm|html".split("|")
const itemSheetAdd = async ({content: e} = {}, t = "", a = "sheet") => {
        const {
                type: n = "",
                size: i = 0,
                name: r = "",
                path: o = "",
                dataArr: s = [],
            } = e,
            l = (c = s) ? xr().read(c, {type: "array"}) : null
        var c
        const d = await ua(),
            _ = new Date().getTime()
        let m = await d.collection.items.insert({
            title: r,
            type: "sheet",
            content: kr(l),
            id: (0, Ja.v4)(),
            add_time_ms: _,
            edit_time_ms: _,
        })
        return t && (await projectAddItem(t, m.id)), be(f, m), m
    },
    itemTableAdd = async ({content: e} = {}, t = "", a = "") => {
        if (!a) return null
        const n = await ua()
        let i = await n.collection.items.find(["id", a])
        if (!i) return null
        const r = new Date().getTime()
        let o = await n.collection.items.insert({
            title: "table create from <" + i.title + ">",
            content: {parent: a, rawData: i.content, range: "ALL"},
            type: "table",
            id: (0, Ja.v4)(),
            add_time_ms: r,
            edit_time_ms: r,
        })
        return ye.info(o), t && (await projectAddItem(t, o.id)), be(f, o), o
    },
    itemAddFileWithAsset = async (e, t) => {
        if (!e) return null
        const a = await ha(),
            n = await ua(),
            i = new Date().getTime(),
            r = (0, Ja.v4)(),
            o = t.type.slice(t.type.indexOf("/") + 1),
            s = t.name || "entry." + o,
            l = Buffer.from(e),
            c = nt().createHash("md5")
        c.update(l)
        const d = c.digest("hex"),
            _ = await n.collection.items.find((e) => e.md5 === d)
        if (_) {
            if (t.docId) {
                const e = [
                    ...new Set([...(_.fileItemInArticle || []), t.docId]),
                ]
                await itemUpdateMiscContent({id: _.id, fileItemInArticle: e})
            }
            return _
        }
        const m = {
                id: r,
                title: s,
                titled: !0,
                rawType: "file",
                type: "file",
                src: `assets/${s}`,
                size: t.size,
                is_in_assets: !0,
                local_import_from: t.path,
                add_time_ms: i,
                md5: d,
                ext: o,
                fileItemInArticle: t.docId ? [t.docId] : [],
            },
            p = le().join(a, r, s)
        return (
            await (0, ne.ensureFile)(p),
                await (0, ne.writeFile)(p, l),
                await n.collection.items.insert(m)
        )
    },
    zr = (e, t) => e.concat(t).filter((a) => !e.includes(a) || !t.includes(a))

async function Cr(e, t, a) {
    let n = zr(a, t)
    0 !== n.length && (be(g, n), be(P))
}

const jr = require("moment")
var Pr = modulex.fn(jr)
const Dr = async () => {
        const e = await ua()
        return await mn(e)
    },
    Mr = (e) => (e ? Ir(Pr()(e)) : "2000010100"),
    Er = (e, t, a) =>
        e.reduce(
            (e, n) =>
                e +
                ((e, t, a) => {
                    if (t < Mr(e.add_time_ms)) return 0
                    if (e.wordsCountHistory) {
                        const a = e.wordsCountHistory,
                            n = Object.keys(a),
                            i = n.sort().findIndex((e) => e > t)
                        return a[n[-1 === i ? n.length - 1 : i - 1]] || 0
                    }
                    {
                        const t = a[e.id]
                        return void 0 !== t ? t : (a[e.id] = Ki(e))
                    }
                })(n, t, a),
            0,
        ),
    Ir = (e) => e.clone().utc().format("YYYYMMDDHH")
let Lr = {}
const statisticsGetRecently = async () => {
        Lr = {}
        const e = (await Dr()).flatMap((e) =>
                e && "file" !== e.rawType ? e : [],
            ),
            t = Math.min(...e.map((e) => e.add_time_ms || 1 / 0))
        return ((e, t) => {
            const a = Pr()(t).startOf("day"),
                n = Pr()().endOf("day")
            let i = a
            const r = {}
            let o = 0,
                s = Er(e, Ir(i), Lr)
            for (; i <= n;) {
                const t = i.format("YYYYMMDD")
                ;(i = Pr()(i).add(1, "day")),
                    (o = Er(e, Ir(i), Lr)),
                    (r[t] = o - s),
                    (s = o)
            }
            return r
        })(e, t)
    },
    Or = (e) => (e.length ? e.reduce((e, t) => e + Ki(t), 0) : 0),
    Rr = (e) =>
        e.length
            ? e.reduce(
                (e, t) =>
                    e +
                    ((e) => {
                        const t = Hi(e)
                        return Gi(t)
                    })(t),
                0,
            )
            : 0,
    countGetItemsWordsAndChars = async (e) => {
        if (!e || !e.length) return {words: 0, chars: 0}
        const t = (
            await Promise.all(e.map((e) => itemGetWithLocalContent(e)))
        ).flatMap((e) => (e && "file" !== e.rawType ? e : []))
        return {words: Or(t), chars: Rr(t)}
    },
    countGetItemsWords = async (e) => {
        if (!e || !e.length) return 0
        const t = (
            await Promise.all(e.map((e) => itemGetWithLocalContent(e)))
        ).flatMap((e) => (e && "file" !== e.rawType ? e : []))
        return Or(t)
    },
    countGetProjectWords = async (e) => {
        const t = await ua(),
            a = await t.collection.projects.find((t) => t.id === e)
        if (!a) return 0
        const n = ((e) => we(e.tree).map((e) => e.id))(a)
        return countGetItemsWords(n)
    },
    Ur = async () => {
        const e = await ua()
        return await Ri(e)
    },
    Gr = (e) => !(!e || (!e.deadline && void 0 === e.words)),
    statisticsGetRecentlyGoals = async () => {
        const e = await Dr(),
            t = await Ur(),
            a = ((e, t, a = 5) =>
                [
                    ...e.slice(0, a).map((e) => ({
                        type: "card" === e.rawType ? "card" : "doc",
                        id: e.id,
                        title: e.title,
                        icon: e.icon,
                        goal: e.goal || {},
                        currentWordsCount: 0,
                        edit_time_ms: e.edit_time_ms,
                    })),
                    ...t.slice(0, a).map((e) => ({
                        type: "project",
                        id: e.id,
                        title: e.title || "",
                        icon: e.icon,
                        goal: e.goal || {},
                        currentWordsCount: 0,
                        edit_time_ms: e.edit_time_ms,
                    })),
                ]
                    .sort((e, t) => t.edit_time_ms - e.edit_time_ms)
                    .slice(0, 5))(
                e
                    .filter((e) => !e.isInTrashcan && Gr(e.goal))
                    .sort((e, t) => t.edit_time_ms - e.edit_time_ms),
                t
                    .filter((e) => Gr(e.goal))
                    .sort((e, t) => t.edit_time_ms - e.edit_time_ms),
            )
        for (let e of a)
            "project" === e.type
                ? (e.currentWordsCount = await countGetProjectWords(e.id))
                : (e.currentWordsCount = await countGetItemsWords([e.id]))
        return a
    },
    itemUpdate = async (e, t = !1) => {
        const a = new Date().getTime(),
            n = await ua(),
            i = await itemGet(e.id)
        let r = i?.content_edit_time_ms,
            o = i?.wordsCountHistory,
            l = 0
        if ("content" in e) {
            r = a
            const t = ((e = new Date()) =>
                    `${e.getUTCFullYear()}${("0" + (e.getUTCMonth() + 1)).slice(
                        -2,
                    )}${("0" + e.getUTCDate()).slice(-2)}${(
                        "0" + e.getUTCHours()
                    ).slice(-2)}`)(),
                n = Yi(e.content),
                s = Yi(i?.content)
            if (((l = n - s), o)) o = {...o, [t]: n}
            else {
                const e = s
                o = {[Mr(i?.add_time_ms)]: e, [t]: n}
            }
            const c = i?.goal,
                d = c?.words || 0
            if (c && d) {
                let t = n
                "character" === c.wordsCountType && (t = Ji(e.content)),
                    (e.goal =
                        t >= d
                            ? {
                                ...c,
                                isAchieved: !0,
                            }
                            : {...c, isAchieved: !1})
            }
        }
        try {
            const c = (
                await n.collection.items.update(["id", e.id], {
                    ...e,
                    wordsCountHistory: o,
                    edit_time_ms: a,
                    content_edit_time_ms: r,
                })
            )[0]
            if (!c) return
            if ((be(f, e.id), t || be(s, {doc: c}), "tags" in e)) {
                let t = i?.tags
                await Cr(e.id, t || [], e.tags || [])
            }
            if ("tags_in_content" in e) {
                let t = i?.tags_in_content
                const a = zr(t || [], e.tags_in_content || [])
                a.length && be(y, c.id, a)
            }
            return (
                Gr(c.goal) && be(_, c.id),
                i && i.title !== c.title && be(u, c.id, c.title, !!c.titled),
                "content" in e && be(h, e.id, l),
                    await Qa("item", Object.keys(e), a, e.id),
                    c
            )
        } catch (_err) {
            ye.error("itemUpdate error", _err)
        }
    },
    itemUpdateTagsInContent = async (e, t, a = !0) => {
        if (!e || !t) return
        const n = await ua()
        try {
            const i = await itemGet(e)
            if (!i) return
            const r = i.tags_in_content || [],
                o = zr(r, t)
            if (!o.length) return
            let l = await n.collection.items.update(["id", e], {
                tags_in_content: t,
            })
            if (0 === l.length) return
            return a || be(s, {doc: l[0]}), be(f, e), be(y, e, o), l[0]
        } catch (_err) {
            ye.error("itemUpdate error", _err)
        }
    }

async function itemGetBelongProject(e, t = !1) {
    let a = await projectAll(),
        n = null
    for (let t of a) {
        let a = t.tree_for_show
        if (ve(a, (t) => t.id === e)) {
            n = t
            break
        }
    }
    return (n && (await projectGet(n.id, t))) || null
}

async function addBackwardsCites(e, t, a = !1) {
    try {
        if (!e || !t) return !1
        const n = await itemGet(e)
        if (!n) return !1
        const i = n.backwards_cites || []
        return (
            ~i.findIndex((e) => e === t) ||
            (i.push(t),
                await itemUpdateOther(
                    {
                        id: e,
                        backwards_cites: i,
                    },
                    !0,
                ),
            !a && be(p, e)),
                !0
        )
    } catch (_err) {
        return ye.error("addBackwardsCites Error: ", _err?.message), !1
    }
}

async function deleteBackwardsCites(e, t, a = !1) {
    try {
        if (!e || !t) return !1
        const n = await itemGet(e)
        if (!n) return !1
        const i = n.backwards_cites || [],
            r = i.findIndex((e) => e === t)
        return (
            ~r &&
            (i.splice(r, 1),
                await itemUpdateOther({id: e, backwards_cites: i}, !0),
            !a && be(p, e)),
                !0
        )
    } catch (_err) {
        return ye.error("deleteBackwardsCites Error: ", _err?.message), !1
    }
}

async function updateForwardsCites(e, t = null, a = !1) {
    try {
        const n = await itemGet(e)
        if (!n) return !1
        let i
        if (!Array.isArray(t)) {
            const {cites: e, footnotes: a} = ((e) => {
                    const t = {},
                        a = []
                    let n = 0
                    return (
                        e.content?.forEach(function e(i) {
                            if ("inlineCitation" !== i.type)
                                if ("footnote" !== i.type) i.content?.forEach(e)
                                else {
                                    const e = i.attrs?.id || ""
                                    e && !a.includes(e) && a.push(e)
                                }
                            else {
                                const e = i
                                t[e.attrs.citeId] = {
                                    id: e.attrs.citeId,
                                    citeType: e.attrs.citeType,
                                    index: n++,
                                }
                            }
                        }),
                            {
                                cites: Object.values(t).sort(
                                    (e, t) => e.index - t.index,
                                ),
                                footnotes: a,
                            }
                    )
                })(n.content)
            ;(t = e), a.length && (i = a)
        }
        const r = n.forwards_cites || []
        for (let n = 0; n < t.length; n++) {
            const i = r.findIndex((e) => t && e.id === t[n].id)
            ~i ? r.splice(i, 1) : await addBackwardsCites(t[n].id, e, a)
        }
        if (r.length)
            for (let t = 0; t < r.length; t++)
                await deleteBackwardsCites(r[t].id, e, a)
        return (
            await itemUpdateOther(
                {
                    id: e,
                    forwards_cites: t,
                    footnotes: i,
                },
                !0,
            ),
            !a && be("item_forwards_cites_update", e, n.belongsTo),
                !0
        )
    } catch (_err) {
        return ye.error("updateForwardsCites Error: ", _err?.message), !1
    }
}

async function getItemWithSpecificKeys(e, t = []) {
    const a = await ua()
    let n = await a.collection.items.find(["id", e])
    return t.length && n ? (0, W.pick)(n, t) : null
}

const itemFilePathExist = async (e) => {
        const t = await itemGet(e)
        if (t && "file" === t.type) {
            if (
                Et.includes(t.ext || "") &&
                t.attachSrc &&
                ie().existsSync(await fileGetAssetPath(t.id, t.attachSrc))
            )
                return !0
            if (t.is_in_assets) {
                if (
                    !t.src ||
                    !ie().existsSync(await fileGetAssetPath(t.id, t.src))
                )
                    return !1
            } else if (
                !t.local_import_from ||
                !ie().existsSync(t.local_import_from)
            )
                return !1
        }
        return !0
    },
    Xr = require("prosemirror-model"),
    eo = (0, require("prosemirror-tables").tableNodes)({
        tableGroup: "block",
        cellContent: "block+",
        cellAttributes: {
            background: {
                default: null,
                getFromDOM: (e) => e.style.backgroundColor || null,
                setDOMAttr(e, t) {
                    if (e) {
                        const a = {
                            style: `${t.style || ""}background-color: ${e};`,
                        }
                        Object.assign(t, a)
                    }
                },
            },
        },
    })

function to(e = {}) {
    return {
        paddingLeft: {default: e.defaultPaddingLeft},
        lineHeight: {default: e.defaultLineHeight},
        align: {default: e.defaultAlign},
    }
}

function ao(e, t = {}) {
    return {
        lineHeight: e.style.lineHeight && t.defaultLineHeight,
        paddingLeft:
            e.style.marginLeft ||
            e.style.getPropertyValue("--am-padding-left")?.trim() ||
            t.defaultPaddingLeft,
        align: e.style.textAlign || t.defaultAlign,
    }
}

function no(e, t = {}) {
    return {
        style:
            (e.attrs.align === t.defaultAlign
                ? ""
                : `text-align: ${e.attrs.align};`) +
            (e.attrs.lineHeight === t.defaultLineHeight
                ? ""
                : `line-height: ${e.attrs.lineHeight};`) +
            (e.attrs.paddingLeft === t.defaultPaddingLeft
                ? ""
                : `--am-paragraph-indent: ${
                    "number" != typeof e.attrs.paddingLeft &&
                    /\D/.test(e.attrs.paddingLeft + "")
                        ? e.attrs.paddingLeft
                        : e.attrs.paddingLeft + "rem"
                }`),
    }
}

const io = {
        doc: {content: "block+"},
        strut: {
            group: "inline",
            inline: !0,
            atom: !0,
            parseDOM: [{tag: 'span[data-type="strut"]'}],
            toDOM: () => ["p", {"data-type": "strut"}],
        },
        paragraph: {
            content: "inline*",
            group: "block",
            draggable: !0,
            attrs: to(),
            parseDOM: [
                {
                    tag: "div:not(:empty):not([data-type]):not(:has(p)):not(:has(img)):not(:has(h1)):not(:has(h2)):not(:has(h3)):not(:has(blockquote))",
                    priority: 7,
                },
                {tag: "summary", priority: 9},
                {tag: "p", priority: 1e3, getAttrs: (e) => ao(e)},
            ],
            toDOM: (e) => ["p", no(e), 0],
        },
        text: {group: "inline"},
        blocked_latex: {
            attrs: {input: {default: ""}},
            group: "block",
            content: "inline*",
            draggable: !0,
            toDOM: (e) => [
                "span",
                {"block-latex": "block", input: e.attrs.input},
            ],
            parseDOM: [
                {
                    tag: "span[block-latex]",
                    getAttrs: (e) => ({
                        input:
                            "string" != typeof e ? e.getAttribute("input") : "",
                    }),
                },
            ],
        },
        code_block: {
            attrs: {language: {default: "auto"}},
            content: "text*",
            marks: "",
            group: "block",
            code: !0,
            draggable: !0,
            defining: !0,
            parseDOM: [
                {
                    tag: "pre",
                    preserveWhitespace: "full",
                    getAttrs(e) {
                        if ("string" == typeof e) return {}
                        var t
                        let a = "auto"
                        if (e.hasAttribute("data-language"))
                            a = e.getAttribute("data-language") || "auto"
                        else {
                            const n = e.querySelector("code[class*=language-]")
                            n &&
                            (a =
                                (null ===
                                (t = (
                                    n.getAttribute("class") || ""
                                ).match(/language-(\S+?)(?=\s|$)/)) ||
                                void 0 === t
                                    ? void 0
                                    : t[1]) || "auto")
                        }
                        return {language: a}
                    },
                },
            ],
            toDOM: (e) => [
                "pre",
                {"data-language": e.attrs.language, spellcheck: "false"},
                ["code", 0],
            ],
        },
        bullet_list: {
            attrs: {bullet: {default: "*"}},
            draggable: !0,
            content: "list_item+",
            group: "block",
            parseDOM: [{tag: "ul"}],
            toDOM: () => ["ul", 0],
        },
        code_inline: {
            group: "inline",
            inline: !0,
            content: "inline*",
            marks: "",
            toDOM: () => ["code", {class: "code-inline"}, 0],
            parseDOM: [{tag: "code"}],
        },
        latex: {
            attrs: {input: {default: ""}},
            group: "inline",
            inline: !0,
            content: "inline*",
            draggable: !0,
            toDOM: (e) => [
                "span",
                {"inline-latex": "inline-latex", input: e.attrs.input},
            ],
            parseDOM: [
                {
                    tag: "span[inline-latex]",
                    getAttrs: (e) => ({
                        input:
                            "string" != typeof e ? e.getAttribute("input") : "",
                    }),
                },
            ],
        },
        ordered_list: {
            attrs: {order: {default: 1}},
            content: "list_item+",
            group: "block",
            draggable: !0,
            parseDOM: [
                {
                    tag: "ol",
                    getAttrs: (e) => {
                        if ("string" == typeof e) return {}
                        const t =
                            e.hasAttribute("data-start") ||
                            e.hasAttribute("start")
                                ? +(
                                e.getAttribute("data-start") ||
                                e.getAttribute("start") ||
                                0
                            ) + 1
                                : 1
                        return {order: Math.max(t, 1)}
                    },
                },
            ],
            toDOM: (e) => [
                "ol",
                {
                    "data-start": e.attrs.order - 1,
                    style: "--order-start: " + (e.attrs.order - 1),
                },
                0,
            ],
        },
        image: {
            atom: !0,
            inline: !1,
            group: "block",
            attrs: {
                src: {default: ""},
                alt: {default: ""},
                title: {default: ""},
                width: {default: 100},
                layout: {default: "full"},
            },
            draggable: !0,
            parseDOM: [
                {
                    tag: "img[src]",
                    getAttrs: (e) =>
                        "string" == typeof e
                            ? {}
                            : {
                                src:
                                    e.getAttribute("data-asset") ||
                                    e.getAttribute("src"),
                                title: e.getAttribute("title"),
                                alt: e.getAttribute("alt"),
                            },
                },
            ],
            toDOM: (e) => [
                "img",
                {
                    src: e.attrs.src,
                    title: e.attrs.title,
                    alt: e.attrs.alt,
                    "data-asset": e.attrs.src,
                    "data-layout": e.attrs.layout,
                },
            ],
        },
        heading: {
            attrs: {level: {default: 1}, ...to()},
            content: "inline*",
            group: "block",
            defining: !0,
            draggable: !0,
            parseDOM: new Array(6).fill(0).map((e) => ({
                tag: `h${e + 1}`,
                getAttrs: (t) => ({level: e + 1, ...ao(t)}),
            })),
            toDOM: (e) => [`h${e.attrs.level}`, no(e), 0],
        },
        list_item: {
            content: "paragraph block*",
            defining: !0,
            draggable: !0,
            parseDOM: [{tag: "li"}],
            toDOM: () => ["li", 0],
        },
        blockquote: {
            content: "block*",
            group: "block",
            defining: !0,
            draggable: !0,
            parseDOM: [{tag: "blockquote"}],
            toDOM: () => ["blockquote", 0],
        },
        horizontal_rule: {
            group: "block",
            selectable: !0,
            parseDOM: [{tag: "hr"}],
            toDOM: () => ["div", ["hr"]],
        },
        todo_list: {
            group: "block",
            content: "todo_item+",
            draggable: !0,
            toDOM: () => ["ul", {"data-type": "todo_list"}, 0],
            parseDOM: [{priority: 51, tag: '[data-type="todo_list"]'}],
        },
        table: {...eo.table, draggable: !1},
        todo_item: {
            attrs: {done: {default: !1}},
            draggable: !0,
            selectable: !0,
            content: "paragraph block*",
            toDOM: (e) => {
                const {done: t} = e.attrs
                return [
                    "li",
                    {
                        "data-type": "todo_item",
                        "data-done": t.toString(),
                    },
                    [
                        "span",
                        {
                            class: "todo-checkbox",
                            contenteditable: "false",
                        },
                    ],
                    ["div", {class: "todo-content"}, 0],
                ]
            },
            parseDOM: [
                {
                    priority: 51,
                    tag: '[data-type="todo_item"]',
                    getAttrs: (e) =>
                        "string" == typeof e
                            ? {}
                            : {done: "true" === e.getAttribute("data-done")},
                },
            ],
        },
        table_cell: eo.table_cell,
        footnote: {
            attrs: {id: {default: null}},
            group: "inline",
            content: "text*",
            selectable: !0,
            inline: !0,
            toDOM: (e) => ["footnote", {"data-id": e.attrs.id}, 0],
            parseDOM: [
                {
                    tag: "footnote",
                    getAttrs: (e) =>
                        "string" == typeof e
                            ? {}
                            : {id: e.getAttribute("data-id")},
                },
            ],
        },
        columns: {
            content: "column_item+",
            group: "block",
            isolating: !0,
            parseDOM: [{tag: 'div[data-type="columns"]'}],
            toDOM: () => ["div", {"data-type": "columns"}, 0],
        },
        table_header: eo.table_header,
        link: {
            attrs: {
                id: {default: ""},
                href: {default: null},
                target: {default: null},
            },
            group: "inline",
            inline: !0,
            content: "inline*",
            marks: "_",
            parseDOM: [
                {
                    tag: "a[href]",
                    getAttrs: (e) =>
                        "string" == typeof e
                            ? {}
                            : {
                                href: decodeURIComponent(
                                    e.getAttribute("href") || "",
                                ),
                                target: e.getAttribute("target"),
                                id: e.getAttribute("id"),
                            },
                },
            ],
            toDOM: (e) => [
                "a",
                {
                    ...e.attrs,
                    rel: "noopener noreferrer nofollow",
                    target: "_blank",
                },
                0,
            ],
        },
        table_row: eo.table_row,
        inlineCitation: {
            attrs: {
                displayName: {default: ""},
                citeType: {default: "card"},
                citeId: {default: ""},
                isFullCite: {default: !1},
                isTitled: {default: !1},
            },
            group: "inline",
            content: "title_citation | full_citation  | file_citation",
            inline: !0,
            selectable: !0,
            parseDOM: [
                {
                    tag: 'span[data-type="inline-citation"]',
                    getAttrs: (e) =>
                        "string" == typeof e
                            ? {}
                            : {
                                displayName:
                                    e.getAttribute("data-display-name") || "",
                                citeType:
                                    e.getAttribute("data-cite-type") || "",
                                citeId: e.getAttribute("data-cite-id") || "",
                                isFullCite: !!e.getAttribute("data-is-full"),
                                isTitled: !!e.getAttribute("data-is-titled"),
                            },
                },
            ],
            toDOM: (e) => [
                "span",
                {
                    "data-type": "inline-citation",
                    "data-display-name": e.attrs.displayName,
                    "data-cite-type": e.attrs.citeType,
                    "data-cite-id": e.attrs.citeId,
                    "data-is-full": e.attrs.isFullCite ? "1" : "",
                    "data-is-titled": e.attrs.isTitled ? "1" : "",
                },
                0,
            ],
        },
        comment: {
            attrs: {comment: {default: ""}, createDate: {default: ""}},
            group: "inline",
            content: "inline*",
            selectable: !0,
            inline: !0,
            toDOM: (e) => [
                "span",
                {
                    "data-type": "comment",
                    "data-comment": e.attrs.comment,
                    "data-create-date": e.attrs.createDate,
                },
                0,
            ],
            parseDOM: [
                {
                    tag: 'span[data-type="comment"]',
                    getAttrs: (e) =>
                        "string" == typeof e
                            ? {}
                            : {
                                comment: e.getAttribute("data-comment"),
                                createDate:
                                    e.getAttribute("data-create-date"),
                            },
                },
            ],
        },
        hard_break: {
            inline: !0,
            group: "inline",
            selectable: !1,
            parseDOM: [{tag: "br"}],
            toDOM: (e) => ["br"],
        },
        foreign_object: {
            atom: !0,
            attrs: {source: {default: ""}},
            selectable: !0,
            inline: !1,
            group: "block",
            parseDOM: [
                {
                    tag: "iframe",
                    getAttrs: (e) =>
                        "string" == typeof e
                            ? {}
                            : {source: e.getAttribute("src") || ""},
                },
            ],
            toDOM: (e) => [
                "iframe",
                {src: e.attrs.source, "data-foreign-object": ""},
            ],
        },
        export_chapter: {
            content: "inline*",
            group: "block",
            defining: !0,
            parseDOM: [{tag: 'section[data-type="export_chapter"]'}],
            toDOM: () => ["section", {"data-type": "export_chapter"}, 0],
        },
        column_item: {
            attrs: {basis: {default: "50%"}},
            content: "block*",
            group: "block",
            isolating: !0,
            parseDOM: [
                {
                    tag: 'div[data-type="column_item"]',
                    getAttrs: (e) =>
                        "string" == typeof e
                            ? {}
                            : {basis: e.getAttribute("data-column-width")},
                },
            ],
            toDOM: (e) => [
                "div",
                {
                    "data-column-width": e.attrs.basis,
                    "data-type": "column_item",
                    style: `flex-basis: ${e.attrs.basis};`,
                },
                0,
            ],
        },
        export_gap: {
            content: "inline*",
            group: "block",
            atom: !0,
            parseDOM: [{tag: 'div[data-type="export_gap"]'}],
            toDOM: () => ["div", {"data-type": "export_gap"}],
        },
        hierarchy_title: {
            attrs: {level: {default: 6}},
            content: "inline*",
            group: "block",
            parseDOM: [
                {
                    tag: 'div[data-type="hierarchy_title"]',
                    getAttrs: (e) =>
                        "string" == typeof e
                            ? {}
                            : {level: e.getAttribute("data-level")},
                },
            ],
            toDOM: (e) => [
                "div",
                {"data-type": "hierarchy_title", "data-level": e.attrs.level},
            ],
        },
        tag: {
            attrs: {id: {default: null}, lazyCreateName: {default: null}},
            group: "inline",
            selectable: !1,
            inline: !0,
            atom: !0,
            toDOM: (e) => [
                "span",
                {"data-tag-id": e.attrs.id || "", "data-type": "tag"},
                e.attrs.id || "",
            ],
            parseDOM: [
                {
                    tag: 'span[data-type="tag"]',
                    getAttrs: (e) =>
                        "string" == typeof e
                            ? {}
                            : {
                                id: e.getAttribute("data-tag-id"),
                                lazyCreateName: e.getAttribute(
                                    "data-tag-lazy-create-name",
                                ),
                            },
                },
            ],
        },
        bio_citation: {
            attrs: {citeId: {default: ""}, reference: {default: ""}},
            group: "inline",
            atom: !0,
            inline: !0,
            selectable: !1,
            parseDOM: [
                {
                    tag: 'span[data-node-type="bio-citation"]',
                    getAttrs: (e) => ({
                        citeId: e.getAttribute("data-cite-id") || "",
                        reference: e.getAttribute("data-reference") || "",
                    }),
                },
            ],
            toDOM: (e) => [
                "span",
                {
                    "data-node-type": "bio-citation",
                    "data-cite-id": e.attrs.citeId,
                    "data-reference": e.attrs.reference,
                },
            ],
        },
        bibliography: {
            atom: !0,
            group: "block",
            draggable: !0,
            attrs: {template: {default: ""}, lang: {default: ""}},
            toDOM: (e) => [
                "div",
                {
                    "data-type": "bibliography",
                    "data-template": e.attrs.template,
                    "data-lang": e.attrs.lang,
                },
            ],
            parseDOM: [
                {
                    tag: 'div[data-type="bibliography"]',
                    getAttrs: (e) => ({
                        template: e.getAttribute("data-template") || "",
                        lang: e.getAttribute("data-lang") || "",
                    }),
                },
            ],
        },
        title_citation: {
            attrs: {citeType: {default: "card"}, citeId: {default: ""}},
            group: "inline",
            content: "text*",
            inline: !0,
            parseDOM: [
                {
                    tag: 'span[data-node-type="title-citation"]',
                    getAttrs: (e) =>
                        "string" == typeof e
                            ? {}
                            : {
                                citeType: e.getAttribute("data-cite-type"),
                                citeId: e.getAttribute("data-cite-id"),
                            },
                },
            ],
            toDOM: (e) => [
                "span",
                {
                    "data-node-type": "title-citation",
                    "data-cite-type": e.attrs.citeType,
                    "data-cite-id": e.attrs.citeId,
                },
                0,
            ],
        },
        file_citation: {
            attrs: {citeId: {default: ""}},
            group: "inline",
            atom: !0,
            inline: !0,
            selectable: !1,
            parseDOM: [
                {
                    tag: 'span[data-node-type="file-citation"]',
                    getAttrs: (e) =>
                        "string" == typeof e
                            ? {}
                            : {citeId: e.getAttribute("data-cite-id") || ""},
                },
            ],
            toDOM: (e) => [
                "span",
                {
                    "data-node-type": "file-citation",
                    "data-cite-id": e.attrs.citeId,
                },
            ],
        },
        full_citation: {
            attrs: {citeType: {default: "card"}, citeId: {default: ""}},
            group: "inline",
            atom: !0,
            inline: !0,
            parseDOM: [
                {
                    tag: 'span[data-node-type="full-citation"]',
                    getAttrs: (e) =>
                        "string" == typeof e
                            ? {}
                            : {
                                citeType:
                                    e.getAttribute("data-cite-type") ||
                                    "card",
                                citeId: e.getAttribute("data-cite-id") || "",
                            },
                },
            ],
            toDOM: (e) => [
                "span",
                {
                    "data-node-type": "full-citation",
                    "data-cite-type": e.attrs.citeType,
                    "data-cite-id": e.attrs.citeId,
                },
            ],
        },
    },
    ro = new Xr.Schema({
        topNode: "doc",
        nodes: io,
        marks: {
            color: {
                attrs: {color: {default: "inherit"}},
                parseDOM: [
                    {
                        tag: "span[data-font-color]",
                        getAttrs: (e) =>
                            "string" == typeof e
                                ? {}
                                : {color: e.getAttribute("data-font-color")},
                    },
                ],
                toDOM: (e) => ["font", {style: `color: ${e.attrs.color};`}, 0],
            },
            font_family: {
                attrs: {fontFamily: {default: "Kaiti SC"}},
                parseDOM: [
                    {
                        tag: "span[data-font-family]",
                        getAttrs: (e) =>
                            "string" == typeof e
                                ? {}
                                : {
                                    fontFamily:
                                        e.getAttribute("data-font-family"),
                                },
                    },
                ],
                toDOM: (e) => [
                    "font",
                    {style: `font-family: ${e.attrs.fontFamily}`},
                    0,
                ],
            },
            font_size: {
                attrs: {fontSize: {default: "1em"}},
                parseDOM: [
                    {
                        tag: "span[data-font-size]",
                        getAttrs: (e) =>
                            "string" == typeof e
                                ? {}
                                : {fontSize: e.getAttribute("data-font-size")},
                    },
                ],
                toDOM: (e) => [
                    "font",
                    {style: `font-size: ${e.attrs.fontSize};`},
                    0,
                ],
            },
            strike: {
                parseDOM: [
                    {tag: "s"},
                    {tag: "del"},
                    {tag: "strike"},
                    {
                        style: "text-decoration",
                        getAttrs: (e) => "line-through" === e && null,
                    },
                ],
                toDOM: () => ["s", 0],
            },
            italic: {
                parseDOM: [
                    {tag: "i"},
                    {tag: "em"},
                    {style: "font-style=italic"},
                ],
                toDOM: () => ["em", 0],
            },
            bold: {
                parseDOM: [
                    {tag: "strong"},
                    {
                        tag: "b",
                        getAttrs: (e) =>
                            "string" != typeof e
                                ? "normal" !== e.style.fontWeight && null
                                : null,
                    },
                    {
                        style: "font-weight",
                        getAttrs: (e) =>
                            "string" == typeof e &&
                            /^(bold(er)?|[5-9]\d{2,})$/.test(e) &&
                            null,
                    },
                ],
                toDOM: () => ["strong", 0],
            },
            underline: {
                parseDOM: [
                    {tag: "u"},
                    {
                        style: "text-decoration",
                        getAttrs: (e) => "underline" === e && null,
                    },
                ],
                toDOM: () => ["u", 0],
            },
            highlight: {
                attrs: {color: {default: "transparent"}},
                parseDOM: [
                    {
                        tag: "span[data-font-bg]",
                        getAttrs: (e) =>
                            "string" == typeof e
                                ? {}
                                : {color: e.getAttribute("data-font-bg")},
                    },
                ],
                toDOM: (e) => [
                    "mark",
                    {style: `--lat-marker-color: ${e.attrs.color}`},
                    0,
                ],
            },
            sup: {parseDOM: [{tag: "sup"}], toDOM: () => ["sup", 0]},
            sub: {
                parseDOM: [
                    {tag: "sub"},
                    {
                        style: "vertical-align",
                        getAttrs: (e) => "sub" === e && null,
                    },
                ],
                toDOM: () => ["sub", 0],
            },
        },
    }),
    oo = require("window")
var so = modulex.fn(oo)
const lo = require("katex")
var co = modulex.fn(lo)

async function itemGetDisplayHTML(e, t = !1) {
    if (!e) return ""
    if ("string" == typeof e) return e
    global.window ||
    ((global.window = new (so())()),
        (global.document = window.document),
        setTimeout(() => {
            ;(global.window = null), (global.document = null)
        }, 3e6))
    const a = ro.nodeFromJSON(e),
        n = window.document.createElement("div")
    n.appendChild(Xr.DOMSerializer.fromSchema(ro).serializeFragment(a.content)),
        (n.className = "ProseMirror prettified-html"),
        Array.from(
            n.querySelectorAll("span[inline-latex], span[block-latex]"),
        ).forEach((e) => {
            const t = e.getAttribute("input"),
                a = e.hasAttribute("block-latex")
            if (t) {
                const n = co().renderToString(t, {throwOnError: !1})
                e.innerHTML = n
                const i = a
                    ? window.document.createElement("div")
                    : window.document.createElement("span")
                ;(i.className = a ? "block-latex__result" : "inline-latex"),
                    (i.innerHTML = n),
                    e.parentNode?.replaceChild(i, e)
            }
        }),
        Array.from(n.querySelectorAll("img")).forEach((e) => {
            const t = e.getAttribute("src"),
                a = (e.getAttribute("alt"), e.getAttribute("title")),
                n = e.getAttribute("width") || "",
                i = e.getAttribute("layout")
            if (t) {
                const t = window.document.createElement("figure")
                ;(t.className = "prettified-image"),
                i && t.setAttribute("data-layout", i),
                +n && +n < 100 && (t.style.width = `${n}%`)
                const r = e.cloneNode(),
                    o = window.document.createElement("figcaption")
                ;(o.innerText = a || ""),
                    t.append(r, o),
                    e.parentNode?.replaceChild(t, e)
            }
        })
    let i = n.outerHTML
    return (
        t &&
        (i = i.replaceAll(
            /<span data-tag-id="(.*?)" data-type="tag">(.*?)<\/span>/g,
            (e, t, a) =>
                t === a
                    ? `<span data-tag-id="${t}" data-type="tag">${t}</span>`
                    : e,
        )),
            i
    )
}

const mo = require("citation-js"),
    po = require("@citation-js/core"),
    uo = require("@citation-js/date"),
    ho = require("@citation-js/name"),
    fo = {
        toTarget: {
            "Aggregated Database": "dataset",
            "Ancient Text": "classic",
            Artwork: "graphic",
            "Audiovisual Material": "motion_picture",
            Bill: "bill",
            Blog: "post-weblog",
            Book: "book",
            "Book Section": "chapter",
            Case: "legal_case",
            "Chart or Table": "figure",
            "Classical Work": "classic",
            "Computer Program": "software",
            "Conference Paper": "paper-conference",
            "Conference Proceedings": "book",
            Dataset: "dataset",
            Dictionary: "entry-dictionary",
            "Edited Book": "book",
            "Electronic Article": "article-journal",
            "Electronic Book": "book",
            "Electronic Chapter": "chapter",
            Encyclopedia: "entry-encyclopedia",
            Equation: "figure",
            Figure: "figure",
            "Film or Broadcast": "motion_picture",
            Generic: "document",
            "Government Document": "document",
            Grant: "document",
            Hearing: "hearing",
            "Journal Article": "article-journal",
            "Legal Rule or Regulation": "regulation",
            "Magazine Article": "article-magazine",
            Manuscript: "manuscript",
            Map: "map",
            Music: "song",
            "Newspaper Article": "article-newspaper",
            "Online Database": "dataset",
            "Online Multimedia": "motion_picture",
            Pamphlet: "pamphlet",
            Patent: "patent",
            "Personal Communication": "personal_communication",
            Report: "report",
            Serial: "periodical",
            Standard: "standard",
            Statute: "legisliation",
            Thesis: "thesis",
            "Unpublished Work": "article",
            "Web Page": "webpage",
        },
        toSource: {
            article: "Unpublished Work",
            "article-journal": "Journal Article",
            "article-magazine": "Magazine Article",
            "article-newspaper": "Newspaper Article",
            bill: "Bill",
            book: "Book",
            broadcast: "Film or Broadcast",
            chapter: "Book Section",
            classic: "Classical Work",
            dataset: "Dataset",
            document: "Generic",
            entry: "Catalog",
            "entry-dictionary": "Dictionary",
            "entry-encyclopedia": "Encyclopedia",
            figure: "Figure",
            graphic: "Artwork",
            hearing: "Hearing",
            legal_case: "Case",
            legislation: "Statute",
            manuscript: "Manuscript",
            map: "Map",
            motion_picture: "Film or Broadcast",
            musical_score: "Music",
            pamphlet: "Pamphlet",
            "paper-conference": "Conference Paper",
            patent: "Patent",
            periodical: "Serial",
            personal_communication: "Personal Communication",
            post: "Blog",
            "post-weblog": "Blog",
            regulation: "Legal Rule or Regulation",
            report: "Report",
            software: "Computer Program",
            song: "Music",
            standard: "Standard",
            thesis: "Thesis",
            webpage: "Web Page",
        },
    },
    go = {
        TYPE: {
            toTarget: (e) => fo.toTarget[e] || "document",
            toSource: (e) => fo.toSource[e] || "Generic",
        },
        DATE: {
            toTarget: (e, t) => (e ? (0, uo.parse)(e) : go.YEAR.toTarget(t)),
            toSource: (e) => [(0, uo.format)(e), go.YEAR.toSource(e)],
        },
        YEAR: {
            toTarget: (e) => ({"date-parts": [[+e]]}),
            toSource(e) {
                const t =
                    e &&
                    e["date-parts"] &&
                    e["date-parts"][0] &&
                    e["date-parts"][0][0]
                return t && t.toString()
            },
        },
        NAMES: {
            toTarget: (e) => e.map(ho.parse),
            toSource: (e) => e.map((e) => (0, ho.format)(e, !0)),
        },
        ISBN_ISSN: {
            toTarget: (e) =>
                e.toString().match(/^\d{4}-\d{3}[0-9xX]$/)
                    ? [void 0, e]
                    : [e, void 0],
            toSource: (e, t) => e || t,
        },
        GENRE_DEGREE: {
            toTarget: (e, t) => t || e,
            toSource: (e) =>
                e.match(/master|phd|doctoral/i) ? [void 0, e] : [e, void 0],
        },
    },
    yo = [
        {
            source: "!",
            target: "title-short",
            when: {
                source: {
                    0: [
                        "Ancient Text",
                        "Aggregated Database",
                        "Artwork",
                        "Audiovisual Material",
                        "Bill",
                        "Blog",
                        "Book",
                        "Book Section",
                        "Case",
                        "Catalog",
                        "Classical Work",
                        "Computer Program",
                        "Conference Proceedings",
                        "Dataset",
                        "Dictionary",
                        "Edited Book",
                        "Electronic Article",
                        "Electronic Chapter",
                        "Encyclopedia",
                        "Film or Broadcast",
                        "Generic",
                        "Grant",
                        "Hearing",
                        "Journal Article",
                        "Magazine Article",
                        "Manuscript",
                        "Map",
                        "Music",
                        "Newspaper Article",
                        "Pamphlet",
                        "Patent",
                        "Personal Communication",
                        "Report",
                        "Serial",
                        "Statute",
                        "Thesis",
                        "Unpublished Work",
                        "Web Page",
                    ],
                },
                target: {
                    type: [
                        "article",
                        "article-journal",
                        "article-magazine",
                        "article-newspaper",
                        "bill",
                        "book",
                        "broadcast",
                        "chapter",
                        "classic",
                        "dataset",
                        "document",
                        "entry",
                        "entry-dictionary",
                        "entry-encyclopedia",
                        "graphic",
                        "hearing",
                        "legal_case",
                        "legislation",
                        "manuscript",
                        "map",
                        "motion_picture",
                        "musical_score",
                        "pamphlet",
                        "patent",
                        "periodical",
                        "personal_communication",
                        "post",
                        "post-weblog",
                        "report",
                        "software",
                        "song",
                        "thesis",
                        "webpage",
                    ],
                },
            },
        },
        {
            source: "O",
            target: "title-short",
            when: {
                source: {
                    "!": !1,
                    0: [
                        "Ancient Text",
                        "Book",
                        "Book Section",
                        "Catalog",
                        "Dataset",
                        "Dictionary",
                        "Encyclopedia",
                        "Pamphlet",
                        "Personal Communication",
                        "Serial",
                        "Standard",
                        "Statute",
                        "Unpublished Work",
                    ],
                },
                target: {type: "standard"},
            },
        },
        {
            source: "#",
            target: "medium",
            when: {
                source: {0: ["Audiovisual Material", "Online Multimedia"]},
                target: !1,
            },
        },
        {
            source: "#",
            target: "number",
            when: {source: {0: ["Grant"]}, target: !1},
        },
        {
            source: "#",
            target: "volume-title",
            when: {source: {0: ["Electronic Article"]}, target: !1},
        },
        {
            source: "#",
            target: "publisher",
            when: {source: {0: ["Statute"]}, target: {type: ["legislation"]}},
        },
        {
            source: "#",
            target: "references",
            when: {source: {0: ["Patent"]}, target: {type: ["patent"]}},
        },
        {
            source: "9",
            target: "medium",
            when: {
                source: {0: ["Film or Broadcast"]},
                target: {type: ["broadcast", "motion_picture"]},
            },
        },
        {
            source: ["#", "D"],
            target: "issued",
            when: {source: {0: ["Electronic Book"]}, target: !1},
            convert: go.DATE,
        },
        {
            source: "$",
            target: "issue",
            when: {source: {0: ["Report"]}, target: {type: ["report"]}},
        },
        {
            source: "$",
            target: "status",
            when: {source: {0: ["Patent"]}, target: {type: ["patent"]}},
        },
        {
            source: "$",
            target: "volume",
            when: {source: {0: ["Statute"]}, target: {type: ["legislation"]}},
        },
        {
            source: "&",
            target: "available-date",
            when: {source: {0: ["Electronic Article"]}, target: !1},
            convert: go.DATE,
        },
        {
            source: "&",
            target: "submitted",
            when: {source: {0: ["Case"]}, target: {type: ["legal_case"]}},
            convert: go.DATE,
        },
        {
            source: "&",
            target: "page",
            when: {source: {0: ["Book"]}, target: {type: ["book"]}},
        },
        {
            source: "&",
            target: "section",
            when: {
                source: {
                    0: [
                        "Generic",
                        "Government Document",
                        "Legal Rule or Regulation",
                        "Music",
                        "Newspaper Article",
                        "Standard",
                        "Statute",
                    ],
                },
                target: {
                    type: [
                        "article-newspaper",
                        "document",
                        "legislation",
                        "musical_score",
                        "regulation",
                        "song",
                        "standard",
                    ],
                },
            },
        },
        {
            source: "&",
            target: "page-first",
            when: {
                source: {
                    0: ["Journal Article", "Magazine Article", "Manuscript"],
                },
                target: {
                    type: ["article-journal", "article-magazine", "manuscript"],
                },
            },
        },
        {
            source: "&",
            target: "version",
            when: {
                source: {0: ["Dictionary"]},
                target: {type: ["entry-dictionary"]},
            },
        },
        {
            source: "(",
            target: "edition",
            when: {source: {0: ["Electronic Book"], 7: !1}, target: !1},
        },
        {
            source: "*",
            target: "reviewed-title",
            when: {
                source: {
                    0: [
                        "Ancient Text",
                        "Book Section",
                        "Dictionary",
                        "Electronic Article",
                        "Electronic Book",
                        "Electronic Chapter",
                        "Encyclopedia",
                        "Generic",
                        "Grant",
                        "Journal Article",
                        "Magazine Article",
                        "Newspaper Article",
                        "Serial",
                    ],
                },
                target: {
                    type: [
                        "article-journal",
                        "article-magazine",
                        "article-newspaper",
                        "chapter",
                        "document",
                        "entry-dictionary",
                        "entry-encyclopedia",
                        "periodical",
                    ],
                },
            },
        },
        {source: "0", target: "type", convert: go.TYPE},
        {
            source: "1",
            target: "publisher-place",
            when: {
                source: {0: ["Conference Paper", "Conference Proceedings"]},
                target: {type: ["paper-conference"]},
            },
        },
        {
            source: "1",
            target: "scale",
            when: {source: {0: ["Map"]}, target: {type: ["map"]}},
        },
        {
            source: "2",
            target: "issue",
            when: {
                source: {0: ["Newspaper Article"]},
                target: {type: ["article-newspaper"]},
            },
        },
        {
            source: "2",
            target: "PMCID",
            when: {
                source: {0: ["Journal Article"]},
                target: {type: ["article-journal"]},
            },
        },
        {
            source: "2",
            target: "number",
            when: {source: {0: ["Serial"]}, target: {type: ["periodical"]}},
        },
        {
            source: ["8", "2"],
            target: "issued",
            when: {source: {0: ["Conference Proceedings"]}, target: !1},
            convert: go.DATE,
        },
        {
            source: ["8", "D"],
            target: "issued",
            when: {source: {0: ["Patent"]}, target: {type: ["patent"]}},
            convert: go.DATE,
        },
        {
            source: ["2", "D"],
            target: "issued",
            when: {source: {0: ["Patent"], 8: !1}, target: !1},
            convert: go.DATE,
        },
        {
            source: "3",
            target: "genre",
            when: {source: {0: ["Dataset"]}, target: {type: ["dataset"]}},
        },
        {
            source: "3",
            target: "PMCID",
            when: {source: {0: ["Electronic Article"]}, target: !1},
        },
        {
            source: "3",
            target: "container-title",
            when: {source: {0: ["Conference Proceedings"]}, target: !1},
        },
        {
            source: "3",
            target: "dimensions",
            when: {
                source: {0: ["Artwork", "Audiovisual Material", "Map"]},
                target: {type: ["graphic", "map"]},
            },
        },
        {
            source: "A",
            target: "author",
            when: {
                source: {
                    0: [
                        "Book",
                        "Book Section",
                        "Electronic Article",
                        "Electronic Book",
                        "Electronic Chapter",
                    ],
                    4: !1,
                },
                target: {type: ["book", "chapter"], "reviewed-author": !1},
            },
            convert: go.NAMES,
        },
        {
            source: "A",
            target: "reviewed-author",
            when: {
                source: {
                    0: [
                        "Book",
                        "Book Section",
                        "Electronic Article",
                        "Electronic Book",
                        "Electronic Chapter",
                    ],
                    4: !0,
                },
                target: {type: ["book", "chapter"]},
            },
            convert: go.NAMES,
        },
        {
            source: "4",
            target: "author",
            when: {
                source: {
                    0: [
                        "Book",
                        "Book Section",
                        "Electronic Article",
                        "Electronic Book",
                        "Electronic Chapter",
                    ],
                },
                target: {type: ["book", "chapter"], "reviewed-author": !0},
            },
            convert: go.NAMES,
        },
        {
            source: "6",
            target: "number",
            when: {
                source: {
                    0: [
                        "Catalog",
                        "Dataset",
                        "Manuscript",
                        "Personal Communication",
                    ],
                },
                target: {
                    type: [
                        "dataset",
                        "entry",
                        "manuscript",
                        "personal_communication",
                    ],
                },
            },
        },
        {
            source: "6",
            target: "number-of-volumes",
            when: {
                source: {
                    0: [
                        "Ancient Text",
                        "Book",
                        "Book Section",
                        "Classical Work",
                        "Conference Proceedings",
                        "Dictionary",
                        "Edited Book",
                        "Electronic Chapter",
                        "Encyclopedia",
                        "Generic",
                        "Hearing",
                        "Music",
                        "Serial",
                    ],
                },
                target: {
                    type: [
                        "book",
                        "chapter",
                        "classic",
                        "document",
                        "entry-dictionary",
                        "entry-encyclopedia",
                        "hearing",
                        "musical_score",
                        "periodical",
                        "song",
                    ],
                },
            },
        },
        {
            source: "6",
            target: "container-title-short",
            when: {source: {0: ["Case"]}, target: {type: ["legal_case"]}},
        },
        {
            source: "6",
            target: "collection-number",
            when: {source: {0: ["Report"]}, target: {type: ["report"]}},
        },
        {
            source: "6",
            target: "version",
            when: {source: {0: ["Electronic Book"]}, target: !1},
        },
        {
            source: "@",
            target: "number",
            when: {source: {0: ["Standard"]}, target: {type: ["standard"]}},
        },
        {
            source: "6",
            target: "number",
            when: {source: {0: ["Statute"]}, target: {type: ["legislation"]}},
        },
        {
            source: "V",
            target: "number",
            when: {
                source: {0: ["Legal Rule or Regulation"]},
                target: {type: ["regulation"]},
            },
        },
        {
            source: "]",
            target: "number",
            when: {source: {0: ["Electronic Article"]}, target: !1},
        },
        {
            source: "7",
            target: "edition",
            when: {
                source: {
                    0: [
                        "Ancient Text",
                        "Artwork",
                        "Audiovisual Material",
                        "Blog",
                        "Book",
                        "Book Section",
                        "Catalog",
                        "Classical Work",
                        "Conference Proceedings",
                        "Dictionary",
                        "Edited Book",
                        "Electronic Article",
                        "Electronic Book",
                        "Electronic Chapter",
                        "Encyclopedia",
                        "Film or Broadcast",
                        "Generic",
                        "Government Document",
                        "Legal Rule or Regulation",
                        "Magazine Article",
                        "Map",
                        "Music",
                        "Newspaper Article",
                        "Pamphlet",
                        "Report",
                        "Serial",
                        "Web Page",
                    ],
                },
                target: {
                    type: [
                        "article-magazine",
                        "article-newspaper",
                        "book",
                        "broadcast",
                        "chapter",
                        "classic",
                        "document",
                        "entry",
                        "entry-dictionary",
                        "entry-encyclopedia",
                        "graphic",
                        "map",
                        "motion_picture",
                        "musical_score",
                        "pamphlet",
                        "periodical",
                        "post",
                        "post-weblog",
                        "regulation",
                        "report",
                        "song",
                        "webpage",
                    ],
                },
            },
        },
        {
            source: "7",
            target: "available-date",
            when: {
                source: {0: ["Journal Article"]},
                target: {type: ["article-journal"]},
            },
            convert: go.DATE,
        },
        {
            source: "7",
            target: "version",
            when: {
                source: {
                    0: [
                        "Chart or Table",
                        "Computer Program",
                        "Dataset",
                        "Equation",
                        "Figure",
                    ],
                },
                target: {type: ["dataset", "figure", "software"]},
            },
        },
        {
            source: ["7", "D"],
            target: "issued",
            when: {
                source: {0: ["Aggregated Database", "Online Database"]},
                target: !1,
            },
            convert: go.DATE,
        },
        {
            source: "8",
            target: "accessed",
            when: {
                source: {
                    0: [
                        "Aggregated Database",
                        "Case",
                        "Electronic Article",
                        "Electronic Book",
                        "Online Database",
                        "Online Multimedia",
                    ],
                },
                target: {type: ["legal_case"]},
            },
        },
        {
            source: ["8", "D"],
            target: "issued",
            when: {
                source: {
                    0: [
                        "Ancient Text",
                        "Artwork",
                        "Audiovisual Material",
                        "Bill",
                        "Book",
                        "Catalog",
                        "Chart or Table",
                        "Conference Paper",
                        "Edited Book",
                        "Electronic Chapter",
                        "Encyclopedia",
                        "Equation",
                        "Figure",
                        "Film or Broadcast",
                        "Generic",
                        "Hearing",
                        "Journal Article",
                        "Legal Rule or Regulation",
                        "Magazine Article",
                        "Manuscript",
                        "Map",
                        "Music",
                        "Newspaper Article",
                        "Pamphlet",
                        "Personal Communication",
                        "Report",
                        "Serial",
                        "Standard",
                        "Statute",
                        "Thesis",
                        "Unpublished Work",
                    ],
                },
                target: {
                    type: [
                        "article",
                        "article-journal",
                        "article-magazine",
                        "article-newspaper",
                        "bill",
                        "book",
                        "broadcast",
                        "document",
                        "entry",
                        "entry-encyclopedia",
                        "figure",
                        "graphic",
                        "hearing",
                        "legislation",
                        "manuscript",
                        "map",
                        "motion_picture",
                        "musical_score",
                        "pamphlet",
                        "paper-conference",
                        "periodical",
                        "personal_communication",
                        "regulation",
                        "report",
                        "song",
                        "standard",
                        "thesis",
                    ],
                },
            },
            convert: go.DATE,
        },
        {
            source: "9",
            target: "medium",
            when: {
                source: {0: ["Music"]},
                target: {type: ["musical_score", "song"]},
            },
        },
        {
            source: "9",
            target: "genre",
            when: {
                source: {
                    0: [
                        "Aggregated Database",
                        "Ancient Text",
                        "Artwork",
                        "Audiovisual Material",
                        "Blog",
                        "Book",
                        "Catalog",
                        "Chart or Table",
                        "Classical Work",
                        "Computer Program",
                        "Conference Paper",
                        "Dictionary",
                        "Edited Book",
                        "Electronic Article",
                        "Electronic Book",
                        "Electronic Chapter",
                        "Equation",
                        "Figure",
                        "Generic",
                        "Grant",
                        "Journal Article",
                        "Legal Rule or Regulation",
                        "Magazine Article",
                        "Manuscript",
                        "Map",
                        "Newspaper Article",
                        "Online Database",
                        "Online Multimedia",
                        "Pamphlet",
                        "Patent",
                        "Personal Communication",
                        "Report",
                        "Serial",
                        "Standard",
                        "Unpublished Work",
                        "Web Page",
                    ],
                },
                target: {
                    type: [
                        "article",
                        "article-journal",
                        "article-magazine",
                        "article-newspaper",
                        "book",
                        "classic",
                        "document",
                        "entry",
                        "entry-dictionary",
                        "figure",
                        "graphic",
                        "manuscript",
                        "map",
                        "pamphlet",
                        "paper-conference",
                        "patent",
                        "periodical",
                        "personal_communication",
                        "post",
                        "post-weblog",
                        "regulation",
                        "report",
                        "software",
                        "standard",
                        "webpage",
                    ],
                },
            },
        },
        {
            source: ["9", "V"],
            target: "genre",
            when: {source: {0: ["Thesis"]}, target: {type: ["thesis"]}},
            convert: go.GENRE_DEGREE,
        },
        {
            source: "?",
            target: "performer",
            when: {
                source: {0: ["Audiovisual Material", "Film or Broadcast"]},
                target: {type: ["broadcast", "motion_picture"]},
            },
            convert: go.NAMES,
        },
        {
            source: "?",
            target: "producer",
            when: {
                source: {0: ["Music"]},
                target: {type: ["musical_score", "song"]},
            },
            convert: go.NAMES,
        },
        {
            source: "?",
            target: "translator",
            when: {
                source: {
                    0: [
                        "Ancient Text",
                        "Book",
                        "Book Section",
                        "Catalog",
                        "Classical Work",
                        "Dictionary",
                        "Edited Book",
                        "Electronic Chapter",
                        "Encyclopedia",
                        "Grant",
                        "Pamphlet",
                    ],
                },
                target: {
                    type: [
                        "book",
                        "chapter",
                        "classic",
                        "entry",
                        "entry-dictionary",
                        "entry-encyclopedia",
                        "pamphlet",
                    ],
                },
            },
            convert: go.NAMES,
        },
        {
            source: "@",
            target: "ISBN",
            when: {
                source: {
                    0: [
                        "Ancient Text",
                        "Audiovisual Material",
                        "Blog",
                        "Book",
                        "Book Section",
                        "Catalog",
                        "Computer Program",
                        "Conference Proceedings",
                        "Dictionary",
                        "Edited Book",
                        "Electronic Book",
                        "Encyclopedia",
                        "Hearing",
                        "Music",
                        "Pamphlet",
                        "Serial",
                        "Web Page",
                    ],
                },
                target: {
                    type: [
                        "book",
                        "chapter",
                        "entry",
                        "entry-dictionary",
                        "entry-encyclopedia",
                        "hearing",
                        "musical_score",
                        "pamphlet",
                        "periodical",
                        "post",
                        "post-weblog",
                        "software",
                        "song",
                        "webpage",
                    ],
                },
            },
        },
        {
            source: "@",
            target: "ISSN",
            when: {
                source: {
                    0: [
                        "Dataset",
                        "Electronic Article",
                        "Journal Article",
                        "Magazine Article",
                        "Newspaper Article",
                    ],
                },
                target: {
                    type: [
                        "article-journal",
                        "article-magazine",
                        "article-newspaper",
                        "dataset",
                    ],
                },
            },
        },
        {
            source: "@",
            target: ["ISBN", "ISSN"],
            when: {
                source: {
                    0: [
                        "Aggregated Database",
                        "Classical Work",
                        "Electronic Chapter",
                        "Generic",
                        "Government Document",
                        "Legal Rule or Regulation",
                        "Map",
                    ],
                },
                target: {type: ["classic", "document", "map", "regulation"]},
            },
            convert: go.ISBN_ISSN,
        },
        {
            source: "@",
            target: "number",
            when: {
                source: {0: ["Online Database", "Patent"]},
                target: {type: ["patent"]},
            },
        },
        {
            source: "@",
            target: "number",
            when: {source: {0: ["Report"]}, target: {type: ["report"]}},
        },
        {
            source: "A",
            target: "author",
            when: {
                source: {
                    0: [
                        "Aggregated Database",
                        "Ancient Text",
                        "Artwork",
                        "Audiovisual Material",
                        "Blog",
                        "Catalog",
                        "Chart or Table",
                        "Classical Work",
                        "Computer Program",
                        "Conference Paper",
                        "Conference Proceedings",
                        "Dataset",
                        "Dictionary",
                        "Encyclopedia",
                        "Equation",
                        "Figure",
                        "Generic",
                        "Government Document",
                        "Grant",
                        "Journal Article",
                        "Legal Rule or Regulation",
                        "Magazine Article",
                        "Manuscript",
                        "Map",
                        "Newspaper Article",
                        "Online Database",
                        "Online Multimedia",
                        "Pamphlet",
                        "Patent",
                        "Personal Communication",
                        "Report",
                        "Serial",
                        "Standard",
                        "Thesis",
                        "Unpublished Work",
                        "Web Page",
                    ],
                },
                target: {
                    type: [
                        "article",
                        "article-journal",
                        "article-magazine",
                        "article-newspaper",
                        "classic",
                        "dataset",
                        "document",
                        "entry",
                        "entry-dictionary",
                        "entry-encyclopedia",
                        "figure",
                        "graphic",
                        "manuscript",
                        "map",
                        "pamphlet",
                        "paper-conference",
                        "patent",
                        "periodical",
                        "personal_communication",
                        "post",
                        "post-weblog",
                        "regulation",
                        "report",
                        "software",
                        "standard",
                        "thesis",
                        "webpage",
                    ],
                },
            },
            convert: go.NAMES,
        },
        {
            source: "A",
            target: "composer",
            when: {
                source: {0: ["Music"]},
                target: {type: ["musical_score", "song"]},
            },
            convert: go.NAMES,
        },
        {
            source: "A",
            target: "editor",
            when: {source: {0: ["Edited Book"]}, target: !1},
            convert: go.NAMES,
        },
        {
            source: "A",
            target: "director",
            when: {
                source: {0: ["Film or Broadcast"]},
                target: {type: ["broadcast", "motion_picture"]},
            },
            convert: go.NAMES,
        },
        {
            source: "E",
            target: "director",
            when: {source: {0: ["Film or Broadcast"], A: !1}, target: !1},
            convert: go.NAMES,
        },
        {
            source: "B",
            target: "container-title",
            when: {
                source: {
                    0: [
                        "Aggregated Database",
                        "Ancient Text",
                        "Bill",
                        "Blog",
                        "Book Section",
                        "Case",
                        "Dictionary",
                        "Electronic Article",
                        "Electronic Chapter",
                        "Encyclopedia",
                        "Magazine Article",
                        "Manuscript",
                        "Music",
                        "Newspaper Article",
                        "Online Database",
                        "Statute",
                    ],
                },
                target: {
                    type: [
                        "article-magazine",
                        "article-newspaper",
                        "bill",
                        "chapter",
                        "entry-dictionary",
                        "entry-encyclopedia",
                        "legal_case",
                        "legislation",
                        "manuscript",
                        "musical_score",
                        "post",
                        "post-weblog",
                        "song",
                    ],
                },
            },
        },
        {
            source: "B",
            target: "committee",
            when: {source: {0: ["Hearing"]}, target: {type: ["hearing"]}},
            convert: go.NAMES,
        },
        {
            source: "B",
            target: "event-title",
            when: {
                source: {0: ["Conference Paper", "Conference Proceedings"]},
                target: {type: ["paper-conference"]},
            },
        },
        {
            source: "B",
            target: "collection-title",
            when: {
                source: {
                    0: [
                        "Audiovisual Material",
                        "Book",
                        "Catalog",
                        "Classical Work",
                        "Computer Program",
                        "Edited Book",
                        "Film or Broadcast",
                        "Map",
                        "Online Multimedia",
                        "Report",
                        "Unpublished Work",
                        "Web Page",
                    ],
                },
                target: {
                    type: [
                        "article",
                        "book",
                        "broadcast",
                        "classic",
                        "entry",
                        "map",
                        "motion_picture",
                        "report",
                        "software",
                        "webpage",
                    ],
                },
            },
        },
        {
            source: "C",
            target: "event-place",
            when: {
                source: {0: ["Conference Paper", "Conference Proceedings"]},
                target: {type: ["paper-conference"]},
            },
        },
        {
            source: "C",
            target: "publisher-place",
            when: {
                source: {
                    0: [
                        "Aggregated Database",
                        "Ancient Text",
                        "Artwork",
                        "Audiovisual Material",
                        "Blog",
                        "Book",
                        "Book Section",
                        "Catalog",
                        "Chart or Table",
                        "Classical Work",
                        "Computer Program",
                        "Dataset",
                        "Dictionary",
                        "Edited Book",
                        "Electronic Article",
                        "Electronic Book",
                        "Electronic Chapter",
                        "Encyclopedia",
                        "Equation",
                        "Figure",
                        "Film or Broadcast",
                        "Generic",
                        "Government Document",
                        "Hearing",
                        "Legal Rule or Regulation",
                        "Magazine Article",
                        "Manuscript",
                        "Map",
                        "Music",
                        "Newspaper Article",
                        "Online Database",
                        "Pamphlet",
                        "Personal Communication",
                        "Report",
                        "Serial",
                        "Standard",
                        "Thesis",
                        "Unpublished Work",
                        "Web Page",
                    ],
                },
                target: {
                    type: [
                        "article",
                        "article-magazine",
                        "article-newspaper",
                        "book",
                        "broadcast",
                        "chapter",
                        "classic",
                        "dataset",
                        "document",
                        "entry",
                        "entry-dictionary",
                        "entry-encyclopedia",
                        "figure",
                        "graphic",
                        "hearing",
                        "manuscript",
                        "map",
                        "motion_picture",
                        "musical_score",
                        "pamphlet",
                        "periodical",
                        "personal_communication",
                        "post",
                        "post-weblog",
                        "regulation",
                        "report",
                        "software",
                        "song",
                        "standard",
                        "thesis",
                        "webpage",
                    ],
                },
            },
        },
        {
            source: "D",
            target: "issued",
            when: {
                source: {
                    0: [
                        "Blog",
                        "Book Section",
                        "Classical Work",
                        "Computer Program",
                        "Dataset",
                        "Dictionary",
                        "Electronic Article",
                        "Government Document",
                        "Grant",
                        "Online Multimedia",
                        "Web Page",
                    ],
                },
                target: {
                    type: [
                        "chapter",
                        "classic",
                        "dataset",
                        "entry-dictionary",
                        "post",
                        "post-weblog",
                        "software",
                        "webpage",
                    ],
                },
            },
            convert: go.YEAR,
        },
        {
            source: "D",
            target: "event-date",
            when: {source: {0: ["Conference Proceedings"]}, target: !1},
            convert: go.DATE,
        },
        {
            source: "E",
            target: "editor",
            when: {
                source: {
                    0: [
                        "Ancient Text",
                        "Blog",
                        "Book Section",
                        "Conference Paper",
                        "Conference Proceedings",
                        "Dictionary",
                        "Electronic Book",
                        "Electronic Chapter",
                        "Encyclopedia",
                        "Music",
                        "Serial",
                    ],
                },
                target: {
                    type: [
                        "chapter",
                        "entry-dictionary",
                        "entry-encyclopedia",
                        "musical_score",
                        "paper-conference",
                        "periodical",
                        "post",
                        "post-weblog",
                        "song",
                    ],
                },
            },
            convert: go.NAMES,
        },
        {
            source: "E",
            target: "collection-editor",
            when: {
                source: {
                    0: [
                        "Audiovisual Material",
                        "Book",
                        "Classical Work",
                        "Computer Program",
                        "Edited Book",
                        "Map",
                        "Online Multimedia",
                        "Report",
                        "Unpublished Work",
                        "Web Page",
                    ],
                },
                target: {
                    type: [
                        "article",
                        "book",
                        "classic",
                        "map",
                        "report",
                        "software",
                        "webpage",
                    ],
                },
            },
            convert: go.NAMES,
        },
        {
            source: "E",
            target: "recipient",
            when: {
                source: {0: ["Personal Communication"]},
                target: {type: ["personal_communication"]},
            },
        },
        {
            source: "F",
            target: "citation-key",
            when: {
                source: {
                    0: [
                        "Aggregated Database",
                        "Ancient Text",
                        "Artwork",
                        "Audiovisual Material",
                        "Bill",
                        "Blog",
                        "Book",
                        "Book Section",
                        "Case",
                        "Catalog",
                        "Chart or Table",
                        "Classical Work",
                        "Computer Program",
                        "Conference Paper",
                        "Conference Proceedings",
                        "Dataset",
                        "Dictionary",
                        "Edited Book",
                        "Electronic Article",
                        "Electronic Book",
                        "Electronic Chapter",
                        "Encyclopedia",
                        "Equation",
                        "Figure",
                        "Film or Broadcast",
                        "Generic",
                        "Government Document",
                        "Grant",
                        "Hearing",
                        "Journal Article",
                        "Legal Rule or Regulation",
                        "Magazine Article",
                        "Manuscript",
                        "Map",
                        "Music",
                        "Newspaper Article",
                        "Online Database",
                        "Online Multimedia",
                        "Pamphlet",
                        "Patent",
                        "Personal Communication",
                        "Report",
                        "Serial",
                        "Standard",
                        "Statute",
                        "Thesis",
                        "Unpublished Work",
                        "Web Page",
                    ],
                },
                target: {
                    type: [
                        "article",
                        "article-journal",
                        "article-magazine",
                        "article-newspaper",
                        "bill",
                        "book",
                        "broadcast",
                        "chapter",
                        "classic",
                        "dataset",
                        "document",
                        "entry",
                        "entry-dictionary",
                        "entry-encyclopedia",
                        "figure",
                        "graphic",
                        "hearing",
                        "legal_case",
                        "legislation",
                        "manuscript",
                        "map",
                        "motion_picture",
                        "musical_score",
                        "pamphlet",
                        "paper-conference",
                        "patent",
                        "periodical",
                        "personal_communication",
                        "post",
                        "post-weblog",
                        "regulation",
                        "report",
                        "software",
                        "song",
                        "standard",
                        "thesis",
                        "webpage",
                    ],
                },
            },
        },
        {
            source: "G",
            target: "language",
            when: {
                source: {
                    0: [
                        "Aggregated Database",
                        "Ancient Text",
                        "Artwork",
                        "Audiovisual Material",
                        "Bill",
                        "Blog",
                        "Book",
                        "Book Section",
                        "Case",
                        "Catalog",
                        "Chart or Table",
                        "Classical Work",
                        "Computer Program",
                        "Conference Paper",
                        "Conference Proceedings",
                        "Dataset",
                        "Dictionary",
                        "Edited Book",
                        "Electronic Article",
                        "Electronic Book",
                        "Electronic Chapter",
                        "Encyclopedia",
                        "Equation",
                        "Figure",
                        "Film or Broadcast",
                        "Generic",
                        "Government Document",
                        "Grant",
                        "Hearing",
                        "Journal Article",
                        "Legal Rule or Regulation",
                        "Magazine Article",
                        "Manuscript",
                        "Map",
                        "Music",
                        "Newspaper Article",
                        "Online Database",
                        "Online Multimedia",
                        "Pamphlet",
                        "Patent",
                        "Personal Communication",
                        "Report",
                        "Serial",
                        "Standard",
                        "Statute",
                        "Thesis",
                        "Unpublished Work",
                        "Web Page",
                    ],
                },
                target: {
                    type: [
                        "article",
                        "article-journal",
                        "article-magazine",
                        "article-newspaper",
                        "bill",
                        "book",
                        "broadcast",
                        "chapter",
                        "classic",
                        "dataset",
                        "document",
                        "entry",
                        "entry-dictionary",
                        "entry-encyclopedia",
                        "figure",
                        "graphic",
                        "hearing",
                        "legal_case",
                        "legislation",
                        "manuscript",
                        "map",
                        "motion_picture",
                        "musical_score",
                        "pamphlet",
                        "paper-conference",
                        "patent",
                        "periodical",
                        "personal_communication",
                        "post",
                        "post-weblog",
                        "regulation",
                        "report",
                        "software",
                        "song",
                        "standard",
                        "thesis",
                        "webpage",
                    ],
                },
            },
        },
        {
            source: "I",
            target: "publisher",
            when: {
                source: {
                    0: [
                        "Aggregated Database",
                        "Ancient Text",
                        "Artwork",
                        "Audiovisual Material",
                        "Blog",
                        "Book",
                        "Book Section",
                        "Catalog",
                        "Chart or Table",
                        "Classical Work",
                        "Computer Program",
                        "Conference Paper",
                        "Conference Proceedings",
                        "Dataset",
                        "Dictionary",
                        "Edited Book",
                        "Electronic Article",
                        "Electronic Book",
                        "Electronic Chapter",
                        "Encyclopedia",
                        "Equation",
                        "Figure",
                        "Film or Broadcast",
                        "Generic",
                        "Government Document",
                        "Hearing",
                        "Legal Rule or Regulation",
                        "Magazine Article",
                        "Map",
                        "Music",
                        "Newspaper Article",
                        "Online Database",
                        "Online Multimedia",
                        "Pamphlet",
                        "Personal Communication",
                        "Serial",
                        "Standard",
                        "Thesis",
                        "Unpublished Work",
                        "Web Page",
                    ],
                },
                target: {
                    type: [
                        "article",
                        "article-magazine",
                        "article-newspaper",
                        "book",
                        "broadcast",
                        "chapter",
                        "classic",
                        "dataset",
                        "document",
                        "entry",
                        "entry-dictionary",
                        "entry-encyclopedia",
                        "figure",
                        "graphic",
                        "hearing",
                        "map",
                        "motion_picture",
                        "musical_score",
                        "pamphlet",
                        "paper-conference",
                        "periodical",
                        "personal_communication",
                        "post",
                        "post-weblog",
                        "regulation",
                        "software",
                        "song",
                        "standard",
                        "thesis",
                        "webpage",
                    ],
                },
            },
        },
        {
            source: "Y",
            target: "publisher",
            when: {source: {0: ["Report"]}, target: {type: ["report"]}},
        },
        {
            source: "J",
            target: "container-title",
            when: {
                source: {0: ["Journal Article"]},
                target: {type: ["article-journal"]},
            },
        },
        {
            source: "K",
            target: "keyword",
            when: {
                source: {
                    0: [
                        "Aggregated Database",
                        "Ancient Text",
                        "Artwork",
                        "Audiovisual Material",
                        "Bill",
                        "Blog",
                        "Book",
                        "Book Section",
                        "Case",
                        "Catalog",
                        "Chart or Table",
                        "Classical Work",
                        "Computer Program",
                        "Conference Paper",
                        "Conference Proceedings",
                        "Dataset",
                        "Dictionary",
                        "Edited Book",
                        "Electronic Article",
                        "Electronic Book",
                        "Electronic Chapter",
                        "Encyclopedia",
                        "Equation",
                        "Figure",
                        "Film or Broadcast",
                        "Generic",
                        "Government Document",
                        "Grant",
                        "Hearing",
                        "Journal Article",
                        "Legal Rule or Regulation",
                        "Magazine Article",
                        "Manuscript",
                        "Map",
                        "Music",
                        "Newspaper Article",
                        "Online Database",
                        "Online Multimedia",
                        "Pamphlet",
                        "Patent",
                        "Personal Communication",
                        "Report",
                        "Serial",
                        "Standard",
                        "Statute",
                        "Thesis",
                        "Unpublished Work",
                        "Web Page",
                    ],
                },
                target: {
                    type: [
                        "article",
                        "article-journal",
                        "article-magazine",
                        "article-newspaper",
                        "bill",
                        "book",
                        "broadcast",
                        "chapter",
                        "classic",
                        "dataset",
                        "document",
                        "entry",
                        "entry-dictionary",
                        "entry-encyclopedia",
                        "figure",
                        "graphic",
                        "hearing",
                        "legal_case",
                        "legislation",
                        "manuscript",
                        "map",
                        "motion_picture",
                        "musical_score",
                        "pamphlet",
                        "paper-conference",
                        "patent",
                        "periodical",
                        "personal_communication",
                        "post",
                        "post-weblog",
                        "regulation",
                        "report",
                        "software",
                        "song",
                        "standard",
                        "thesis",
                        "webpage",
                    ],
                },
            },
        },
        {
            source: "L",
            target: "call-number",
            when: {
                source: {
                    0: [
                        "Ancient Text",
                        "Artwork",
                        "Audiovisual Material",
                        "Bill",
                        "Blog",
                        "Book",
                        "Book Section",
                        "Case",
                        "Catalog",
                        "Chart or Table",
                        "Classical Work",
                        "Computer Program",
                        "Conference Proceedings",
                        "Dataset",
                        "Dictionary",
                        "Edited Book",
                        "Electronic Book",
                        "Electronic Chapter",
                        "Encyclopedia",
                        "Equation",
                        "Figure",
                        "Film or Broadcast",
                        "Generic",
                        "Grant",
                        "Hearing",
                        "Journal Article",
                        "Legal Rule or Regulation",
                        "Magazine Article",
                        "Manuscript",
                        "Map",
                        "Music",
                        "Newspaper Article",
                        "Pamphlet",
                        "Patent",
                        "Personal Communication",
                        "Report",
                        "Serial",
                        "Standard",
                        "Statute",
                        "Thesis",
                        "Web Page",
                    ],
                },
                target: {
                    type: [
                        "article-journal",
                        "article-magazine",
                        "article-newspaper",
                        "bill",
                        "book",
                        "broadcast",
                        "chapter",
                        "classic",
                        "dataset",
                        "document",
                        "entry",
                        "entry-dictionary",
                        "entry-encyclopedia",
                        "figure",
                        "graphic",
                        "hearing",
                        "legal_case",
                        "legislation",
                        "manuscript",
                        "map",
                        "motion_picture",
                        "musical_score",
                        "pamphlet",
                        "patent",
                        "periodical",
                        "personal_communication",
                        "post",
                        "post-weblog",
                        "regulation",
                        "report",
                        "software",
                        "song",
                        "standard",
                        "thesis",
                        "webpage",
                    ],
                },
            },
        },
        {
            source: "N",
            target: "number",
            when: {
                source: {
                    0: [
                        "Aggregated Database",
                        "Ancient Text",
                        "Audiovisual Material",
                        "Bill",
                        "Chart or Table",
                        "Dictionary",
                        "Equation",
                        "Figure",
                        "Generic",
                        "Government Document",
                        "Hearing",
                        "Thesis",
                        "Unpublished Work",
                    ],
                },
                target: {
                    type: [
                        "article",
                        "bill",
                        "document",
                        "entry-dictionary",
                        "figure",
                        "hearing",
                        "thesis",
                    ],
                },
            },
        },
        {
            source: "N",
            target: "issue",
            when: {
                source: {
                    0: [
                        "Conference Paper",
                        "Conference Proceedings",
                        "Electronic Article",
                        "Journal Article",
                        "Magazine Article",
                    ],
                },
                target: {
                    type: [
                        "article-journal",
                        "article-magazine",
                        "paper-conference",
                    ],
                },
            },
        },
        {
            source: "N",
            target: "collection-number",
            when: {
                source: {
                    0: [
                        "Book",
                        "Book Section",
                        "Catalog",
                        "Classical Work",
                        "Edited Book",
                        "Electronic Chapter",
                        "Pamphlet",
                        "Serial",
                    ],
                },
                target: {
                    type: [
                        "book",
                        "chapter",
                        "classic",
                        "entry",
                        "pamphlet",
                        "periodical",
                    ],
                },
            },
        },
        {
            source: "N",
            target: "page-first",
            when: {
                source: {
                    0: [
                        "Legal Rule or Regulation",
                        "Newspaper Article",
                        "Standard",
                    ],
                },
                target: {type: ["article-newspaper", "regulation", "standard"]},
            },
        },
        {
            source: "N",
            target: "status",
            when: {source: {0: ["Grant"]}, target: !1},
        },
        {
            source: "N",
            target: "accessed",
            when: {source: {0: ["Web Page"]}, target: {type: ["webpage"]}},
            convert: go.DATE,
        },
        {
            source: "P",
            target: "page",
            when: {
                source: {
                    0: [
                        "Aggregated Database",
                        "Ancient Text",
                        "Bill",
                        "Book Section",
                        "Catalog",
                        "Conference Paper",
                        "Conference Proceedings",
                        "Dictionary",
                        "Electronic Article",
                        "Encyclopedia",
                        "Generic",
                        "Government Document",
                        "Grant",
                        "Hearing",
                        "Journal Article",
                        "Legal Rule or Regulation",
                        "Magazine Article",
                        "Manuscript",
                        "Music",
                        "Newspaper Article",
                        "Online Database",
                        "Pamphlet",
                        "Patent",
                        "Personal Communication",
                        "Report",
                        "Serial",
                        "Standard",
                        "Statute",
                        "Unpublished Work",
                    ],
                },
                target: {
                    type: [
                        "article",
                        "article-journal",
                        "article-magazine",
                        "article-newspaper",
                        "bill",
                        "chapter",
                        "document",
                        "entry",
                        "entry-dictionary",
                        "entry-encyclopedia",
                        "hearing",
                        "legislation",
                        "manuscript",
                        "musical_score",
                        "pamphlet",
                        "paper-conference",
                        "patent",
                        "periodical",
                        "personal_communication",
                        "regulation",
                        "report",
                        "song",
                        "standard",
                    ],
                },
            },
        },
        {
            source: "P",
            target: "page-first",
            when: {source: {0: ["Case"]}, target: {type: ["legal_case"]}},
        },
        {
            source: "P",
            target: "number-of-pages",
            when: {
                source: {
                    0: [
                        "Book",
                        "Classical Work",
                        "Edited Book",
                        "Electronic Book",
                        "Electronic Chapter",
                        "Thesis",
                    ],
                },
                target: {type: ["book", "classic", "thesis"]},
            },
        },
        {
            source: "P",
            target: "dimensions",
            when: {
                source: {0: ["Film or Broadcast"]},
                target: {type: ["broadcast", "motion_picture"]},
            },
        },
        {
            source: "Q",
            target: "title",
            when: {
                source: {
                    0: [
                        "Aggregated Database",
                        "Ancient Text",
                        "Artwork",
                        "Audiovisual Material",
                        "Bill",
                        "Blog",
                        "Book",
                        "Case",
                        "Catalog",
                        "Chart or Table",
                        "Classical Work",
                        "Computer Program",
                        "Conference Paper",
                        "Conference Proceedings",
                        "Dataset",
                        "Edited Book",
                        "Electronic Article",
                        "Electronic Book",
                        "Equation",
                        "Figure",
                        "Film or Broadcast",
                        "Generic",
                        "Government Document",
                        "Grant",
                        "Hearing",
                        "Journal Article",
                        "Legal Rule or Regulation",
                        "Magazine Article",
                        "Manuscript",
                        "Map",
                        "Music",
                        "Newspaper Article",
                        "Online Database",
                        "Online Multimedia",
                        "Pamphlet",
                        "Patent",
                        "Personal Communication",
                        "Report",
                        "Standard",
                        "Statute",
                        "Thesis",
                        "Unpublished Work",
                        "Web Page",
                    ],
                },
                target: {
                    type: [
                        "article",
                        "article-journal",
                        "article-magazine",
                        "article-newspaper",
                        "bill",
                        "book",
                        "broadcast",
                        "classic",
                        "dataset",
                        "document",
                        "entry",
                        "figure",
                        "graphic",
                        "hearing",
                        "legal_case",
                        "legislation",
                        "manuscript",
                        "map",
                        "motion_picture",
                        "musical_score",
                        "pamphlet",
                        "paper-conference",
                        "patent",
                        "personal_communication",
                        "post",
                        "post-weblog",
                        "regulation",
                        "report",
                        "software",
                        "song",
                        "standard",
                        "thesis",
                        "webpage",
                    ],
                    "original-title": !0,
                },
            },
        },
        {
            source: "T",
            target: "original-title",
            when: {
                source: {
                    0: [
                        "Aggregated Database",
                        "Ancient Text",
                        "Artwork",
                        "Audiovisual Material",
                        "Bill",
                        "Blog",
                        "Book",
                        "Case",
                        "Catalog",
                        "Chart or Table",
                        "Classical Work",
                        "Computer Program",
                        "Conference Paper",
                        "Conference Proceedings",
                        "Dataset",
                        "Edited Book",
                        "Electronic Article",
                        "Electronic Book",
                        "Equation",
                        "Figure",
                        "Film or Broadcast",
                        "Generic",
                        "Government Document",
                        "Grant",
                        "Hearing",
                        "Journal Article",
                        "Legal Rule or Regulation",
                        "Magazine Article",
                        "Manuscript",
                        "Map",
                        "Music",
                        "Newspaper Article",
                        "Online Database",
                        "Online Multimedia",
                        "Pamphlet",
                        "Patent",
                        "Personal Communication",
                        "Report",
                        "Standard",
                        "Statute",
                        "Thesis",
                        "Unpublished Work",
                        "Web Page",
                    ],
                    Q: !0,
                },
                target: {
                    type: [
                        "article",
                        "article-journal",
                        "article-magazine",
                        "article-newspaper",
                        "bill",
                        "book",
                        "broadcast",
                        "classic",
                        "dataset",
                        "document",
                        "entry",
                        "figure",
                        "graphic",
                        "hearing",
                        "legal_case",
                        "legislation",
                        "manuscript",
                        "map",
                        "motion_picture",
                        "musical_score",
                        "pamphlet",
                        "paper-conference",
                        "patent",
                        "personal_communication",
                        "post",
                        "post-weblog",
                        "regulation",
                        "report",
                        "software",
                        "song",
                        "standard",
                        "thesis",
                        "webpage",
                    ],
                },
            },
        },
        {
            source: "T",
            target: "title",
            when: {
                source: {
                    0: [
                        "Aggregated Database",
                        "Ancient Text",
                        "Artwork",
                        "Audiovisual Material",
                        "Bill",
                        "Blog",
                        "Book",
                        "Case",
                        "Catalog",
                        "Chart or Table",
                        "Classical Work",
                        "Computer Program",
                        "Conference Paper",
                        "Conference Proceedings",
                        "Dataset",
                        "Edited Book",
                        "Electronic Article",
                        "Electronic Book",
                        "Equation",
                        "Figure",
                        "Film or Broadcast",
                        "Generic",
                        "Government Document",
                        "Grant",
                        "Hearing",
                        "Journal Article",
                        "Legal Rule or Regulation",
                        "Magazine Article",
                        "Manuscript",
                        "Map",
                        "Music",
                        "Newspaper Article",
                        "Online Database",
                        "Online Multimedia",
                        "Pamphlet",
                        "Patent",
                        "Personal Communication",
                        "Report",
                        "Standard",
                        "Statute",
                        "Thesis",
                        "Unpublished Work",
                        "Web Page",
                    ],
                    Q: !1,
                },
                target: {
                    type: [
                        "article",
                        "article-journal",
                        "article-magazine",
                        "article-newspaper",
                        "bill",
                        "book",
                        "broadcast",
                        "classic",
                        "dataset",
                        "document",
                        "entry",
                        "figure",
                        "graphic",
                        "hearing",
                        "legal_case",
                        "legislation",
                        "manuscript",
                        "map",
                        "motion_picture",
                        "musical_score",
                        "pamphlet",
                        "paper-conference",
                        "patent",
                        "personal_communication",
                        "post",
                        "post-weblog",
                        "regulation",
                        "report",
                        "software",
                        "song",
                        "standard",
                        "thesis",
                        "webpage",
                    ],
                    "original-title": !1,
                },
            },
        },
        {
            source: "1",
            target: "title",
            when: {
                source: {
                    0: [
                        "Book Section",
                        "Dictionary",
                        "Electronic Chapter",
                        "Encyclopedia",
                        "Serial",
                    ],
                },
                target: {
                    type: [
                        "chapter",
                        "entry-dictionary",
                        "entry-encyclopedia",
                        "periodical",
                    ],
                },
            },
        },
        {
            source: "&",
            target: "title",
            when: {source: {0: ["Book Section", "Serial"], 1: !1}, target: !1},
        },
        {
            source: "T",
            target: "container-title",
            when: {
                source: {
                    0: [
                        "Book Section",
                        "Dictionary",
                        "Electronic Chapter",
                        "Encyclopedia",
                        "Serial",
                    ],
                },
                target: {
                    type: [
                        "chapter",
                        "entry-dictionary",
                        "entry-encyclopedia",
                        "periodical",
                    ],
                },
            },
        },
        {
            source: "R",
            target: "DOI",
            when: {
                source: {
                    0: [
                        "Aggregated Database",
                        "Ancient Text",
                        "Artwork",
                        "Audiovisual Material",
                        "Bill",
                        "Blog",
                        "Book",
                        "Book Section",
                        "Case",
                        "Catalog",
                        "Chart or Table",
                        "Classical Work",
                        "Computer Program",
                        "Conference Paper",
                        "Conference Proceedings",
                        "Dataset",
                        "Dictionary",
                        "Edited Book",
                        "Electronic Article",
                        "Electronic Book",
                        "Electronic Chapter",
                        "Encyclopedia",
                        "Equation",
                        "Figure",
                        "Film or Broadcast",
                        "Generic",
                        "Government Document",
                        "Grant",
                        "Hearing",
                        "Journal Article",
                        "Legal Rule or Regulation",
                        "Magazine Article",
                        "Manuscript",
                        "Map",
                        "Music",
                        "Newspaper Article",
                        "Online Database",
                        "Online Multimedia",
                        "Pamphlet",
                        "Patent",
                        "Personal Communication",
                        "Report",
                        "Serial",
                        "Standard",
                        "Statute",
                        "Thesis",
                        "Unpublished Work",
                        "Web Page",
                    ],
                },
                target: {
                    type: [
                        "article",
                        "article-journal",
                        "article-magazine",
                        "article-newspaper",
                        "bill",
                        "book",
                        "broadcast",
                        "chapter",
                        "classic",
                        "dataset",
                        "document",
                        "entry",
                        "entry-dictionary",
                        "entry-encyclopedia",
                        "figure",
                        "graphic",
                        "hearing",
                        "legal_case",
                        "legislation",
                        "manuscript",
                        "map",
                        "motion_picture",
                        "musical_score",
                        "pamphlet",
                        "paper-conference",
                        "patent",
                        "periodical",
                        "personal_communication",
                        "post",
                        "post-weblog",
                        "regulation",
                        "report",
                        "software",
                        "song",
                        "standard",
                        "thesis",
                        "webpage",
                    ],
                },
            },
        },
        {
            source: "S",
            target: "collection-title",
            when: {
                source: {
                    0: [
                        "Book Section",
                        "Conference Proceedings",
                        "Dataset",
                        "Electronic Book",
                        "Electronic Chapter",
                        "Government Document",
                        "Music",
                        "Serial",
                    ],
                },
                target: {
                    type: [
                        "chapter",
                        "dataset",
                        "musical_score",
                        "periodical",
                        "song",
                    ],
                },
            },
        },
        {
            source: "U",
            target: "URL",
            when: {
                source: {
                    0: [
                        "Aggregated Database",
                        "Ancient Text",
                        "Artwork",
                        "Audiovisual Material",
                        "Bill",
                        "Blog",
                        "Book",
                        "Book Section",
                        "Case",
                        "Catalog",
                        "Chart or Table",
                        "Classical Work",
                        "Computer Program",
                        "Conference Paper",
                        "Conference Proceedings",
                        "Dataset",
                        "Dictionary",
                        "Edited Book",
                        "Electronic Article",
                        "Electronic Book",
                        "Electronic Chapter",
                        "Encyclopedia",
                        "Equation",
                        "Figure",
                        "Film or Broadcast",
                        "Generic",
                        "Government Document",
                        "Grant",
                        "Hearing",
                        "Journal Article",
                        "Legal Rule or Regulation",
                        "Magazine Article",
                        "Manuscript",
                        "Map",
                        "Music",
                        "Newspaper Article",
                        "Online Database",
                        "Online Multimedia",
                        "Pamphlet",
                        "Patent",
                        "Personal Communication",
                        "Report",
                        "Serial",
                        "Standard",
                        "Statute",
                        "Thesis",
                        "Unpublished Work",
                        "Web Page",
                    ],
                },
                target: {
                    type: [
                        "article",
                        "article-journal",
                        "article-magazine",
                        "article-newspaper",
                        "bill",
                        "book",
                        "broadcast",
                        "chapter",
                        "classic",
                        "dataset",
                        "document",
                        "entry",
                        "entry-dictionary",
                        "entry-encyclopedia",
                        "figure",
                        "graphic",
                        "hearing",
                        "legal_case",
                        "legislation",
                        "manuscript",
                        "map",
                        "motion_picture",
                        "musical_score",
                        "pamphlet",
                        "paper-conference",
                        "patent",
                        "periodical",
                        "personal_communication",
                        "post",
                        "post-weblog",
                        "regulation",
                        "report",
                        "software",
                        "song",
                        "standard",
                        "thesis",
                        "webpage",
                    ],
                },
            },
        },
        {
            source: "V",
            target: "issue",
            when: {source: {0: ["Statute"]}, target: {type: ["legislation"]}},
        },
        {
            source: "V",
            target: "volume",
            when: {
                source: {
                    0: [
                        "Aggregated Database",
                        "Ancient Text",
                        "Audiovisual Material",
                        "Bill",
                        "Book",
                        "Book Section",
                        "Case",
                        "Catalog",
                        "Classical Work",
                        "Conference Paper",
                        "Conference Proceedings",
                        "Dictionary",
                        "Edited Book",
                        "Electronic Article",
                        "Electronic Book",
                        "Electronic Chapter",
                        "Encyclopedia",
                        "Generic",
                        "Government Document",
                        "Journal Article",
                        "Magazine Article",
                        "Manuscript",
                        "Music",
                        "Newspaper Article",
                        "Online Database",
                        "Report",
                        "Serial",
                    ],
                },
                target: {
                    type: [
                        "article-journal",
                        "article-magazine",
                        "article-newspaper",
                        "bill",
                        "book",
                        "chapter",
                        "classic",
                        "document",
                        "entry",
                        "entry-dictionary",
                        "entry-encyclopedia",
                        "legal_case",
                        "manuscript",
                        "musical_score",
                        "paper-conference",
                        "periodical",
                        "report",
                        "song",
                    ],
                },
            },
        },
        {
            source: "V",
            target: "edition",
            when: {
                source: {0: ["Computer Program"]},
                target: {type: ["software"]},
            },
        },
        {
            source: "V",
            target: "dimensions",
            when: {
                source: {0: ["Chart or Table", "Equation", "Figure"]},
                target: {type: ["figure"]},
            },
        },
        {
            source: "V",
            target: "number",
            when: {source: {0: ["Pamphlet"]}, target: {type: ["pamphlet"]}},
        },
        {
            source: "V",
            target: "version",
            when: {source: {0: ["Patent"]}, target: {type: ["patent"]}},
        },
        {
            source: ["[", "V"],
            target: "accessed",
            when: {
                source: {0: ["Blog"]},
                target: {type: ["post", "post-weblog"]},
            },
            convert: go.DATE,
        },
        {source: "X", target: "abstract"},
        {
            source: "7",
            target: "abstract",
            when: {
                source: {0: ["Manuscript", "Personal Communication"], X: !1},
                target: !1,
            },
        },
        {
            source: "P",
            target: "abstract",
            when: {
                source: {
                    0: [
                        "Artwork",
                        "Blog",
                        "Chart or Table",
                        "Computer Program",
                        "Equation",
                        "Figure",
                        "Map",
                        "Web Page",
                    ],
                    X: !1,
                },
                target: !1,
            },
        },
        {
            source: "Y",
            target: "editor",
            when: {source: {0: ["Book"]}, target: {type: ["book"]}},
            convert: go.NAMES,
        },
        {
            source: "Y",
            target: "collection-editor",
            when: {
                source: {
                    0: [
                        "Book Section",
                        "Conference Proceedings",
                        "Electronic Book",
                        "Electronic Chapter",
                        "Music",
                        "Serial",
                    ],
                },
                target: {
                    type: ["chapter", "musical_score", "periodical", "song"],
                },
            },
            convert: go.NAMES,
        },
        {
            source: "Y",
            target: "illustrator",
            when: {
                source: {0: ["Blog"]},
                target: {type: ["post", "post-weblog"]},
            },
            convert: go.NAMES,
        },
        {
            source: "Y",
            target: "producer",
            when: {
                source: {0: ["Film or Broadcast"]},
                target: {type: ["broadcast", "motion_picture"]},
            },
            convert: go.NAMES,
        },
        {
            source: "Z",
            target: "note",
            when: {
                source: {
                    0: [
                        "Aggregated Database",
                        "Ancient Text",
                        "Artwork",
                        "Audiovisual Material",
                        "Bill",
                        "Book",
                        "Book Section",
                        "Case",
                        "Catalog",
                        "Chart or Table",
                        "Classical Work",
                        "Computer Program",
                        "Conference Paper",
                        "Conference Proceedings",
                        "Dataset",
                        "Dictionary",
                        "Edited Book",
                        "Electronic Article",
                        "Electronic Book",
                        "Electronic Chapter",
                        "Encyclopedia",
                        "Equation",
                        "Figure",
                        "Film or Broadcast",
                        "Generic",
                        "Government Document",
                        "Grant",
                        "Hearing",
                        "Magazine Article",
                        "Manuscript",
                        "Map",
                        "Music",
                        "Newspaper Article",
                        "Online Database",
                        "Online Multimedia",
                        "Pamphlet",
                        "Patent",
                        "Personal Communication",
                        "Report",
                        "Serial",
                        "Standard",
                        "Statute",
                        "Thesis",
                        "Unpublished Work",
                        "Web Page",
                    ],
                },
                target: {
                    type: [
                        "article",
                        "article-magazine",
                        "article-newspaper",
                        "bill",
                        "book",
                        "broadcast",
                        "chapter",
                        "classic",
                        "dataset",
                        "document",
                        "entry",
                        "entry-dictionary",
                        "entry-encyclopedia",
                        "figure",
                        "graphic",
                        "hearing",
                        "legal_case",
                        "legislation",
                        "manuscript",
                        "map",
                        "motion_picture",
                        "musical_score",
                        "pamphlet",
                        "paper-conference",
                        "patent",
                        "periodical",
                        "personal_communication",
                        "report",
                        "software",
                        "song",
                        "standard",
                        "thesis",
                        "webpage",
                    ],
                },
            },
        },
        {
            source: "[",
            target: "accessed",
            when: {
                source: {
                    0: [
                        "Ancient Text",
                        "Artwork",
                        "Audiovisual Material",
                        "Bill",
                        "Book",
                        "Book Section",
                        "Catalog",
                        "Chart or Table",
                        "Classical Work",
                        "Computer Program",
                        "Conference Paper",
                        "Conference Proceedings",
                        "Dataset",
                        "Dictionary",
                        "Edited Book",
                        "Electronic Chapter",
                        "Encyclopedia",
                        "Equation",
                        "Figure",
                        "Film or Broadcast",
                        "Generic",
                        "Government Document",
                        "Grant",
                        "Hearing",
                        "Journal Article",
                        "Legal Rule or Regulation",
                        "Magazine Article",
                        "Manuscript",
                        "Map",
                        "Music",
                        "Newspaper Article",
                        "Pamphlet",
                        "Patent",
                        "Personal Communication",
                        "Report",
                        "Serial",
                        "Standard",
                        "Statute",
                        "Thesis",
                        "Unpublished Work",
                    ],
                },
                target: {
                    type: [
                        "article",
                        "article-journal",
                        "article-magazine",
                        "article-newspaper",
                        "bill",
                        "book",
                        "broadcast",
                        "chapter",
                        "classic",
                        "dataset",
                        "document",
                        "entry",
                        "entry-dictionary",
                        "entry-encyclopedia",
                        "figure",
                        "graphic",
                        "hearing",
                        "legislation",
                        "manuscript",
                        "map",
                        "motion_picture",
                        "musical_score",
                        "pamphlet",
                        "paper-conference",
                        "patent",
                        "periodical",
                        "personal_communication",
                        "regulation",
                        "report",
                        "software",
                        "song",
                        "standard",
                        "thesis",
                    ],
                },
            },
        },
        {
            source: "]",
            target: "number",
            when: {
                source: {0: ["Journal Article"]},
                target: {type: ["article-journal"]},
            },
        },
        {
            source: "]",
            target: "PMCID",
            when: {
                source: {0: ["Electronic Book", "Electronic Chapter"]},
                target: !1,
            },
        },
    ],
    bo = new po.util.Translator(yo)

function wo(e) {
    return (
        "0" in e &&
        (e[0] = e[0].replace(
            /(^| )(.)/g,
            (e, t, a) => t + a.toUpperCase(),
        )),
            {
                scheme: "enw",
                fields: e,
            }
    )
}

const vo = {
        "@enw/file": {
            parse: (e) =>
                (function (e) {
                    const t = e
                            .trim()
                            .replace(/\r?\n/g, "\n")
                            .replace(/^\$]/m, "%]")
                            .replace(/^(%[([]) ?/m, "$1 ")
                            .replace(/\n(?![%\n])/, " ")
                            .split("\n"),
                        a = []
                    let n
                    for (const e of t) {
                        if (!e.length) continue
                        const t = e.slice(1, 2)
                        "0" === t && (n && a.push(wo(n)), (n = {}))
                        const i = e.slice(3)
                        Array.isArray(n[t])
                            ? n[t].push(i)
                            : (n[t] = t in n ? [n[t], i] : i)
                    }
                    return a.concat(wo(n))
                })(e),
            parseType: {dataType: "String", predicate: /^%0/m},
        },
        "@enw/record": {
            parse: (e) => bo.convertToTarget(e.fields),
            parseType: {
                dataType: "SimpleObject",
                propertyConstraint: {
                    props: "scheme",
                    value: (e) => "enw" === e,
                },
            },
        },
    },
    xo = {
        enw(e, t = {}) {
            const {format: a = "text", lineEnding: n = "\n"} = t,
                i = e.map((e) => ({
                    scheme: "enw",
                    fields: bo.convertToSource(e),
                }))
            return "object" === a
                ? i
                : i
                    .map((e) =>
                        (function ({fields: e}, t) {
                            let a = ""
                            for (const n in e) {
                                const i = [].concat(e[n])
                                for (const e of i) a += "%" + n + " " + e + t
                            }
                            return a
                        })(e, n),
                    )
                    .join(n)
        },
    }
mo.plugins.add("@enw", {input: vo, output: xo})
const ko = mo,
    Ao = /^\d{4}-\d{3}[0-9Xx]$/,
    So = /10(?:\.[0-9]{4,})?\/[^\s]*[^\s.,]/,
    To = {
        "paper-conference": "CONF",
        "journal-article": "JOUR",
        "article-journal": "JOUR",
        "article-magazine": "JOUR",
        "article-newspaper": "JOUR",
        "book-chapter": "CHAP",
        book: "BOOK",
        thesis: "THES",
        report: "RPRT",
        patent: "PAT",
        other: "COMP",
    },
    americanChemicalSociety =
        '<?xml version="1.0" encoding="utf-8"?>\n<style xmlns="http://purl.org/net/xbiblio/csl" class="in-text" version="1.0" demote-non-dropping-particle="sort-only" page-range-format="expanded" default-locale="en-US">\n  <info>\n    <title>American Chemical Society</title>\n    <title-short>ACS</title-short>\n    <id>http://www.zotero.org/styles/american-chemical-society</id>\n    <link href="http://www.zotero.org/styles/american-chemical-society" rel="self"/>\n    <link href="https://pubs.acs.org/doi/full/10.1021/acsguide.40303" rel="documentation"/>\n    <link href="https://pubs.acs.org/doi/book/10.1021/acsguide" rel="documentation"/>\n    <author>\n      <name>Julian Onions</name>\n      <email>julian.onions@gmail.com</email>\n    </author>\n    <contributor>\n      <name>Ivan Bushmarinov</name>\n      <email>ib@ineos.ac.ru</email>\n    </contributor>\n    <contributor>\n      <name>Sebastian Karcher</name>\n    </contributor>\n    <contributor>\n      <name>Patrick O\'Brien</name>\n    </contributor>\n    <category citation-format="numeric"/>\n    <category field="chemistry"/>\n    <summary>The American Chemical Society style</summary>\n    <updated>2022-09-19T18:32:56+00:00</updated>\n    <rights license="http://creativecommons.org/licenses/by-sa/3.0/">This work is licensed under a Creative Commons Attribution-ShareAlike 3.0 License</rights>\n  </info>\n  <locale xml:lang="en">\n    <terms>\n      <term name="editortranslator" form="short">\n        <single>ed. and translator</single>\n        <multiple>eds. and translators</multiple>\n      </term>\n      <term name="translator" form="short">\n        <single>translator</single>\n        <multiple>translators</multiple>\n      </term>\n      <term name="collection-editor" form="short">\n        <single>series ed.</single>\n        <multiple>series eds.</multiple>\n      </term>\n    </terms>\n  </locale>\n  <macro name="editor">\n    <group delimiter="; ">\n      <names variable="editor translator" delimiter="; ">\n        <name sort-separator=", " initialize-with=". " name-as-sort-order="all" delimiter=", " delimiter-precedes-last="always"/>\n        <label form="short" prefix=", " text-case="title"/>\n      </names>\n      <names variable="collection-editor">\n        <name sort-separator=", " initialize-with=". " name-as-sort-order="all" delimiter=", " delimiter-precedes-last="always"/>\n        <label form="short" prefix=", " text-case="title"/>\n      </names>\n    </group>\n  </macro>\n  <macro name="author">\n    <names variable="author" suffix=".">\n      <name sort-separator=", " initialize-with=". " name-as-sort-order="all" delimiter="; " delimiter-precedes-last="always"/>\n      <label form="short" prefix=", " text-case="capitalize-first"/>\n    </names>\n  </macro>\n  <macro name="publisher">\n    <choose>\n      <if type="thesis" match="any">\n        <group delimiter=", ">\n          <text variable="publisher"/>\n          <text variable="publisher-place"/>\n        </group>\n      </if>\n      <else>\n        <group delimiter=": ">\n          <text variable="publisher"/>\n          <text variable="publisher-place"/>\n        </group>\n      </else>\n    </choose>\n  </macro>\n  <macro name="title">\n    <choose>\n      <if type="bill book graphic legal_case legislation motion_picture report song" match="any">\n        <text variable="title" text-case="title" font-style="italic"/>\n      </if>\n      <else>\n        <text variable="title" text-case="title"/>\n      </else>\n    </choose>\n  </macro>\n  <macro name="volume">\n    <group delimiter=" ">\n      <text term="volume" form="short" text-case="capitalize-first"/>\n      <text variable="volume"/>\n    </group>\n  </macro>\n  <macro name="series">\n    <text variable="collection-title"/>\n  </macro>\n  <macro name="pages">\n    <label variable="page" form="short" suffix=" " strip-periods="true"/>\n    <text variable="page"/>\n  </macro>\n  <macro name="book-container">\n    <group delimiter=". ">\n      <text macro="title"/>\n      <choose>\n        <if type="entry-dictionary entry-encyclopedia" match="none">\n          <group delimiter=" ">\n            <text term="in" text-case="capitalize-first"/>\n            <text variable="container-title" font-style="italic"/>\n          </group>\n        </if>\n        <else>\n          <text variable="container-title" font-style="italic"/>\n        </else>\n      </choose>\n    </group>\n  </macro>\n  <macro name="issued">\n    <date variable="issued" delimiter=" ">\n      <date-part name="year"/>\n    </date>\n  </macro>\n  <macro name="full-issued">\n    <date variable="issued" delimiter=" ">\n      <date-part name="month" form="long" suffix=" "/>\n      <date-part name="day" suffix=", "/>\n      <date-part name="year"/>\n    </date>\n  </macro>\n  <macro name="edition">\n    <choose>\n      <if is-numeric="edition">\n        <group delimiter=" ">\n          <number variable="edition" form="ordinal"/>\n          <text term="edition" form="short"/>\n        </group>\n      </if>\n      <else>\n        <text variable="edition" suffix="."/>\n      </else>\n    </choose>\n  </macro>\n  <macro name="access">\n    <choose>\n      <if variable="DOI" match="any">\n        <text variable="DOI" prefix="https://doi.org/"/>\n      </if>\n      <else-if type="article-journal book chapter entry-encyclopedia entry-dictionary paper-conference" match="none">\n        <choose>\n          <if variable="URL">\n            <group delimiter=" ">\n              <text variable="URL"/>\n              <group delimiter=" " prefix="(" suffix=")">\n                <text term="accessed"/>\n                <date variable="accessed">\n                  <date-part name="year"/>\n                  <date-part name="month" prefix="-" form="numeric-leading-zeros"/>\n                  <date-part name="day" prefix="-" form="numeric-leading-zeros"/>\n                </date>\n              </group>\n            </group>\n          </if>\n        </choose>\n      </else-if>\n    </choose>\n  </macro>\n  <citation collapse="citation-number">\n    <sort>\n      <key variable="citation-number"/>\n    </sort>\n    <layout delimiter="," vertical-align="sup">\n      <text variable="citation-number"/>\n    </layout>\n  </citation>\n  <bibliography second-field-align="flush" entry-spacing="0">\n    <layout suffix=".">\n      <text variable="citation-number" prefix="(" suffix=")"/>\n      <text macro="author" suffix=" "/>\n      <choose>\n        <if type="article-journal review" match="any">\n          <group delimiter=" ">\n            <text macro="title" suffix="."/>\n            <text variable="container-title" font-style="italic" form="short"/>\n            <group delimiter=", ">\n              <text macro="issued" font-weight="bold"/>\n              <choose>\n                <if variable="volume">\n                  <group delimiter=" ">\n                    <text variable="volume" font-style="italic"/>\n                    <text variable="issue" prefix="(" suffix=")"/>\n                  </group>\n                </if>\n                <else>\n                  <group delimiter=" ">\n                    <text term="issue" form="short" text-case="capitalize-first"/>\n                    <text variable="issue"/>\n                  </group>\n                </else>\n              </choose>\n              <text variable="page"/>\n            </group>\n          </group>\n        </if>\n        <else-if type="article-magazine article-newspaper article" match="any">\n          <group delimiter=" ">\n            <text macro="title" suffix="."/>\n            <text variable="container-title" font-style="italic" suffix="."/>\n            <text macro="edition"/>\n            <text macro="publisher"/>\n            <group delimiter=", ">\n              <text macro="full-issued"/>\n              <text macro="pages"/>\n            </group>\n          </group>\n        </else-if>\n        <else-if type="thesis">\n          <group delimiter=", ">\n            <group delimiter=". ">\n              <text macro="title"/>\n              <text variable="genre"/>\n            </group>\n            <text macro="publisher"/>\n            <text macro="issued"/>\n            <text macro="volume"/>\n            <text macro="pages"/>\n          </group>\n        </else-if>\n        <else-if type="bill book graphic legal_case legislation motion_picture report song" match="any">\n          <group delimiter="; ">\n            <group delimiter=", ">\n              <text macro="title"/>\n              <text macro="edition"/>\n            </group>\n            <text macro="editor" prefix=" "/>\n            <text macro="series"/>\n            <choose>\n              <if type="report">\n                <group delimiter=" ">\n                  <text variable="genre"/>\n                  <text variable="number"/>\n                </group>\n              </if>\n            </choose>\n            <group delimiter=", ">\n              <text macro="publisher"/>\n              <text macro="issued"/>\n            </group>\n            <group delimiter=", ">\n              <text macro="volume"/>\n              <text macro="pages"/>\n            </group>\n          </group>\n        </else-if>\n        <else-if type="patent">\n          <group delimiter=", ">\n            <group delimiter=". ">\n              <text macro="title"/>\n              <text variable="number"/>\n            </group>\n            <date variable="issued" form="text"/>\n          </group>\n        </else-if>\n        <else-if type="chapter paper-conference entry-dictionary entry-encyclopedia" match="any">\n          <group delimiter="; ">\n            <text macro="book-container"/>\n            <text macro="editor"/>\n            <text macro="series"/>\n            <group delimiter=", ">\n              <text macro="publisher"/>\n              <text macro="issued"/>\n            </group>\n            <group delimiter=", ">\n              <text macro="volume"/>\n              <text macro="pages"/>\n            </group>\n          </group>\n        </else-if>\n        <else-if type="webpage post post-weblog" match="any">\n          <group delimiter=". ">\n            <text variable="title" font-style="italic"/>\n            <text variable="container-title"/>\n          </group>\n        </else-if>\n        <else>\n          <group delimiter=", ">\n            <group delimiter=". ">\n              <text macro="title"/>\n              <text variable="container-title" font-style="italic"/>\n            </group>\n            <group delimiter=", ">\n              <text macro="issued"/>\n              <text variable="volume" font-style="italic"/>\n              <text variable="page"/>\n            </group>\n          </group>\n        </else>\n      </choose>\n      <text macro="access" prefix=". "/>\n    </layout>\n  </bibliography>\n</style>',
    americanMedicalAssociation =
        '<?xml version="1.0" encoding="utf-8"?>\n<style xmlns="http://purl.org/net/xbiblio/csl" class="in-text" version="1.0" demote-non-dropping-particle="sort-only" page-range-format="expanded" initialize-with-hyphen="false" default-locale="en-US">\n  <info>\n    <title>American Medical Association 11th edition</title>\n    <title-short>AMA (11th ed.)</title-short>\n    <id>http://www.zotero.org/styles/american-medical-association</id>\n    <link href="http://www.zotero.org/styles/american-medical-association" rel="self"/>\n    <link href="http://www.zotero.org/styles/american-medical-association-10th-edition" rel="template"/>\n    <link href="https://westlibrary.txwes.edu/sites/default/files/pdf/AMACitationStyle.pdf" rel="documentation"/>\n    <link href="https://www.amamanualofstyle.com/fileasset/AMAMOS/aaaAMWA%20presentation%20Nov%202019%20FULL.pdf" rel="documentation"/>\n    <author>\n      <name>Julian Onions</name>\n      <email>julian.onions@gmail.com</email>\n    </author>\n    <contributor>\n      <name>Christian Pietsch</name>\n      <uri>http://purl.org/net/pietsch</uri>\n    </contributor>\n    <contributor>\n      <name>Daniel W Chan</name>\n      <email>danwchan@protonmail.com</email>\n    </contributor>\n    <contributor>\n      <name>Patrick O\'Brien</name>\n      <email>obrienpat86@gmail.com</email>\n    </contributor>\n    <category citation-format="numeric"/>\n    <category field="medicine"/>\n    <summary>The American Medical Association style as used in JAMA. Version 11 as per November-2019.</summary>\n    <updated>2022-03-17T08:48:24+00:00</updated>\n    <rights license="http://creativecommons.org/licenses/by-sa/3.0/">This work is licensed under a Creative Commons Attribution-ShareAlike 3.0 License</rights>\n  </info>\n  <locale xml:lang="en">\n    <terms>\n      <term name="page-range-delimiter">-</term>\n      <term name="presented at">presented at</term>\n    </terms>\n  </locale>\n  <macro name="editor">\n    <names variable="editor">\n      <name name-as-sort-order="all" sort-separator=" " initialize-with="" delimiter=", " delimiter-precedes-last="always"/>\n      <label form="short" prefix=", "/>\n    </names>\n  </macro>\n  <macro name="author">\n    <group suffix=".">\n      <names variable="author">\n        <name name-as-sort-order="all" sort-separator=" " initialize-with="" delimiter=", " delimiter-precedes-last="always"/>\n        <label form="short" prefix=", "/>\n        <substitute>\n          <names variable="editor"/>\n          <text macro="title"/>\n        </substitute>\n      </names>\n    </group>\n  </macro>\n  <macro name="access">\n    <choose>\n      <if type="article-newspaper" match="none">\n        <choose>\n          <if variable="DOI">\n            <text value="doi:"/>\n            <text variable="DOI"/>\n          </if>\n          <else-if variable="URL">\n            <group delimiter=". ">\n              <choose>\n                <if type="webpage post post-weblog" match="any">\n                  <date variable="issued" prefix="Published " form="text"/>\n                </if>\n              </choose>\n              <group>\n                <text term="accessed" text-case="capitalize-first" suffix=" "/>\n                <date variable="accessed">\n                  <date-part name="month" suffix=" "/>\n                  <date-part name="day" suffix=", "/>\n                  <date-part name="year"/>\n                </date>\n              </group>\n              <text variable="URL"/>\n            </group>\n          </else-if>\n        </choose>\n      </if>\n    </choose>\n  </macro>\n  <macro name="title">\n    <choose>\n      <if type="bill book graphic legal_case legislation motion_picture report song thesis" match="any">\n        <text variable="title" font-style="italic" text-case="title"/>\n      </if>\n      <else>\n        <text variable="title"/>\n      </else>\n    </choose>\n  </macro>\n  <macro name="publisher">\n    <text variable="publisher"/>\n  </macro>\n  <macro name="edition">\n    <choose>\n      <if is-numeric="edition">\n        <group delimiter=" ">\n          <number variable="edition" form="ordinal"/>\n          <text term="edition" form="short"/>\n        </group>\n      </if>\n      <else>\n        <text variable="edition" suffix="."/>\n      </else>\n    </choose>\n  </macro>\n  <citation collapse="citation-number">\n    <sort>\n      <key variable="citation-number"/>\n    </sort>\n    <layout delimiter="," vertical-align="sup">\n      <text variable="citation-number"/>\n      <group prefix="(" suffix=")">\n        <label variable="locator" form="short" strip-periods="true"/>\n        <text variable="locator"/>\n      </group>\n    </layout>\n  </citation>\n  <bibliography hanging-indent="false" et-al-min="7" et-al-use-first="3" second-field-align="flush">\n    <layout>\n      <text variable="citation-number" suffix="."/>\n      <text macro="author"/>\n      <text macro="title" prefix=" " suffix="."/>\n      <choose>\n        <if type="bill book graphic legislation motion_picture report song" match="any">\n          <group suffix="." prefix=" " delimiter=" ">\n            <group delimiter=" ">\n              <text term="volume" form="short" text-case="capitalize-first" strip-periods="true"/>\n              <text variable="volume" suffix="."/>\n            </group>\n            <text macro="edition"/>\n            <text macro="editor" prefix="(" suffix=")"/>\n          </group>\n          <text macro="publisher" prefix=" "/>\n          <group suffix="." prefix="; ">\n            <date variable="issued">\n              <date-part name="year"/>\n            </date>\n            <text variable="page" prefix=":"/>\n          </group>\n        </if>\n        <else-if type="chapter paper-conference entry-dictionary entry-encyclopedia" match="any">\n          <group prefix=" " delimiter=" ">\n            <text term="in" text-case="capitalize-first" suffix=":"/>\n            <text macro="editor"/>\n            <text variable="container-title" font-style="italic" suffix="." text-case="title"/>\n            <group delimiter=" ">\n              <text term="volume" form="short" text-case="capitalize-first" strip-periods="true"/>\n              <text variable="volume" suffix="."/>\n            </group>\n            <text macro="edition"/>\n            <text variable="collection-title" suffix="."/>\n            <group suffix=".">\n              <text macro="publisher"/>\n              <group suffix="." prefix="; ">\n                <date variable="issued">\n                  <date-part name="year"/>\n                </date>\n                <text variable="page" prefix=":"/>\n              </group>\n            </group>\n          </group>\n        </else-if>\n        <else-if type="article-newspaper">\n          <text variable="container-title" font-style="italic" prefix=" " suffix=". "/>\n          <choose>\n            <if variable="URL">\n              <group delimiter=". " suffix=".">\n                <text variable="URL"/>\n                <group prefix="Published ">\n                  <date variable="issued">\n                    <date-part name="month" suffix=" "/>\n                    <date-part name="day" suffix=", "/>\n                    <date-part name="year"/>\n                  </date>\n                </group>\n                <group>\n                  <text term="accessed" text-case="capitalize-first" suffix=" "/>\n                  <date variable="accessed">\n                    <date-part name="month" suffix=" "/>\n                    <date-part name="day" suffix=", "/>\n                    <date-part name="year"/>\n                  </date>\n                </group>\n              </group>\n            </if>\n            <else>\n              <group delimiter=":" suffix=".">\n                <group>\n                  <date variable="issued">\n                    <date-part name="month" suffix=" "/>\n                    <date-part name="day" suffix=", "/>\n                    <date-part name="year"/>\n                  </date>\n                </group>\n                <text variable="page"/>\n              </group>\n            </else>\n          </choose>\n        </else-if>\n        <else-if type="legal_case">\n          <group suffix="," prefix=" " delimiter=" ">\n            <text macro="editor" prefix="(" suffix=")"/>\n          </group>\n          <group prefix=" " delimiter=" ">\n            <text variable="container-title"/>\n            <text variable="volume"/>\n          </group>\n          <text variable="page" prefix=", " suffix=" "/>\n          <group prefix="(" suffix=")." delimiter=" ">\n            <text variable="authority"/>\n            <date variable="issued">\n              <date-part name="year"/>\n            </date>\n          </group>\n        </else-if>\n        <else-if type="webpage post post-weblog" match="any">\n          <text variable="container-title" prefix=" " suffix="."/>\n        </else-if>\n        <else-if type="speech">\n          <group prefix=" " suffix=":">\n            <choose>\n              <if variable="genre">\n                <text variable="genre" suffix=" "/>\n                <text term="presented at"/>\n              </if>\n              <else>\n                <text term="presented at" text-case="capitalize-first"/>\n              </else>\n            </choose>\n          </group>\n          <group delimiter="; " prefix=" " suffix=".">\n            <text variable="event"/>\n            <group>\n              <date delimiter=" " variable="issued">\n                <date-part name="month"/>\n                <date-part name="day" suffix=","/>\n                <date-part name="year"/>\n              </date>\n            </group>\n            <text variable="event-place"/>\n          </group>\n        </else-if>\n        <else-if type="thesis" match="any">\n          <group delimiter=". " prefix=" " suffix=".">\n            <text variable="genre"/>\n            <group delimiter="; ">\n              <text variable="publisher"/>\n              <date date-parts="year" form="text" variable="issued"/>\n            </group>\n          </group>\n        </else-if>\n        <else>\n          <text macro="editor" prefix=" " suffix="."/>\n          <group prefix=" " suffix=".">\n            <text variable="container-title" font-style="italic" form="short" strip-periods="true" suffix="."/>\n            <group delimiter=";" prefix=" ">\n              <choose>\n                <if variable="issue volume" match="any">\n                  <date variable="issued">\n                    <date-part name="year"/>\n                  </date>\n                </if>\n                <else>\n                  <group delimiter=" ">\n                    <text value="Published online"/>\n                    <date form="text" date-parts="year-month-day" variable="issued"/>\n                  </group>\n                </else>\n              </choose>\n              <group>\n                <text variable="volume"/>\n                <text variable="issue" prefix="(" suffix=")"/>\n              </group>\n            </group>\n            <text variable="page" prefix=":"/>\n          </group>\n        </else>\n      </choose>\n      <text prefix=" " macro="access"/>\n    </layout>\n  </bibliography>\n</style>',
    americanPoliticalScienceAssociation =
        '<?xml version="1.0" encoding="utf-8"?>\n<style xmlns="http://purl.org/net/xbiblio/csl" class="in-text" version="1.0" page-range-format="chicago" demote-non-dropping-particle="sort-only">\n  \x3c!-- This style was edited with the Visual CSL Editor (http://steveridout.com/csl/visualEditor/) --\x3e\n  <info>\n    <title>American Political Science Association</title>\n    <title-short>APSA</title-short>\n    <id>http://www.zotero.org/styles/american-political-science-association</id>\n    <link href="http://www.zotero.org/styles/american-political-science-association" rel="self"/>\n    <link href="http://www.apsanet.org/media/PDFs/Publications/APSAStyleManual2006.pdf" rel="documentation"/>\n    <author>\n      <name>Julian Onions</name>\n      <email>julian.onions@gmail.com</email>\n    </author>\n    <contributor>\n      <name>Sebastian Karcher</name>\n    </contributor>\n    <category citation-format="author-date"/>\n    <category field="political_science"/>\n    <summary>The American Political Science Association style. Et al rules based on published APSR articles</summary>\n    <updated>2012-09-14T22:11:27+00:00</updated>\n    <rights license="http://creativecommons.org/licenses/by-sa/3.0/">This work is licensed under a Creative Commons Attribution-ShareAlike 3.0 License</rights>\n  </info>\n  <locale xml:lang="en-US">\n    <date form="text">\n      <date-part name="month" suffix=" "/>\n      <date-part name="day" suffix=", "/>\n      <date-part name="year"/>\n    </date>\n  </locale>\n  <locale xml:lang="nb-NO">\n    <date form="text">\n      <date-part name="day" suffix=" "/>\n      <date-part name="month" suffix=" "/>\n      <date-part name="year"/>\n    </date>\n  </locale>\n  <locale xml:lang="nn-NO">\n    <date form="text">\n      <date-part name="day" suffix=" "/>\n      <date-part name="month" suffix=" "/>\n      <date-part name="year"/>\n    </date>\n  </locale>\n  <macro name="editor">\n    <names variable="editor" delimiter=", ">\n      <label form="short" text-case="lowercase" suffix=" "/>\n      <name and="text" delimiter=", "/>\n    </names>\n  </macro>\n  <macro name="author">\n    <names variable="author">\n      <name name-as-sort-order="first" and="text" sort-separator=", " delimiter=", " delimiter-precedes-last="always"/>\n      <label form="short" prefix=", " text-case="lowercase"/>\n      <substitute>\n        <names variable="editor"/>\n        <text macro="title"/>\n      </substitute>\n    </names>\n  </macro>\n  <macro name="author-short">\n    <names variable="author">\n      <name form="short" and="text" delimiter=", " initialize-with=". " sort-separator=", "/>\n      <substitute>\n        <names variable="editor"/>\n        <names variable="translator"/>\n        <text variable="title" form="short"/>\n      </substitute>\n    </names>\n  </macro>\n  <macro name="access">\n    <choose>\n      <if type="legal_case" match="none">\n        <choose>\n          <if variable="URL">\n            <group delimiter=" ">\n              <text variable="URL"/>\n              <group prefix="(" suffix=")">\n                <date variable="accessed" form="text"/>\n              </group>\n            </group>\n          </if>\n        </choose>\n      </if>\n    </choose>\n  </macro>\n  <macro name="title">\n    <choose>\n      <if type="bill book graphic legal_case legislation motion_picture report song" match="any">\n        <text variable="title" font-style="italic" text-case="title"/>\n      </if>\n      <else>\n        <text variable="title" quotes="true" text-case="title"/>\n      </else>\n    </choose>\n  </macro>\n  <macro name="legal_case">\n    <group prefix=" " delimiter=" ">\n      <text variable="volume"/>\n      <text variable="container-title"/>\n    </group>\n    <text variable="authority" prefix=" (" suffix=")"/>\n  </macro>\n  <macro name="publisher">\n    <choose>\n      <if type="thesis" match="none">\n        <group delimiter=": ">\n          <text variable="publisher-place"/>\n          <text variable="publisher"/>\n        </group>\n        <text variable="genre" prefix=". "/>\n      </if>\n      <else>\n        <group delimiter=". ">\n          <text variable="genre"/>\n          <text variable="publisher"/>\n        </group>\n      </else>\n    </choose>\n  </macro>\n  <macro name="year-date">\n    <choose>\n      <if variable="issued">\n        <date variable="issued">\n          <date-part name="year"/>\n        </date>\n      </if>\n      <else>\n        <text term="no date" form="short"/>\n      </else>\n    </choose>\n  </macro>\n  <macro name="edition">\n    <choose>\n      <if is-numeric="edition">\n        <group delimiter=" ">\n          <number variable="edition" form="ordinal"/>\n          <text term="edition" form="short"/>\n        </group>\n      </if>\n      <else>\n        <text variable="edition" suffix="."/>\n      </else>\n    </choose>\n  </macro>\n  <macro name="locator">\n    <choose>\n      <if locator="page">\n        <text variable="locator"/>\n      </if>\n      <else>\n        <group delimiter=" ">\n          <label variable="locator" form="short"/>\n          <text variable="locator"/>\n        </group>\n      </else>\n    </choose>\n  </macro>\n  <citation et-al-min="4" et-al-use-first="1" disambiguate-add-year-suffix="true" disambiguate-add-names="true" disambiguate-add-givenname="true" givenname-disambiguation-rule="primary-name" collapse="year">\n    <sort>\n      <key macro="author-short"/>\n      <key macro="year-date"/>\n    </sort>\n    <layout prefix="(" suffix=")" delimiter="; ">\n      <group delimiter=", ">\n        <group delimiter=" ">\n          <text macro="author-short"/>\n          <text macro="year-date"/>\n        </group>\n        <text macro="locator"/>\n      </group>\n    </layout>\n  </citation>\n  <bibliography hanging-indent="true" et-al-min="5" et-al-use-first="1" subsequent-author-substitute="&#8212;&#8212;&#8212;">\n    <sort>\n      <key macro="author"/>\n      <key macro="year-date"/>\n      <key variable="title"/>\n    </sort>\n    <layout suffix=".">\n      <text macro="author" suffix="."/>\n      <date variable="issued" prefix=" " suffix=".">\n        <date-part name="year"/>\n      </date>\n      <choose>\n        <if type="bill book graphic legal_case legislation manuscript motion_picture report song thesis" match="any">\n          <text macro="legal_case"/>\n          <group prefix=" " delimiter=" ">\n            <text macro="title" suffix="."/>\n            <text macro="edition"/>\n            <text macro="editor" suffix="."/>\n          </group>\n          <text prefix=" " suffix="." macro="publisher"/>\n        </if>\n        <else-if type="chapter paper-conference" match="any">\n          <text macro="title" prefix=" " suffix="."/>\n          <group prefix=" " delimiter=" ">\n            <text term="in" text-case="capitalize-first"/>\n            <text variable="container-title" font-style="italic" suffix="," text-case="title"/>\n            <text variable="collection-title" suffix=","/>\n            <text macro="editor" suffix="."/>\n            <group suffix=".">\n              <text macro="publisher"/>\n              <text variable="page" prefix=", "/>\n            </group>\n          </group>\n        </else-if>\n        <else>\n          <group prefix=" " delimiter=" " suffix=".">\n            <text macro="title"/>\n            <text macro="editor"/>\n          </group>\n          <choose>\n            <if type="speech">\n              <group prefix=" " delimiter=" " suffix=".">\n                <text term="presented at" text-case="capitalize-first"/>\n                <group delimiter=", ">\n                  <text variable="event"/>\n                  <text variable="event-place"/>\n                </group>\n              </group>\n            </if>\n          </choose>\n          <group prefix=" " suffix=".">\n            <text variable="container-title" font-style="italic"/>\n            <group prefix=" ">\n              <text variable="volume"/>\n              <text variable="issue" prefix="(" suffix=")"/>\n            </group>\n            <text variable="page" prefix=": "/>\n          </group>\n        </else>\n      </choose>\n      <text prefix=" " macro="access" suffix="."/>\n    </layout>\n  </bibliography>\n</style>',
    americanSociologicalAssociation =
        '<?xml version="1.0" encoding="utf-8"?>\n<style xmlns="http://purl.org/net/xbiblio/csl" class="in-text" version="1.0" demote-non-dropping-particle="sort-only" page-range-format="chicago">\n  <info>\n    <title>American Sociological Association 6th edition</title>\n    <title-short>ASA</title-short>\n    <id>http://www.zotero.org/styles/american-sociological-association</id>\n    <link href="http://www.zotero.org/styles/american-sociological-association" rel="self"/>\n    <link href="http://owl.english.purdue.edu/owl/resource/583/03/" rel="documentation"/>\n    <author>\n      <name>Julian Onions</name>\n      <email>julian.onions@gmail.com</email>\n    </author>\n    <contributor>\n      <name>Patrick O\'Brien</name>\n    </contributor>\n    <category citation-format="author-date"/>\n    <category field="sociology"/>\n    <summary>The ASA style following the 6th edition of the Style Guide</summary>\n    <updated>2023-07-16T21:48:56+00:00</updated>\n    <rights license="http://creativecommons.org/licenses/by-sa/3.0/">This work is licensed under a Creative Commons Attribution-ShareAlike 3.0 License</rights>\n  </info>\n  <locale xml:lang="en">\n    <terms>\n      <term name="version">version</term>\n    </terms>\n  </locale>\n  <macro name="editor">\n    <names variable="editor">\n      <label form="verb" suffix=" "/>\n      <name and="text" delimiter=", " initialize-with=". "/>\n    </names>\n  </macro>\n  <macro name="anon">\n    <text term="anonymous" form="short" text-case="capitalize-first" strip-periods="true"/>\n  </macro>\n  <macro name="author">\n    <names variable="author">\n      <name and="text" name-as-sort-order="first" sort-separator=", " delimiter=", " delimiter-precedes-last="always" initialize="false" initialize-with=". "/>\n      <label form="short" prefix=", "/>\n      <substitute>\n        <names variable="editor translator director"/>\n        <choose>\n          <if type="report">\n            <text variable="publisher"/>\n          </if>\n        </choose>\n        <text macro="anon"/>\n      </substitute>\n    </names>\n  </macro>\n  <macro name="author-short">\n    <names variable="author">\n      <name form="short" and="text" delimiter=", " initialize-with=". "/>\n      <substitute>\n        <names variable="editor director translator"/>\n        <choose>\n          <if type="report">\n            <text variable="publisher"/>\n          </if>\n        </choose>\n        <text macro="anon"/>\n      </substitute>\n    </names>\n  </macro>\n  <macro name="access">\n    <group>\n      <choose>\n        <if type="webpage post-weblog post" match="any">\n          <group delimiter=" ">\n            <text term="retrieved" text-case="capitalize-first"/>\n            <date variable="accessed" form="text"/>\n            <text prefix="(" suffix=")" variable="URL"/>\n          </group>\n        </if>\n        <else-if type="article-journal report" match="any">\n          <text variable="DOI" prefix="doi: "/>\n        </else-if>\n      </choose>\n    </group>\n  </macro>\n  <macro name="title">\n    <choose>\n      <if type="thesis">\n        <text variable="title" text-case="title"/>\n      </if>\n      \x3c!-- Software Hack --\x3e\n      <else-if type="book" variable="version" match="all">\n        \x3c!-- Allow lower-case initial letters, e.g., iPhone, ggplot2 --\x3e\n        <text variable="title" font-style="italic"/>\n      </else-if>\n      <else-if type="bill book graphic legal_case legislation motion_picture report song" match="any">\n        <text variable="title" font-style="italic" text-case="title"/>\n      </else-if>\n      <else>\n        <text variable="title" quotes="true" text-case="title"/>\n      </else>\n    </choose>\n  </macro>\n  <macro name="publisher">\n    <choose>\n      <if type="thesis manuscript">\n        <group delimiter=", ">\n          <text variable="publisher"/>\n          <text variable="publisher-place"/>\n          <choose>\n            <if type="manuscript" match="any">\n              <group delimiter=" ">\n                <text variable="genre"/>\n                <text variable="number"/>\n              </group>\n            </if>\n          </choose>\n        </group>\n      </if>\n      <else>\n        <group delimiter=": ">\n          <text variable="publisher-place"/>\n          <text variable="publisher"/>\n        </group>\n      </else>\n    </choose>\n  </macro>\n  <macro name="year-date">\n    <choose>\n      <if variable="issued">\n        <group>\n          <group delimiter=" ">\n            <date variable="original-date" form="numeric" date-parts="year" prefix="[" suffix="]"/>\n            <date variable="issued" form="numeric" date-parts="year"/>\n          </group>\n          <text variable="year-suffix"/>\n        </group>\n      </if>\n      <else-if variable="status">\n        <group>\n          <text variable="status" text-case="lowercase"/>\n          <text variable="year-suffix" prefix="-"/>\n        </group>\n      </else-if>\n      <else>\n        <group>\n          <text term="no date" form="short"/>\n          <text variable="year-suffix" prefix="-"/>\n        </group>\n      </else>\n    </choose>\n  </macro>\n  <macro name="year-sort">\n    <choose>\n      <if variable="issued">\n        <date variable="issued" form="numeric" date-parts="year"/>\n      </if>\n      <else-if variable="status">\n        <group>\n          <text variable="status" text-case="lowercase"/>\n          <text variable="year-suffix" prefix="-"/>\n        </group>\n      </else-if>\n      <else>\n        <text term="no date" form="short"/>\n      </else>\n    </choose>\n  </macro>\n  <macro name="day-month">\n    <date variable="issued">\n      <date-part name="month"/>\n      <date-part name="day" prefix=" "/>\n    </date>\n  </macro>\n  <macro name="pages">\n    <label variable="page" form="short" suffix=" " text-case="capitalize-first"/>\n    <text variable="page"/>\n  </macro>\n  <macro name="edition">\n    <choose>\n      <if is-numeric="edition">\n        <group delimiter=" ">\n          <number variable="edition" form="ordinal"/>\n          <text term="edition" form="short"/>\n        </group>\n      </if>\n      <else>\n        <text variable="edition" suffix="."/>\n      </else>\n    </choose>\n  </macro>\n  <macro name="volume">\n    <group delimiter=" ">\n      <label text-case="capitalize-first" variable="volume" form="short"/>\n      <text variable="volume"/>\n    </group>\n  </macro>\n  <macro name="report">\n    <choose>\n      <if type="report" match="any">\n        <group delimiter=". ">\n          <text variable="genre" font-style="italic"/>\n          <text variable="number"/>\n        </group>\n      </if>\n    </choose>\n  </macro>\n  <citation et-al-min="4" et-al-use-first="1" et-al-subsequent-min="3" et-al-subsequent-use-first="1" disambiguate-add-year-suffix="true" disambiguate-add-names="true" disambiguate-add-givenname="true" collapse="year">\n    <sort>\n      <key macro="author-short"/>\n      <key macro="year-sort"/>\n    </sort>\n    <layout prefix="(" suffix=")" delimiter="; ">\n      <group delimiter=":">\n        <group delimiter=" ">\n          <text macro="author-short"/>\n          <text macro="year-date"/>\n        </group>\n        <text variable="locator"/>\n      </group>\n    </layout>\n  </citation>\n  <bibliography hanging-indent="true">\n    <sort>\n      <key macro="author"/>\n      <key macro="year-sort"/>\n      <key variable="title"/>\n    </sort>\n    <layout suffix=".">\n      <group delimiter=" ">\n        <text macro="author" suffix="."/>\n        <text macro="year-date" suffix="."/>\n      </group>\n      <choose>\n        <if type="article-newspaper article-magazine" match="any">\n          <group delimiter=" ">\n            <text macro="title" prefix=" " suffix="."/>\n          </group>\n          <group prefix=" " delimiter=", ">\n            <text variable="container-title" font-style="italic" text-case="title"/>\n            <text macro="day-month"/>\n            <text variable="edition"/>\n            <text variable="page"/>\n          </group>\n        </if>\n        <else-if type="manuscript">\n          <group delimiter=". ">\n            <text macro="title" quotes="true" prefix=" "/>\n            <group prefix=" " delimiter=", ">\n              <text macro="edition"/>\n              <text macro="editor" suffix="."/>\n              <text macro="publisher"/>\n            </group>\n            <text variable="genre"/>\n          </group>\n        </else-if>\n        <else-if type="thesis">\n          <text macro="title" prefix=" " suffix="." quotes="true"/>\n          <group prefix=" " delimiter=", ">\n            <text macro="edition"/>\n            <text macro="editor" suffix="."/>\n            <text variable="genre"/>\n            <text macro="publisher"/>\n          </group>\n        </else-if>\n        \x3c!--Software hack--\x3e\n        <else-if type="book" variable="version" match="all">\n          <group prefix=" " delimiter=". ">\n            <group>\n              \x3c!-- To Do: localize once we have a proper term --\x3e\n              <text macro="title" suffix=" [computer program]"/>\n            </group>\n            <group delimiter=" ">\n              <text term="version" text-case="capitalize-first"/>\n              <text variable="version"/>\n            </group>\n            <text variable="URL"/>\n          </group>\n        </else-if>\n        <else-if type="bill book graphic legal_case legislation motion_picture report song" match="any">\n          <group delimiter=". ">\n            <text macro="title" prefix=" "/>\n            <text macro="volume"/>\n            <text macro="edition"/>\n            <text macro="editor" suffix="."/>\n            <text macro="report"/>\n            <text macro="publisher"/>\n          </group>\n        </else-if>\n        <else-if type="chapter paper-conference" match="any">\n          <group delimiter=" ">\n            <text macro="title" prefix=" " suffix="."/>\n            <group delimiter=", " suffix=".">\n              <group delimiter=" ">\n                <text macro="pages"/>\n                <text term="in" text-case="lowercase"/>\n                <group delimiter=". ">\n                  <text variable="container-title" font-style="italic"/>\n                  <text macro="volume"/>\n                </group>\n              </group>\n              <text variable="collection-title" font-style="italic"/>\n              <text macro="editor"/>\n            </group>\n            <text macro="publisher"/>\n          </group>\n        </else-if>\n        <else-if type="speech" match="any">\n          <group delimiter=", ">\n            <group delimiter=". ">\n              <text macro="title"/>\n              <group delimiter=" ">\n                <text term="presented at" text-case="capitalize-first"/>\n                <text variable="event"/>\n              </group>\n            </group>\n            <text macro="day-month"/>\n            <text variable="event-place"/>\n          </group>\n        </else-if>\n        <else>\n          <group suffix=".">\n            <text macro="title" prefix=" "/>\n            <text macro="editor" prefix=" "/>\n          </group>\n          <group prefix=" " suffix="." delimiter=" ">\n            <text variable="container-title" font-style="italic" text-case="title"/>\n            <group delimiter=":">\n              <group>\n                <text variable="volume"/>\n                <text variable="issue" prefix="(" suffix=")"/>\n              </group>\n              <text variable="page"/>\n            </group>\n          </group>\n        </else>\n      </choose>\n      <text prefix=". " macro="access"/>\n    </layout>\n  </bibliography>\n</style>',
    apaAnnotatedBibliography =
        '<?xml version="1.0" encoding="utf-8"?>\n<style xmlns="http://purl.org/net/xbiblio/csl" class="in-text" version="1.0" demote-non-dropping-particle="never" page-range-format="expanded">\n  <info>\n    <title>American Psychological Association 7th edition (annotated bibliography)</title>\n    <title-short>APA (annotated bibliography)</title-short>\n    <id>http://www.zotero.org/styles/apa-annotated-bibliography</id>\n    <link href="http://www.zotero.org/styles/apa-annotated-bibliography" rel="self"/>\n    <link href="http://www.zotero.org/styles/apa" rel="template"/>\n    <link href="https://apastyle.apa.org/style-grammar-guidelines/references/examples" rel="documentation"/>\n    <author>\n      <name>Brenton M. Wiernik</name>\n      <email>zotero@wiernik.org</email>\n    </author>\n    <category citation-format="author-date"/>\n    <category field="psychology"/>\n    <category field="generic-base"/>\n    <updated>2022-01-31T14:30:00+00:00</updated>\n    <rights license="http://creativecommons.org/licenses/by-sa/3.0/">This work is licensed under a Creative Commons Attribution-ShareAlike 3.0 License</rights>\n  </info>\n  <locale xml:lang="en">\n    <terms>\n      <term name="editortranslator" form="short">\n        <single>ed. &amp; trans.</single>\n        <multiple>eds. &amp; trans.</multiple>\n      </term>\n      <term name="translator" form="short">trans.</term>\n      <term name="interviewer" form="short">\n        <single>interviewer</single>\n        <multiple>interviewers</multiple>\n      </term>\n      <term name="collection-editor" form="short">\n        <single>ed.</single>\n        <multiple>eds.</multiple>\n      </term>\n      <term name="circa" form="short">ca.</term>\n      <term name="bc"> B.C.E.</term>\n      <term name="ad"> C.E.</term>\n      <term name="issue" form="long">\n        <single>issue</single>\n        <multiple>issues</multiple>\n      </term>\n      <term name="software">computer software</term>\n    </terms>\n  </locale>\n  <locale xml:lang="da">\n    <terms>\n      <term name="et-al">et al.</term>\n    </terms>\n  </locale>\n  <locale xml:lang="de">\n    <terms>\n      <term name="et-al">et al.</term>\n    </terms>\n  </locale>\n  <locale xml:lang="es">\n    <terms>\n      <term name="from">de</term>\n    </terms>\n  </locale>\n  <locale xml:lang="fr">\n    <terms>\n      <term name="editor" form="short">\n        <single>éd.</single>\n        <multiple>éds.</multiple>\n      </term>\n    </terms>\n  </locale>\n  <locale xml:lang="nb">\n    <terms>\n      <term name="et-al">et al.</term>\n    </terms>\n  </locale>\n  <locale xml:lang="nl">\n    <terms>\n      <term name="et-al">et al.</term>\n    </terms>\n  </locale>\n  <locale xml:lang="nn">\n    <terms>\n      <term name="et-al">et al.</term>\n    </terms>\n  </locale>\n  \x3c!-- General categories of item types:\n       Periodical: article-journal article-magazine article-newspaper post-weblog review review-book\n       Periodical or Booklike: paper-conference\n       Booklike: article book broadcast chapter classic collection dataset document\n                 entry entry-dictionary entry-encyclopedia event figure\n                 graphic interview manuscript map motion_picture musical_score pamphlet patent\n                 performance periodical personal_communication post report\n                 software song speech standard thesis webpage\n       Legal: bill hearing legal_case legislation regulation treaty\n  --\x3e\n  \x3c!-- APA references contain four parts: author, date, title, source --\x3e\n  <macro name="author-bib">\n    <names variable="composer" delimiter=", ">\n      <name name-as-sort-order="all" and="symbol" sort-separator=", " initialize-with=". " delimiter=", " delimiter-precedes-last="always"/>\n      <substitute>\n        <names variable="author"/>\n        <names variable="illustrator"/>\n        <names variable="director">\n          <name name-as-sort-order="all" and="symbol" sort-separator=", " initialize-with=". " delimiter=", " delimiter-precedes-last="always"/>\n          <label form="long" prefix=" (" suffix=")" text-case="title"/>\n        </names>\n        <choose>\n          <if variable="container-title">\n            <choose>\n              <if type="book entry entry-dictionary entry-encyclopedia" match="any">\n                <choose>\n                  <if variable="title">\n                    <group delimiter=" ">\n                      <text macro="title"/>\n                      <text macro="parenthetical"/>\n                    </group>\n                  </if>\n                  <else>\n                    <text macro="title-and-descriptions"/>\n                  </else>\n                </choose>\n              </if>\n            </choose>\n          </if>\n        </choose>\n        \x3c!-- Test for editortranslator and put that first as that becomes available --\x3e\n        <names variable="editor" delimiter=", ">\n          <name name-as-sort-order="all" and="symbol" sort-separator=", " initialize-with=". " delimiter=", " delimiter-precedes-last="always"/>\n          <label form="short" prefix=" (" suffix=")" text-case="title"/>\n        </names>\n        <names variable="editorial-director">\n          <name name-as-sort-order="all" and="symbol" sort-separator=", " initialize-with=". " delimiter=", " delimiter-precedes-last="always"/>\n          <label form="short" prefix=" (" suffix=")" text-case="title"/>\n        </names>\n        <names variable="collection-editor">\n          <name name-as-sort-order="all" and="symbol" sort-separator=", " initialize-with=". " delimiter=", " delimiter-precedes-last="always"/>\n          <label form="short" prefix=" (" suffix=")" text-case="title"/>\n        </names>\n        <choose>\n          <if variable="title">\n            <group delimiter=" ">\n              <text macro="title"/>\n              <text macro="parenthetical"/>\n            </group>\n          </if>\n          <else>\n            <text macro="title-and-descriptions"/>\n          </else>\n        </choose>\n      </substitute>\n    </names>\n  </macro>\n  <macro name="author-intext">\n    <choose>\n      <if type="bill legal_case legislation treaty" match="any">\n        <text macro="title-intext"/>\n      </if>\n      <else-if type="interview personal_communication" match="any">\n        <choose>\n          \x3c!-- These variables indicate that the letter is retrievable by the reader.\n                If not, then use the APA in-text-only personal communication format --\x3e\n          <if variable="archive container-title DOI publisher URL" match="none">\n            <group delimiter=", ">\n              <names variable="author">\n                <name and="symbol" delimiter=", " initialize-with=". "/>\n                <substitute>\n                  <text macro="title-intext"/>\n                </substitute>\n              </names>\n              <text term="personal-communication"/>\n            </group>\n          </if>\n          <else>\n            <names variable="author" delimiter=", ">\n              <name form="short" and="symbol" delimiter=", " initialize-with=". "/>\n              <substitute>\n                <text macro="title-intext"/>\n              </substitute>\n            </names>\n          </else>\n        </choose>\n      </else-if>\n      <else>\n        <names variable="composer" delimiter=", ">\n          <name form="short" and="symbol" delimiter=", " initialize-with=". "/>\n          <substitute>\n            <names variable="author"/>\n            <names variable="illustrator"/>\n            <names variable="director"/>\n            <choose>\n              <if variable="container-title">\n                <choose>\n                  <if type="book entry entry-dictionary entry-encyclopedia" match="any">\n                    <text macro="title-intext"/>\n                  </if>\n                </choose>\n              </if>\n            </choose>\n            <names variable="editor"/>\n            <names variable="editorial-director"/>\n            <text macro="title-intext"/>\n          </substitute>\n        </names>\n      </else>\n    </choose>\n  </macro>\n  <macro name="date-bib">\n    <group delimiter=" " prefix="(" suffix=")">\n      <choose>\n        <if is-uncertain-date="issued">\n          <text term="circa" form="short"/>\n        </if>\n      </choose>\n      <group>\n        <choose>\n          <if variable="issued">\n            <date variable="issued">\n              <date-part name="year"/>\n            </date>\n            <text variable="year-suffix"/>\n            <choose>\n              <if type="article-magazine article-newspaper broadcast interview motion_picture pamphlet personal_communication post post-weblog song speech webpage" match="any">\n                \x3c!-- Many video and audio examples in manual give full dates. Err on the side of too much information. --\x3e\n                <date variable="issued">\n                  <date-part prefix=", " name="month"/>\n                  <date-part prefix=" " name="day"/>\n                </date>\n              </if>\n              <else-if type="paper-conference">\n                \x3c!-- Capture \'speech\' stored as \'paper-conference\' --\x3e\n                <choose>\n                  <if variable="collection-editor editor editorial-director issue page volume" match="none">\n                    <date variable="issued">\n                      <date-part prefix=", " name="month"/>\n                      <date-part prefix=" " name="day"/>\n                    </date>\n                  </if>\n                </choose>\n              </else-if>\n              \x3c!-- Only year: article article-journal book chapter entry entry-dictionary entry-encyclopedia dataset figure graphic\n                   manuscript map musical_score paper-conference[published] patent report review review-book thesis --\x3e\n            </choose>\n          </if>\n          <else-if variable="status">\n            <group>\n              <text variable="status" text-case="lowercase"/>\n              <text variable="year-suffix" prefix="-"/>\n            </group>\n          </else-if>\n          <else>\n            <text term="no date" form="short"/>\n            <text variable="year-suffix" prefix="-"/>\n          </else>\n        </choose>\n      </group>\n    </group>\n  </macro>\n  <macro name="date-sort-group">\n    <choose>\n      <if variable="issued">\n        <text value="1"/>\n      </if>\n      <else-if variable="status">\n        <text value="2"/>\n      </else-if>\n      <else>\n        <text value="0"/>\n      </else>\n    </choose>\n  </macro>\n  <macro name="date-intext">\n    <choose>\n      <if variable="issued">\n        <group delimiter="/">\n          <group delimiter=" ">\n            <choose>\n              <if is-uncertain-date="original-date">\n                <text term="circa" form="short"/>\n              </if>\n            </choose>\n            <date variable="original-date">\n              <date-part name="year"/>\n            </date>\n          </group>\n          <group delimiter=" ">\n            <choose>\n              <if is-uncertain-date="issued">\n                <text term="circa" form="short"/>\n              </if>\n            </choose>\n            <group>\n              <choose>\n                <if type="interview personal_communication" match="any">\n                  <choose>\n                    <if variable="archive container-title DOI publisher URL" match="none">\n                      \x3c!-- These variables indicate that the communication is retrievable by the reader.\n                           If not, then use the in-text-only personal communication format --\x3e\n                      <date variable="issued" form="text"/>\n                    </if>\n                    <else>\n                      <date variable="issued">\n                        <date-part name="year"/>\n                      </date>\n                    </else>\n                  </choose>\n                </if>\n                <else>\n                  <date variable="issued">\n                    <date-part name="year"/>\n                  </date>\n                </else>\n              </choose>\n              <text variable="year-suffix"/>\n            </group>\n          </group>\n        </group>\n      </if>\n      <else-if variable="status">\n        <text variable="status" text-case="lowercase"/>\n        <text variable="year-suffix" prefix="-"/>\n      </else-if>\n      <else>\n        <text term="no date" form="short"/>\n        <text variable="year-suffix" prefix="-"/>\n      </else>\n    </choose>\n  </macro>\n  \x3c!-- APA has two description elements following the title:\n       title (parenthetical) [bracketed]  --\x3e\n  <macro name="title-and-descriptions">\n    <choose>\n      <if variable="title">\n        <group delimiter=" ">\n          <text macro="title"/>\n          <text macro="parenthetical"/>\n          <text macro="bracketed"/>\n        </group>\n      </if>\n      <else>\n        <group delimiter=" ">\n          <text macro="bracketed"/>\n          <text macro="parenthetical"/>\n        </group>\n      </else>\n    </choose>\n  </macro>\n  <macro name="title">\n    <choose>\n      <if type="post webpage" match="any">\n        \x3c!-- Webpages are always italicized --\x3e\n        <text variable="title" font-style="italic"/>\n      </if>\n      <else-if variable="container-title" match="any">\n        \x3c!-- Other types are italicized based on presence of container-title.\n             Assume that review and review-book are published in periodicals/blogs,\n             not just on a web page (ex. 69) --\x3e\n        <text variable="title"/>\n      </else-if>\n      <else>\n        <choose>\n          <if type="article-journal article-magazine article-newspaper post-weblog review review-book" match="any">\n            <text variable="title" font-style="italic"/>\n          </if>\n          <else-if type="paper-conference">\n            <choose>\n              <if variable="collection-editor editor editorial-director" match="any">\n                <group delimiter=": " font-style="italic">\n                  <text variable="title"/>\n                  \x3c!-- Replace with volume-title as that becomes available --\x3e\n                  <choose>\n                    <if is-numeric="volume" match="none">\n                      <group delimiter=" ">\n                        <label variable="volume" form="short" text-case="capitalize-first"/>\n                        <text variable="volume"/>\n                      </group>\n                    </if>\n                  </choose>\n                </group>\n              </if>\n              <else>\n                <text variable="title" font-style="italic"/>\n              </else>\n            </choose>\n          </else-if>\n          <else>\n            <group delimiter=": " font-style="italic">\n              <text variable="title"/>\n              \x3c!-- Replace with volume-title as that becomes available --\x3e\n              <choose>\n                <if is-numeric="volume" match="none">\n                  <group delimiter=" ">\n                    <label variable="volume" form="short" text-case="capitalize-first"/>\n                    <text variable="volume"/>\n                  </group>\n                </if>\n              </choose>\n            </group>\n          </else>\n        </choose>\n      </else>\n    </choose>\n  </macro>\n  <macro name="title-intext">\n    <choose>\n      <if variable="title" match="none">\n        <text macro="bracketed-intext" prefix="[" suffix="]"/>\n      </if>\n      <else-if type="hearing">\n        \x3c!-- Hearings are italicized --\x3e\n        <text variable="title" form="short" font-style="italic" text-case="title"/>\n      </else-if>\n      <else-if type="bill">\n        \x3c!-- Bills are not italicized and substitute bill number if no title. --\x3e\n        <choose>\n          <if variable="title">\n            <text variable="title" form="short" text-case="title"/>\n          </if>\n          <else>\n            <group delimiter=" ">\n              <text variable="genre"/>\n              <group delimiter=" ">\n                <choose>\n                  <if variable="chapter-number container-title" match="none">\n                    <label variable="number" form="short"/>\n                  </if>\n                </choose>\n                <text variable="number"/>\n              </group>\n            </group>\n          </else>\n        </choose>\n      </else-if>\n      <else-if type="legal_case" match="any">\n        \x3c!-- Cases are italicized --\x3e\n        <text variable="title" font-style="italic"/>\n      </else-if>\n      <else-if type="legislation treaty" match="any">\n        \x3c!-- Legislation and treaties not italicized or quoted --\x3e\n        <text variable="title" form="short" text-case="title"/>\n      </else-if>\n      <else-if type="post webpage" match="any">\n        \x3c!-- Webpages are always italicized --\x3e\n        <text variable="title" form="short" font-style="italic" text-case="title"/>\n      </else-if>\n      <else-if variable="container-title" match="any">\n        \x3c!-- Other types are italicized or quoted based on presence of container-title. As in title macro. --\x3e\n        <text variable="title" form="short" quotes="true" text-case="title"/>\n      </else-if>\n      <else>\n        <text variable="title" form="short" font-style="italic" text-case="title"/>\n      </else>\n    </choose>\n  </macro>\n  <macro name="parenthetical">\n    \x3c!-- (Secondary contributors; Database location; Genre no. 123; Report Series 123, Version, Edition, Volume, Page) --\x3e\n    <group prefix="(" suffix=")">\n      <choose>\n        <if type="patent">\n          \x3c!-- authority: U.S. ; genre: patent ; number: 123,445 --\x3e\n          <group delimiter=" ">\n            <text variable="authority" form="short"/>\n            <choose>\n              <if variable="genre">\n                <text variable="genre" text-case="capitalize-first"/>\n              </if>\n              <else>\n                <text term="patent" text-case="capitalize-first"/>\n              </else>\n            </choose>\n            <group delimiter=" ">\n              <label variable="number" form="short" text-case="capitalize-first"/>\n              <text variable="number"/>\n            </group>\n          </group>\n        </if>\n        <else-if type="post webpage" match="any">\n          \x3c!-- For post webpage, container-title is treated as publisher --\x3e\n          <group delimiter="; ">\n            <text macro="secondary-contributors"/>\n            <text macro="database-location"/>\n            <text macro="number"/>\n            <text macro="locators-booklike"/>\n          </group>\n        </else-if>\n        <else-if variable="container-title">\n          <group delimiter="; ">\n            <text macro="secondary-contributors"/>\n            <choose>\n              <if type="broadcast graphic map motion_picture song" match="any">\n                \x3c!-- For audiovisual media, number information comes after title, not container-title --\x3e\n                <text macro="number"/>\n              </if>\n            </choose>\n          </group>\n        </else-if>\n        <else>\n          <group delimiter="; ">\n            <text macro="secondary-contributors"/>\n            <text macro="database-location"/>\n            <text macro="number"/>\n            <text macro="locators-booklike"/>\n          </group>\n        </else>\n      </choose>\n    </group>\n  </macro>\n  <macro name="parenthetical-container">\n    <choose>\n      <if variable="container-title" match="any">\n        <group prefix="(" suffix=")">\n          <group delimiter="; ">\n            <text macro="database-location"/>\n            <choose>\n              <if type="broadcast graphic map motion_picture song" match="none">\n                \x3c!-- For audiovisual media, number information comes after title, not container-title --\x3e\n                <text macro="number"/>\n              </if>\n            </choose>\n            <text macro="locators-booklike"/>\n          </group>\n        </group>\n      </if>\n    </choose>\n  </macro>\n  <macro name="bracketed">\n    \x3c!-- [Descriptive information] --\x3e\n    \x3c!-- If there is a number, genre is already printed in macro="number" --\x3e\n    <group prefix="[" suffix="]">\n      <choose>\n        <if variable="reviewed-author reviewed-title" type="review review-book" match="any">\n          \x3c!-- Reviewed item --\x3e\n          <group delimiter="; ">\n            <group delimiter=", ">\n              <group delimiter=" ">\n                \x3c!-- Assume that genre is entered as \'Review of the book\' or similar --\x3e\n                <choose>\n                  <if variable="number" match="none">\n                    <choose>\n                      <if variable="genre">\n                        <text variable="genre" text-case="capitalize-first"/>\n                      </if>\n                      <else-if variable="medium">\n                        <text variable="medium" text-case="capitalize-first"/>\n                      </else-if>\n                      <else>\n                        \x3c!-- Replace with term="review" as that becomes available --\x3e\n                        <text value="Review of"/>\n                      </else>\n                    </choose>\n                  </if>\n                  <else>\n                    <choose>\n                      <if variable="medium">\n                        <text variable="medium" text-case="capitalize-first"/>\n                      </if>\n                      <else>\n                        \x3c!-- Replace with term="review" as that becomes available --\x3e\n                        <text value="Review of"/>\n                      </else>\n                    </choose>\n                  </else>\n                </choose>\n                <text macro="reviewed-title"/>\n              </group>\n              <names variable="reviewed-author">\n                <label form="verb-short" suffix=" "/>\n                <name and="symbol" initialize-with=". " delimiter=", "/>\n              </names>\n            </group>\n            <choose>\n              <if variable="genre" match="any">\n                <choose>\n                  <if variable="number" match="none">\n                    <text variable="medium" text-case="capitalize-first"/>\n                  </if>\n                </choose>\n              </if>\n            </choose>\n          </group>\n        </if>\n        <else-if type="thesis">\n          \x3c!-- Thesis type and institution --\x3e\n          <group delimiter="; ">\n            <choose>\n              <if variable="number" match="none">\n                <group delimiter=", ">\n                  <text variable="genre" text-case="capitalize-first"/>\n                  <choose>\n                    <if variable="archive DOI URL" match="any">\n                      \x3c!-- Include the university in brackets if thesis is published --\x3e\n                      <text variable="publisher"/>\n                    </if>\n                  </choose>\n                </group>\n              </if>\n            </choose>\n            <text variable="medium" text-case="capitalize-first"/>\n          </group>\n        </else-if>\n        <else-if variable="interviewer" type="interview" match="any">\n          \x3c!-- Interview information --\x3e\n          <choose>\n            <if variable="title">\n              <text macro="format"/>\n            </if>\n            <else-if variable="genre">\n              <group delimiter="; ">\n                <group delimiter=" ">\n                  <text variable="genre" text-case="capitalize-first"/>\n                  <group delimiter=" ">\n                    <text term="author" form="verb"/>\n                    <names variable="interviewer">\n                      <name and="symbol" initialize-with=". " delimiter=", "/>\n                    </names>\n                  </group>\n                </group>\n              </group>\n            </else-if>\n            <else-if variable="interviewer">\n              <group delimiter="; ">\n                <names variable="interviewer">\n                  <label form="verb" suffix=" " text-case="capitalize-first"/>\n                  <name and="symbol" initialize-with=". " delimiter=", "/>\n                </names>\n                <text variable="medium" text-case="capitalize-first"/>\n              </group>\n            </else-if>\n            <else>\n              <text macro="format"/>\n            </else>\n          </choose>\n        </else-if>\n        <else-if type="personal_communication">\n          \x3c!-- Letter information --\x3e\n          <choose>\n            <if variable="recipient">\n              <group delimiter="; ">\n                <group delimiter=" ">\n                  <choose>\n                    <if variable="number" match="none">\n                      <choose>\n                        <if variable="genre">\n                          <text variable="genre" text-case="capitalize-first"/>\n                        </if>\n                        <else-if variable="medium">\n                          <text variable="medium" text-case="capitalize-first"/>\n                        </else-if>\n                        <else>\n                          <text term="letter" text-case="capitalize-first"/>\n                        </else>\n                      </choose>\n                    </if>\n                    <else>\n                      <choose>\n                        <if variable="medium">\n                          <text variable="medium" text-case="capitalize-first"/>\n                        </if>\n                        <else>\n                          <text term="letter" text-case="capitalize-first"/>\n                        </else>\n                      </choose>\n                    </else>\n                  </choose>\n                  <names variable="recipient" delimiter=", ">\n                    <label form="verb" suffix=" "/>\n                    <name and="symbol" delimiter=", "/>\n                  </names>\n                </group>\n                <choose>\n                  <if variable="genre" match="any">\n                    <choose>\n                      <if variable="number" match="none">\n                        <text variable="medium" text-case="capitalize-first"/>\n                      </if>\n                    </choose>\n                  </if>\n                </choose>\n              </group>\n            </if>\n            <else>\n              <text macro="format"/>\n            </else>\n          </choose>\n        </else-if>\n        <else-if variable="composer" type="song" match="all">\n          \x3c!-- Performer of classical music works --\x3e\n          <group delimiter="; ">\n            <choose>\n              <if variable="number" match="none">\n                <group delimiter=" ">\n                  <choose>\n                    <if variable="genre">\n                      <text variable="genre" text-case="capitalize-first"/>\n                      \x3c!-- Replace prefix with performer label as that becomes available --\x3e\n                      <names variable="author" prefix="recorded by ">\n                        <name and="symbol" initialize-with=". " delimiter=", "/>\n                      </names>\n                    </if>\n                    <else-if variable="medium">\n                      <text variable="medium" text-case="capitalize-first"/>\n                      \x3c!-- Replace prefix with performer label as that becomes available --\x3e\n                      <names variable="author" prefix="recorded by ">\n                        <name and="symbol" initialize-with=". " delimiter=", "/>\n                      </names>\n                    </else-if>\n                    <else>\n                      \x3c!-- Replace prefix with performer label as that becomes available --\x3e\n                      <names variable="author" prefix="Recorded by ">\n                        <name and="symbol" initialize-with=". " delimiter=", "/>\n                      </names>\n                    </else>\n                  </choose>\n                </group>\n              </if>\n              <else>\n                <group delimiter=" ">\n                  <choose>\n                    <if variable="medium">\n                      <text variable="medium" text-case="capitalize-first"/>\n                      \x3c!-- Replace prefix with performer label as that becomes available --\x3e\n                      <names variable="author" prefix="recorded by ">\n                        <name and="symbol" initialize-with=". " delimiter=", "/>\n                      </names>\n                    </if>\n                    <else>\n                      \x3c!-- Replace prefix with performer label as that becomes available --\x3e\n                      <names variable="author" prefix="Recorded by ">\n                        <name and="symbol" initialize-with=". " delimiter=", "/>\n                      </names>\n                    </else>\n                  </choose>\n                </group>\n              </else>\n            </choose>\n            <choose>\n              <if variable="genre" match="any">\n                <choose>\n                  <if variable="number" match="none">\n                    <text variable="medium" text-case="capitalize-first"/>\n                  </if>\n                </choose>\n              </if>\n            </choose>\n          </group>\n        </else-if>\n        <else-if variable="container-title" match="none">\n          \x3c!-- Other description --\x3e\n          <text macro="format"/>\n        </else-if>\n        <else>\n          \x3c!-- For conference presentations, chapters in reports, software, place bracketed after the container title --\x3e\n          <choose>\n            <if type="paper-conference speech" match="any">\n              <choose>\n                <if variable="collection-editor editor editorial-director issue page volume" match="any">\n                  <text macro="format"/>\n                </if>\n              </choose>\n            </if>\n            <else-if type="report software" match="none">\n              <text macro="format"/>\n            </else-if>\n          </choose>\n        </else>\n      </choose>\n    </group>\n  </macro>\n  <macro name="bracketed-intext">\n    <group prefix="[" suffix="]">\n      <choose>\n        <if variable="reviewed-author reviewed-title" type="review review-book" match="any">\n          <group delimiter=" ">\n            <text term="review-of" text-case="capitalize-first"/>\n            <text macro="reviewed-title-intext"/>\n          </group>\n        </if>\n        <else-if variable="interviewer" type="interview" match="any">\n          <names variable="interviewer">\n            <label form="verb" suffix=" " text-case="capitalize-first"/>\n            <name and="symbol" initialize-with=". " delimiter=", "/>\n            <substitute>\n              <text macro="format-intext"/>\n            </substitute>\n          </names>\n        </else-if>\n        <else-if type="personal_communication">\n          \x3c!-- Letter information --\x3e\n          <choose>\n            <if variable="recipient">\n              <group delimiter=" ">\n                <choose>\n                  <if variable="number" match="none">\n                    <text variable="genre" text-case="capitalize-first"/>\n                  </if>\n                  <else>\n                    <text term="letter" text-case="capitalize-first"/>\n                  </else>\n                </choose>\n                <names variable="recipient" delimiter=", ">\n                  <label form="verb" suffix=" "/>\n                  <name and="symbol" delimiter=", "/>\n                </names>\n              </group>\n            </if>\n            <else>\n              <text macro="format-intext"/>\n            </else>\n          </choose>\n        </else-if>\n        <else>\n          <text macro="format-intext"/>\n        </else>\n      </choose>\n    </group>\n  </macro>\n  <macro name="bracketed-container">\n    <group prefix="[" suffix="]">\n      <choose>\n        <if type="paper-conference speech" match="any">\n          \x3c!-- Conference presentations should describe the session [container] in bracketed unless published in a proceedings --\x3e\n          <choose>\n            <if variable="collection-editor editor editorial-director issue page volume" match="none">\n              <text macro="format"/>\n            </if>\n          </choose>\n        </if>\n        <else-if type="software" match="all">\n          \x3c!-- For entries in mobile app reference works, place bracketed after the container-title --\x3e\n          <text macro="format"/>\n        </else-if>\n        <else-if type="report">\n          \x3c!-- For chapters in reports, place bracketed after the container title --\x3e\n          <text macro="format"/>\n        </else-if>\n      </choose>\n    </group>\n  </macro>\n  <macro name="secondary-contributors">\n    <choose>\n      <if type="article-journal article-magazine article-newspaper post-weblog review review-book" match="any">\n        <text macro="secondary-contributors-periodical"/>\n      </if>\n      <else-if type="paper-conference">\n        <choose>\n          <if variable="collection-editor editor editorial-director" match="any">\n            <text macro="secondary-contributors-booklike"/>\n          </if>\n          <else>\n            <text macro="secondary-contributors-periodical"/>\n          </else>\n        </choose>\n      </else-if>\n      <else>\n        <text macro="secondary-contributors-booklike"/>\n      </else>\n    </choose>\n  </macro>\n  <macro name="secondary-contributors-periodical">\n    <group delimiter="; ">\n      <choose>\n        <if variable="title">\n          <names variable="interviewer" delimiter="; ">\n            <name and="symbol" initialize-with=". " delimiter=", "/>\n            <label form="short" prefix=", " text-case="title"/>\n          </names>\n        </if>\n      </choose>\n      <names variable="translator" delimiter="; ">\n        <name and="symbol" initialize-with=". " delimiter=", "/>\n        <label form="short" prefix=", " text-case="title"/>\n      </names>\n    </group>\n  </macro>\n  <macro name="secondary-contributors-booklike">\n    <group delimiter="; ">\n      <choose>\n        <if variable="title">\n          <names variable="interviewer">\n            <name and="symbol" initialize-with=". " delimiter=", "/>\n            <label form="short" prefix=", " text-case="title"/>\n          </names>\n        </if>\n      </choose>\n      \x3c!-- When editortranslator becomes available, add a test: variable="editortranslator" match="none"; then print translator --\x3e\n      <choose>\n        <if type="post webpage" match="none">\n          \x3c!-- Webpages treat container-title like publisher --\x3e\n          <choose>\n            <if variable="container-title" match="none">\n              <group delimiter="; ">\n                <names variable="container-author">\n                  <label form="verb-short" suffix=" " text-case="title"/>\n                  <name and="symbol" initialize-with=". " delimiter=", "/>\n                </names>\n                <names variable="editor translator" delimiter="; ">\n                  <name and="symbol" initialize-with=". " delimiter=", "/>\n                  <label form="short" prefix=", " text-case="title"/>\n                </names>\n              </group>\n            </if>\n          </choose>\n        </if>\n        <else>\n          <group delimiter="; ">\n            <names variable="container-author">\n              <label form="verb-short" suffix=" " text-case="title"/>\n              <name and="symbol" initialize-with=". " delimiter=", "/>\n            </names>\n            <names variable="editor translator" delimiter="; ">\n              <name and="symbol" initialize-with=". " delimiter=", "/>\n              <label form="short" prefix=", " text-case="title"/>\n            </names>\n          </group>\n        </else>\n      </choose>\n    </group>\n  </macro>\n  <macro name="database-location">\n    <choose>\n      <if variable="archive-place" match="none">\n        \x3c!-- With `archive-place`: physical archives. Without: online archives. --\x3e\n        \x3c!-- Add archive_collection as that becomes available --\x3e\n        <text variable="archive_location"/>\n      </if>\n    </choose>\n  </macro>\n  <macro name="number">\n    <choose>\n      <if variable="number">\n        <group delimiter=", ">\n          <group delimiter=" ">\n            <text variable="genre" text-case="title"/>\n            <choose>\n              <if is-numeric="number">\n                <label variable="number" form="short" text-case="capitalize-first"/>\n                <text variable="number"/>\n              </if>\n              <else>\n                <text variable="number"/>\n              </else>\n            </choose>\n          </group>\n          <choose>\n            <if type="thesis">\n              <choose>\n                \x3c!-- Include the university in brackets if thesis is published --\x3e\n                <if variable="archive DOI URL" match="any">\n                  <text variable="publisher"/>\n                </if>\n              </choose>\n            </if>\n          </choose>\n        </group>\n      </if>\n    </choose>\n  </macro>\n  <macro name="locators-booklike">\n    <choose>\n      <if type="article-journal article-magazine article-newspaper broadcast interview patent post post-weblog review review-book speech webpage" match="any"/>\n      <else-if type="paper-conference">\n        <choose>\n          <if variable="collection-editor editor editorial-director" match="any">\n            <group delimiter=", ">\n              <text macro="version"/>\n              <text macro="edition"/>\n              <text macro="volume-booklike"/>\n            </group>\n          </if>\n        </choose>\n      </else-if>\n      <else>\n        <group delimiter=", ">\n          <text macro="version"/>\n          <text macro="edition"/>\n          <text macro="volume-booklike"/>\n        </group>\n      </else>\n    </choose>\n  </macro>\n  <macro name="version">\n    <choose>\n      <if is-numeric="version">\n        <group delimiter=" ">\n          <label variable="version" text-case="capitalize-first"/>\n          <text variable="version"/>\n        </group>\n      </if>\n      <else>\n        <text variable="version"/>\n      </else>\n    </choose>\n  </macro>\n  <macro name="edition">\n    <choose>\n      <if is-numeric="edition">\n        <group delimiter=" ">\n          <number variable="edition" form="ordinal"/>\n          <label variable="edition" form="short"/>\n        </group>\n      </if>\n      <else>\n        <text variable="edition"/>\n      </else>\n    </choose>\n  </macro>\n  <macro name="volume-booklike">\n    <group delimiter=", ">\n      \x3c!-- Report series [ex. 52] --\x3e\n      <choose>\n        <if type="report">\n          <group delimiter=" ">\n            <text variable="collection-title" text-case="title"/>\n            <text variable="collection-number"/>\n          </group>\n        </if>\n      </choose>\n      <choose>\n        <if variable="volume" match="any">\n          <choose>\n            \x3c!-- Non-numeric volumes are already printed as part of the book title --\x3e\n            <if is-numeric="volume" match="none"/>\n            <else>\n              <group delimiter=" ">\n                <label variable="volume" form="short" text-case="capitalize-first"/>\n                <number variable="volume" form="numeric"/>\n              </group>\n            </else>\n          </choose>\n        </if>\n        <else>\n          <group>\n            <label variable="number-of-volumes" form="short" text-case="capitalize-first" suffix=" "/>\n            <text term="page-range-delimiter" prefix="1"/>\n            <number variable="number-of-volumes" form="numeric"/>\n          </group>\n        </else>\n      </choose>\n      <group delimiter=" ">\n        <label variable="issue" text-case="capitalize-first"/>\n        <text variable="issue"/>\n      </group>\n      <group delimiter=" ">\n        <label variable="page" form="short" suffix=" "/>\n        <text variable="page"/>\n      </group>\n    </group>\n  </macro>\n  <macro name="reviewed-title">\n    <choose>\n      <if variable="reviewed-title">\n        \x3c!-- Not possible to distinguish TV series episode from other reviewed\n              works [Ex. 69] --\x3e\n        <text variable="reviewed-title" font-style="italic"/>\n      </if>\n      <else>\n        \x3c!-- Assume title is title of reviewed work --\x3e\n        <text variable="title" font-style="italic"/>\n      </else>\n    </choose>\n  </macro>\n  <macro name="reviewed-title-intext">\n    <choose>\n      <if variable="reviewed-title">\n        \x3c!-- Not possible to distinguish TV series episode from other reviewed works [Ex. 69] --\x3e\n        <text variable="reviewed-title" form="short" font-style="italic" text-case="title"/>\n      </if>\n      <else>\n        \x3c!-- Assume title is title of reviewed work --\x3e\n        <text variable="title" form="short" font-style="italic" text-case="title"/>\n      </else>\n    </choose>\n  </macro>\n  <macro name="format">\n    <choose>\n      <if variable="genre medium" match="any">\n        <group delimiter="; ">\n          <choose>\n            <if variable="number" match="none">\n              <text variable="genre" text-case="capitalize-first"/>\n            </if>\n          </choose>\n          <text variable="medium" text-case="capitalize-first"/>\n        </group>\n      </if>\n      \x3c!-- Generic labels for specific types --\x3e\n      <else-if type="dataset">\n        <text term="dataset"/>\n      </else-if>\n      <else-if type="software">\n        <text term="software" text-case="capitalize-first"/>\n      </else-if>\n      <else-if type="interview personal_communication" match="any">\n        <choose>\n          <if variable="archive container-title DOI publisher URL" match="none">\n            <text term="personal-communication" text-case="capitalize-first"/>\n          </if>\n          <else-if type="interview">\n            <text term="interview" text-case="capitalize-first"/>\n          </else-if>\n        </choose>\n      </else-if>\n      <else-if type="map">\n        <text term="map" text-case="capitalize-first"/>\n      </else-if>\n    </choose>\n  </macro>\n  <macro name="format-intext">\n    <choose>\n      <if variable="genre" match="any">\n        <text variable="genre" text-case="capitalize-first"/>\n      </if>\n      <else-if variable="medium">\n        <text variable="medium" text-case="capitalize-first"/>\n      </else-if>\n      \x3c!-- Generic labels for specific types --\x3e\n      <else-if type="dataset">\n        <text term="dataset"/>\n      </else-if>\n      <else-if type="software">\n        <text term="software" text-case="capitalize-first"/>\n      </else-if>\n      <else-if type="interview personal_communication" match="any">\n        <choose>\n          <if variable="archive container-title DOI publisher URL" match="none">\n            <text term="personal-communication" text-case="capitalize-first"/>\n          </if>\n          <else-if type="interview">\n            <text term="interview" text-case="capitalize-first"/>\n          </else-if>\n        </choose>\n      </else-if>\n      <else-if type="map">\n        <text term="map"/>\n      </else-if>\n    </choose>\n  </macro>\n  \x3c!-- APA \'source\' element contains four parts:\n       container, event, publisher, access --\x3e\n  <macro name="container">\n    <choose>\n      <if type="article-journal article-magazine article-newspaper post-weblog review review-book" match="any">\n        \x3c!-- Periodical items --\x3e\n        <text macro="container-periodical"/>\n      </if>\n      <else-if type="paper-conference">\n        \x3c!-- Determine if paper-conference is a periodical or booklike --\x3e\n        <choose>\n          <if variable="editor editorial-director collection-editor container-author" match="any">\n            <text macro="container-booklike"/>\n          </if>\n          <else>\n            <text macro="container-periodical"/>\n          </else>\n        </choose>\n      </else-if>\n      <else-if type="post webpage" match="none">\n        \x3c!-- post and webpage treat container-title like publisher --\x3e\n        <text macro="container-booklike"/>\n      </else-if>\n    </choose>\n  </macro>\n  <macro name="container-periodical">\n    <group delimiter=". ">\n      <group delimiter=", ">\n        <text variable="container-title" font-style="italic" text-case="title"/>\n        <choose>\n          <if variable="volume">\n            <group>\n              <text variable="volume" font-style="italic"/>\n              <text variable="issue" prefix="(" suffix=")"/>\n            </group>\n          </if>\n          <else>\n            <text variable="issue" font-style="italic"/>\n          </else>\n        </choose>\n        <choose>\n          <if variable="number">\n            \x3c!-- Ex. 6: Journal article with article number or eLocator --\x3e\n            \x3c!-- This should be localized --\x3e\n            <group delimiter=" ">\n              <text term="article-locator" text-case="capitalize-first"/>\n              <text variable="number"/>\n            </group>\n          </if>\n          <else>\n            <text variable="page"/>\n          </else>\n        </choose>\n      </group>\n      <choose>\n        <if variable="issued">\n          <choose>\n            <if variable="issue page volume" match="none">\n              <text variable="status" text-case="capitalize-first"/>\n            </if>\n          </choose>\n        </if>\n      </choose>\n    </group>\n  </macro>\n  <macro name="container-booklike">\n    <choose>\n      <if variable="container-title" match="any">\n        <group delimiter=" ">\n          <text term="in" text-case="capitalize-first"/>\n          <group delimiter=", ">\n            <names variable="editor translator" delimiter=", &amp; ">\n              \x3c!-- Change to editortranslator and move editor to substitute as that becomes available --\x3e\n              <name and="symbol" initialize-with=". " delimiter=", "/>\n              <label form="short" text-case="title" prefix=" (" suffix=")"/>\n              <substitute>\n                <names variable="editorial-director"/>\n                <names variable="collection-editor"/>\n                <names variable="container-author"/>\n              </substitute>\n            </names>\n            <group delimiter=": " font-style="italic">\n              <text variable="container-title"/>\n              \x3c!-- Replace with volume-title as that becomes available --\x3e\n              <choose>\n                <if is-numeric="volume" match="none">\n                  <group delimiter=" ">\n                    <label variable="volume" form="short" text-case="capitalize-first"/>\n                    <text variable="volume"/>\n                  </group>\n                </if>\n              </choose>\n            </group>\n          </group>\n          <text macro="parenthetical-container"/>\n          <text macro="bracketed-container"/>\n        </group>\n      </if>\n    </choose>\n  </macro>\n  <macro name="publisher">\n    <group delimiter="; ">\n      <choose>\n        <if type="thesis">\n          <choose>\n            <if variable="archive DOI URL" match="none">\n              <text variable="publisher"/>\n            </if>\n          </choose>\n        </if>\n        <else-if type="post webpage" match="any">\n          \x3c!-- For websites, treat container title like publisher --\x3e\n          <group delimiter="; ">\n            <text variable="container-title" text-case="title"/>\n            <text variable="publisher"/>\n          </group>\n        </else-if>\n        <else-if type="paper-conference">\n          \x3c!-- For paper-conference, don\'t print publisher if in a journal-like proceedings --\x3e\n          <choose>\n            <if variable="collection-editor editor editorial-director" match="any">\n              <text variable="publisher"/>\n            </if>\n          </choose>\n        </else-if>\n        <else-if type="article-journal article-magazine article-newspaper post-weblog" match="none">\n          <text variable="publisher"/>\n        </else-if>\n      </choose>\n      <group delimiter=", ">\n        <choose>\n          <if variable="archive-place">\n            \x3c!-- With `archive-place`: physical archives. Without: online archives. --\x3e\n            \x3c!-- For physical archives, print the location before the archive name.\n                For electronic archives, these are printed in macro="description". --\x3e\n            \x3c!-- Split "archive_location" into "archive_collection" and "archive_location" as that becomes available --\x3e\n            \x3c!-- Must test for archive_collection:\n                With collection: archive_collection (archive_location), archive, archive-place\n                No collection: archive (archive_location), archive-place\n            --\x3e\n            <text variable="archive_location"/>\n          </if>\n        </choose>\n        <text variable="archive"/>\n        <text variable="archive-place"/>\n      </group>\n    </group>\n  </macro>\n  <macro name="access">\n    <choose>\n      <if variable="DOI" match="any">\n        <text variable="DOI" prefix="https://doi.org/"/>\n      </if>\n      <else-if variable="URL">\n        <group delimiter=" ">\n          <choose>\n            <if variable="issued status" match="none">\n              <group delimiter=" ">\n                <text term="retrieved" text-case="capitalize-first"/>\n                <date variable="accessed" form="text" suffix=","/>\n                <text term="from"/>\n              </group>\n            </if>\n          </choose>\n          <text variable="URL"/>\n        </group>\n      </else-if>\n    </choose>\n  </macro>\n  <macro name="event">\n    <choose>\n      <if variable="event event-title" match="any">\n        \x3c!-- To prevent Zotero from printing event-place due to its double-mapping of all \'place\' to\n             both publisher-place and event-place. Remove this \'choose\' when that is changed. --\x3e\n        <choose>\n          <if variable="collection-editor editor editorial-director issue page volume" match="none">\n            \x3c!-- Don\'t print event info if published in a proceedings --\x3e\n            <group delimiter=", ">\n              <text macro="event-title"/>\n              <text variable="event-place"/>\n            </group>\n          </if>\n        </choose>\n      </if>\n    </choose>\n  </macro>\n  <macro name="event-title">\n    <choose>\n      \x3c!-- TODO: We expect "event-title" to be used,\n           but processors and applications may not be updated yet.\n           This macro ensures that either "event" or "event-title" can be accpeted.\n           Remove if procesor logic and application adoption can handle this. --\x3e\n      <if variable="event-title">\n        <text variable="event-title"/>\n      </if>\n      <else>\n        <text variable="event"/>\n      </else>\n    </choose>\n  </macro>\n  \x3c!-- After \'source\', APA also prints publication history (original publication, reprint info, retraction info) --\x3e\n  <macro name="publication-history">\n    <choose>\n      <if type="patent" match="none">\n        <group prefix="(" suffix=")">\n          <choose>\n            <if variable="references">\n              \x3c!-- This provides the option for more elaborate description\n                   of publication history, such as full "reprinted" references\n                   (examples 11, 43, 44) or retracted references --\x3e\n              <text variable="references"/>\n            </if>\n            <else>\n              <group delimiter=" ">\n                <text term="original-work-published" text-case="capitalize-first"/>\n                <choose>\n                  <if is-uncertain-date="original-date">\n                    <text term="circa" form="short"/>\n                  </if>\n                </choose>\n                <date variable="original-date">\n                  <date-part name="year"/>\n                </date>\n              </group>\n            </else>\n          </choose>\n        </group>\n      </if>\n      <else>\n        <text variable="references" prefix="(" suffix=")"/>\n      </else>\n    </choose>\n  </macro>\n  \x3c!-- Legal citations have their own rules --\x3e\n  <macro name="legal-cites">\n    \x3c!-- TODO: Add new item types --\x3e\n    <choose>\n      <if type="treaty">\n        \x3c!-- APA generally defers to Bluebook for legal citations, but diverges without\n             explanation for treaty items. The Bluebook format that was used in APA 6th\n             ed. is used here. --\x3e\n        <group delimiter=", ">\n          <text variable="title" text-case="title"/>\n          <names variable="author">\n            <name initialize-with="." form="short" delimiter="-"/>\n          </names>\n          <text macro="date-legal"/>\n          <text macro="container-legal"/>\n          <text macro="access"/>\n        </group>\n      </if>\n      <else>\n        \x3c!-- For `bill`: currently designed to handle bills, resolutions, federal reports. --\x3e\n        \x3c!-- For `legislation`: currently designed to handle statutes, codified regulations, executive orders. --\x3e\n        <group delimiter=". ">\n          <group delimiter=", ">\n            <choose>\n              <if type="bill legal_case legislation" match="any">\n                <text variable="title"/>\n              </if>\n              <else-if type="hearing">\n                <text variable="title" font-style="italic"/>\n              </else-if>\n            </choose>\n            <group delimiter=" ">\n              <text macro="container-legal"/>\n              <text macro="date-legal"/>\n              <choose>\n                <if type="hearing">\n                  <names variable="author" prefix="(testimony of " suffix=")">\n                    \x3c!-- TODO: Localize this with the hearing term. --\x3e\n                    <name and="symbol" delimiter=", "/>\n                  </names>\n                </if>\n                <else-if type="bill legislation" match="any">\n                  \x3c!-- `legislation`: For uncodified regulations, assume future code section is in status. --\x3e\n                  <text variable="status" prefix="(" suffix=")"/>\n                </else-if>\n              </choose>\n            </group>\n            <text variable="references"/>\n          </group>\n          <text macro="access"/>\n        </group>\n      </else>\n    </choose>\n  </macro>\n  <macro name="date-legal">\n    <choose>\n      <if type="legal_case">\n        <group prefix="(" suffix=")" delimiter=" ">\n          <text variable="authority"/>\n          <choose>\n            <if variable="container-title" match="any">\n              \x3c!-- Print only year for cases published in reporters--\x3e\n              <date variable="issued" form="numeric" date-parts="year"/>\n            </if>\n            <else>\n              <date variable="issued" form="text"/>\n            </else>\n          </choose>\n        </group>\n      </if>\n      <else-if type="bill legislation hearing" match="any">\n        <group prefix="(" suffix=")" delimiter=" ">\n          <group delimiter=" ">\n            <date variable="original-date">\n              <date-part name="year"/>\n            </date>\n            <text term="and" form="symbol"/>\n          </group>\n          <date variable="issued">\n            <date-part name="year"/>\n          </date>\n        </group>\n      </else-if>\n      <else-if type="treaty">\n        <date variable="issued" form="text"/>\n      </else-if>\n    </choose>\n  </macro>\n  <macro name="container-legal">\n    \x3c!-- Expect legal item container-titles to be stored in short form --\x3e\n    <choose>\n      <if type="legal_case">\n        <group delimiter=" ">\n          <choose>\n            <if variable="container-title">\n              <group delimiter=" ">\n                <text variable="volume"/>\n                <text variable="container-title"/>\n                <group delimiter=" ">\n                  <label variable="section" form="symbol"/>\n                  <text variable="section"/>\n                </group>\n                <choose>\n                  <if variable="page page-first" match="any">\n                    <text variable="page-first"/>\n                  </if>\n                  <else>\n                    <text value="___"/>\n                  </else>\n                </choose>\n              </group>\n            </if>\n            <else>\n              <group delimiter=" ">\n                <choose>\n                  <if is-numeric="number">\n                    <label variable="number" form="short" text-case="capitalize-first"/>\n                  </if>\n                </choose>\n                <text variable="number"/>\n              </group>\n            </else>\n          </choose>\n        </group>\n      </if>\n      <else-if type="bill">\n        <group delimiter=", ">\n          <group delimiter=" ">\n            <text variable="genre"/>\n            <group delimiter=" ">\n              <choose>\n                <if variable="chapter-number container-title" match="none">\n                  <label variable="number" form="short"/>\n                </if>\n              </choose>\n              <text variable="number"/>\n            </group>\n          </group>\n          <text variable="authority"/>\n          <text variable="chapter-number"/>\n          <group delimiter=" ">\n            <text variable="volume"/>\n            <text variable="container-title"/>\n            <text variable="page-first"/>\n          </group>\n        </group>\n      </else-if>\n      <else-if type="legislation">\n        <choose>\n          <if variable="number">\n            \x3c!--There\'s a public law number--\x3e\n            <group delimiter=", ">\n              <text variable="number" prefix="Pub. L. No. "/>\n              <group delimiter=" ">\n                <text variable="volume"/>\n                <text variable="container-title"/>\n                <text variable="page-first"/>\n              </group>\n            </group>\n          </if>\n          <else>\n            <group delimiter=" ">\n              <text variable="volume"/>\n              <text variable="container-title"/>\n              <choose>\n                <if variable="section">\n                  <group delimiter=" ">\n                    <label variable="section" form="symbol"/>\n                    <text variable="section"/>\n                  </group>\n                </if>\n                <else>\n                  <text variable="page-first"/>\n                </else>\n              </choose>\n            </group>\n          </else>\n        </choose>\n      </else-if>\n      <else-if type="treaty">\n        <group delimiter=" ">\n          <number variable="volume"/>\n          <text variable="container-title"/>\n          <choose>\n            <if variable="page page-first" match="any">\n              <text variable="page-first"/>\n            </if>\n            <else>\n              <group delimiter=" ">\n                <label variable="number" form="short" text-case="capitalize-first"/>\n                <text variable="number"/>\n              </group>\n            </else>\n          </choose>\n        </group>\n      </else-if>\n    </choose>\n  </macro>\n  <macro name="citation-locator">\n    <group delimiter=" ">\n      <choose>\n        <if locator="chapter">\n          <label variable="locator" text-case="capitalize-first"/>\n        </if>\n        <else>\n          <label variable="locator" form="short"/>\n        </else>\n      </choose>\n      <text variable="locator"/>\n    </group>\n  </macro>\n  <citation et-al-min="3" et-al-use-first="1" disambiguate-add-year-suffix="true" disambiguate-add-names="true" disambiguate-add-givenname="true" collapse="year" givenname-disambiguation-rule="primary-name-with-initials">\n    <sort>\n      <key macro="author-bib" names-min="3" names-use-first="1"/>\n      <key macro="date-sort-group"/>\n      <key macro="date-bib" sort="ascending"/>\n      <key variable="status"/>\n    </sort>\n    <layout prefix="(" suffix=")" delimiter="; ">\n      <group delimiter=", ">\n        <text macro="author-intext"/>\n        <text macro="date-intext"/>\n        <text macro="citation-locator"/>\n      </group>\n    </layout>\n  </citation>\n  <bibliography hanging-indent="true" et-al-min="21" et-al-use-first="19" et-al-use-last="true" entry-spacing="0" line-spacing="2">\n    <sort>\n      <key macro="author-bib"/>\n      <key macro="date-sort-group"/>\n      <key macro="date-bib" sort="ascending"/>\n      <key variable="status"/>\n      <key macro="title"/>\n    </sort>\n    <layout>\n      <choose>\n        <if type="bill legal_case legislation treaty" match="any">\n          \x3c!-- Legal items have different orders and delimiters --\x3e\n          <choose>\n            <if variable="DOI URL" match="any">\n              <text macro="legal-cites"/>\n            </if>\n            <else>\n              <text macro="legal-cites" suffix="."/>\n            </else>\n          </choose>\n        </if>\n        <else>\n          <group delimiter=" ">\n            <group delimiter=". " suffix=".">\n              <text macro="author-bib"/>\n              <text macro="date-bib"/>\n              <text macro="title-and-descriptions"/>\n              <text macro="container"/>\n              <text macro="event"/>\n              <text macro="publisher"/>\n            </group>\n            <text macro="access"/>\n            <text macro="publication-history"/>\n          </group>\n        </else>\n      </choose>\n      <text variable="note" display="block"/>\n    </layout>\n  </bibliography>\n</style>',
    chicagoAuthorDate =
        '<?xml version="1.0" encoding="utf-8"?>\n<style xmlns="http://purl.org/net/xbiblio/csl" class="in-text" version="1.0" demote-non-dropping-particle="display-and-sort" page-range-format="chicago">\n  <info>\n    <title>Chicago Manual of Style 17th edition (author-date)</title>\n    <id>http://www.zotero.org/styles/chicago-author-date</id>\n    <link href="http://www.zotero.org/styles/chicago-author-date" rel="self"/>\n    <link href="http://www.chicagomanualofstyle.org/tools_citationguide.html" rel="documentation"/>\n    <author>\n      <name>Julian Onions</name>\n      <email>julian.onions@gmail.com</email>\n    </author>\n    <contributor>\n      <name>Sebastian Karcher</name>\n    </contributor>\n    <contributor>\n      <name>Richard Karnesky</name>\n      <email>karnesky+zotero@gmail.com</email>\n      <uri>http://arc.nucapt.northwestern.edu/Richard_Karnesky</uri>\n    </contributor>\n    <contributor>\n      <name>Andrew Dunning</name>\n      <uri>https://orcid.org/0000-0003-0464-5036</uri>\n    </contributor>\n    <contributor>\n      <name>Matthew Roth</name>\n      <email>matthew.g.roth@yale.edu</email>\n      <uri> https://orcid.org/0000-0001-7902-6331</uri>\n    </contributor>\n    <contributor>\n      <name>Brenton M. Wiernik</name>\n    </contributor>\n    <category citation-format="author-date"/>\n    <category field="generic-base"/>\n    <summary>The author-date variant of the Chicago style</summary>\n    <updated>2018-01-24T12:00:00+00:00</updated>\n    <rights license="http://creativecommons.org/licenses/by-sa/3.0/">This work is licensed under a Creative Commons Attribution-ShareAlike 3.0 License</rights>\n  </info>\n  <locale xml:lang="en">\n    <terms>\n      <term name="editor" form="verb-short">ed.</term>\n      <term name="container-author" form="verb">by</term>\n      <term name="translator" form="verb-short">trans.</term>\n      <term name="editortranslator" form="verb">edited and translated by</term>\n      <term name="translator" form="short">trans.</term>\n    </terms>\n  </locale>\n  <locale xml:lang="pt-PT">\n    <terms>\n      <term name="accessed">acedido a</term>\n    </terms>\n  </locale>\n  <locale xml:lang="pt">\n    <terms>\n      <term name="editor" form="verb">editado por</term>\n      <term name="editor" form="verb-short">ed.</term>\n      <term name="container-author" form="verb">por</term>\n      <term name="translator" form="verb-short">traduzido por</term>\n      <term name="translator" form="short">trad.</term>\n      <term name="editortranslator" form="verb">editado e traduzido por</term>\n      <term name="and">e</term>\n      <term name="no date" form="long">s.d</term>\n      <term name="no date" form="short">s.d.</term>\n      <term name="in">em</term>\n      <term name="at">em</term>\n      <term name="by">por</term>\n    </terms>\n  </locale>\n  <macro name="secondary-contributors">\n    <choose>\n      <if type="chapter entry-dictionary entry-encyclopedia paper-conference" match="none">\n        <group delimiter=". ">\n          <names variable="editor translator" delimiter=". ">\n            <label form="verb" text-case="capitalize-first" suffix=" "/>\n            <name and="text" delimiter=", "/>\n          </names>\n          <names variable="director" delimiter=". ">\n            <label form="verb" text-case="capitalize-first" suffix=" "/>\n            <name and="text" delimiter=", "/>\n          </names>\n        </group>\n      </if>\n    </choose>\n  </macro>\n  <macro name="container-contributors">\n    <choose>\n      <if type="chapter entry-dictionary entry-encyclopedia paper-conference" match="any">\n        <group prefix=", " delimiter=", ">\n          <names variable="container-author" delimiter=", ">\n            <label form="verb" suffix=" "/>\n            <name and="text" delimiter=", "/>\n          </names>\n          <names variable="editor translator" delimiter=", ">\n            <label form="verb" suffix=" "/>\n            <name and="text" delimiter=", "/>\n          </names>\n        </group>\n      </if>\n    </choose>\n  </macro>\n  <macro name="editor">\n    <names variable="editor">\n      <name name-as-sort-order="first" and="text" sort-separator=", " delimiter=", " delimiter-precedes-last="always"/>\n      <label form="short" prefix=", "/>\n    </names>\n  </macro>\n  <macro name="translator">\n    <names variable="translator">\n      <name name-as-sort-order="first" and="text" sort-separator=", " delimiter=", " delimiter-precedes-last="always"/>\n      <label form="short" prefix=", "/>\n    </names>\n  </macro>\n  <macro name="recipient">\n    <choose>\n      <if type="personal_communication">\n        <choose>\n          <if variable="genre">\n            <text variable="genre" text-case="capitalize-first"/>\n          </if>\n          <else>\n            <text term="letter" text-case="capitalize-first"/>\n          </else>\n        </choose>\n      </if>\n    </choose>\n    <names variable="recipient" delimiter=", ">\n      <label form="verb" prefix=" " text-case="lowercase" suffix=" "/>\n      <name and="text" delimiter=", "/>\n    </names>\n  </macro>\n  <macro name="substitute-title">\n    <choose>\n      <if type="article-magazine article-newspaper review review-book" match="any">\n        <text macro="container-title"/>\n      </if>\n    </choose>\n  </macro>\n  <macro name="contributors">\n    <group delimiter=". ">\n      <names variable="author">\n        <name and="text" name-as-sort-order="first" sort-separator=", " delimiter=", " delimiter-precedes-last="always"/>\n        <label form="short" prefix=", "/>\n        <substitute>\n          <names variable="editor"/>\n          <names variable="translator"/>\n          <names variable="director"/>\n          <text macro="substitute-title"/>\n          <text macro="title"/>\n        </substitute>\n      </names>\n      <text macro="recipient"/>\n    </group>\n  </macro>\n  <macro name="contributors-short">\n    <names variable="author">\n      <name form="short" and="text" delimiter=", " initialize-with=". "/>\n      <substitute>\n        <names variable="editor"/>\n        <names variable="translator"/>\n        <names variable="director"/>\n        <text macro="substitute-title"/>\n        <text macro="title"/>\n      </substitute>\n    </names>\n  </macro>\n  <macro name="interviewer">\n    <names variable="interviewer" delimiter=", ">\n      <label form="verb" prefix=" " text-case="capitalize-first" suffix=" "/>\n      <name and="text" delimiter=", "/>\n    </names>\n  </macro>\n  <macro name="archive">\n    <group delimiter=". ">\n      <text variable="archive_location" text-case="capitalize-first"/>\n      <text variable="archive"/>\n      <text variable="archive-place"/>\n    </group>\n  </macro>\n  <macro name="access">\n    <group delimiter=". ">\n      <choose>\n        <if type="graphic report" match="any">\n          <text macro="archive"/>\n        </if>\n        <else-if type="article-journal bill book chapter legal_case legislation motion_picture paper-conference" match="none">\n          <text macro="archive"/>\n        </else-if>\n      </choose>\n      <choose>\n        <if type="webpage post-weblog" match="any">\n          <date variable="issued" form="text"/>\n        </if>\n      </choose>\n      <choose>\n        <if variable="issued" match="none">\n          <group delimiter=" ">\n            <text term="accessed" text-case="capitalize-first"/>\n            <date variable="accessed" form="text"/>\n          </group>\n        </if>\n      </choose>\n      <choose>\n        <if type="legal_case" match="none">\n          <choose>\n            <if variable="DOI">\n              <text variable="DOI" prefix="https://doi.org/"/>\n            </if>\n            <else>\n              <text variable="URL"/>\n            </else>\n          </choose>\n        </if>\n      </choose>\n    </group>\n  </macro>\n  <macro name="title">\n    <choose>\n      <if variable="title" match="none">\n        <choose>\n          <if type="personal_communication speech thesis" match="none">\n            <text variable="genre" text-case="capitalize-first"/>\n          </if>\n        </choose>\n      </if>\n      <else-if type="bill book graphic legislation motion_picture song" match="any">\n        <text variable="title" text-case="title" font-style="italic"/>\n        <group prefix=" (" suffix=")" delimiter=" ">\n          <text term="version"/>\n          <text variable="version"/>\n        </group>\n      </else-if>\n      <else-if variable="reviewed-author">\n        <choose>\n          <if variable="reviewed-title">\n            <group delimiter=". ">\n              <text variable="title" text-case="title" quotes="true"/>\n              <group delimiter=", ">\n                <text variable="reviewed-title" text-case="title" font-style="italic" prefix="Review of "/>\n                <names variable="reviewed-author">\n                  <label form="verb-short" text-case="lowercase" suffix=" "/>\n                  <name and="text" delimiter=", "/>\n                </names>\n              </group>\n            </group>\n          </if>\n          <else>\n            <group delimiter=", ">\n              <text variable="title" text-case="title" font-style="italic" prefix="Review of "/>\n              <names variable="reviewed-author">\n                <label form="verb-short" text-case="lowercase" suffix=" "/>\n                <name and="text" delimiter=", "/>\n              </names>\n            </group>\n          </else>\n        </choose>\n      </else-if>\n      <else-if type="legal_case interview patent" match="any">\n        <text variable="title"/>\n      </else-if>\n      <else>\n        <text variable="title" text-case="title" quotes="true"/>\n      </else>\n    </choose>\n  </macro>\n  <macro name="edition">\n    <choose>\n      <if type="bill book graphic legal_case legislation motion_picture report song" match="any">\n        <choose>\n          <if is-numeric="edition">\n            <group delimiter=" " prefix=". ">\n              <number variable="edition" form="ordinal"/>\n              <text term="edition" form="short" strip-periods="true"/>\n            </group>\n          </if>\n          <else>\n            <text variable="edition" text-case="capitalize-first" prefix=". "/>\n          </else>\n        </choose>\n      </if>\n      <else-if type="chapter entry-dictionary entry-encyclopedia paper-conference" match="any">\n        <choose>\n          <if is-numeric="edition">\n            <group delimiter=" " prefix=", ">\n              <number variable="edition" form="ordinal"/>\n              <text term="edition" form="short"/>\n            </group>\n          </if>\n          <else>\n            <text variable="edition" prefix=", "/>\n          </else>\n        </choose>\n      </else-if>\n    </choose>\n  </macro>\n  <macro name="locators">\n    <choose>\n      <if type="article-journal">\n        <choose>\n          <if variable="volume">\n            <text variable="volume" prefix=" "/>\n            <group prefix=" (" suffix=")">\n              <choose>\n                <if variable="issue">\n                  <text variable="issue"/>\n                </if>\n                <else>\n                  <date variable="issued">\n                    <date-part name="month"/>\n                  </date>\n                </else>\n              </choose>\n            </group>\n          </if>\n          <else-if variable="issue">\n            <group delimiter=" " prefix=", ">\n              <text term="issue" form="short"/>\n              <text variable="issue"/>\n              <date variable="issued" prefix="(" suffix=")">\n                <date-part name="month"/>\n              </date>\n            </group>\n          </else-if>\n          <else>\n            <date variable="issued" prefix=", ">\n              <date-part name="month"/>\n            </date>\n          </else>\n        </choose>\n      </if>\n      <else-if type="legal_case">\n        <text variable="volume" prefix=", "/>\n        <text variable="container-title" prefix=" "/>\n        <text variable="page" prefix=" "/>\n      </else-if>\n      <else-if type="bill book graphic legal_case legislation motion_picture report song" match="any">\n        <group prefix=". " delimiter=". ">\n          <group>\n            <text term="volume" form="short" text-case="capitalize-first" suffix=" "/>\n            <number variable="volume" form="numeric"/>\n          </group>\n          <group>\n            <number variable="number-of-volumes" form="numeric"/>\n            <text term="volume" form="short" prefix=" " plural="true"/>\n          </group>\n        </group>\n      </else-if>\n      <else-if type="chapter entry-dictionary entry-encyclopedia paper-conference" match="any">\n        <choose>\n          <if variable="page" match="none">\n            <group prefix=". ">\n              <text term="volume" form="short" text-case="capitalize-first" suffix=" "/>\n              <number variable="volume" form="numeric"/>\n            </group>\n          </if>\n        </choose>\n      </else-if>\n    </choose>\n  </macro>\n  <macro name="locators-chapter">\n    <choose>\n      <if type="chapter entry-dictionary entry-encyclopedia paper-conference" match="any">\n        <choose>\n          <if variable="page">\n            <group prefix=", ">\n              <text variable="volume" suffix=":"/>\n              <text variable="page"/>\n            </group>\n          </if>\n        </choose>\n      </if>\n    </choose>\n  </macro>\n  <macro name="locators-article">\n    <choose>\n      <if type="article-newspaper">\n        <group prefix=", " delimiter=", ">\n          <group delimiter=" ">\n            <text variable="edition"/>\n            <text term="edition"/>\n          </group>\n          <group>\n            <text term="section" form="short" suffix=" "/>\n            <text variable="section"/>\n          </group>\n        </group>\n      </if>\n      <else-if type="article-journal">\n        <choose>\n          <if variable="volume issue" match="any">\n            <text variable="page" prefix=": "/>\n          </if>\n          <else>\n            <text variable="page" prefix=", "/>\n          </else>\n        </choose>\n      </else-if>\n    </choose>\n  </macro>\n  <macro name="point-locators">\n    <choose>\n      <if variable="locator">\n        <choose>\n          <if locator="page" match="none">\n            <choose>\n              <if type="bill book graphic legal_case legislation motion_picture report song" match="any">\n                <choose>\n                  <if variable="volume">\n                    <group>\n                      <text term="volume" form="short" suffix=" "/>\n                      <number variable="volume" form="numeric"/>\n                      <label variable="locator" form="short" prefix=", " suffix=" "/>\n                    </group>\n                  </if>\n                  <else>\n                    <label variable="locator" form="short" suffix=" "/>\n                  </else>\n                </choose>\n              </if>\n              <else>\n                <label variable="locator" form="short" suffix=" "/>\n              </else>\n            </choose>\n          </if>\n          <else-if type="bill book graphic legal_case legislation motion_picture report song" match="any">\n            <number variable="volume" form="numeric" suffix=":"/>\n          </else-if>\n        </choose>\n        <text variable="locator"/>\n      </if>\n    </choose>\n  </macro>\n  <macro name="container-prefix">\n    <text term="in" text-case="capitalize-first"/>\n  </macro>\n  <macro name="container-title">\n    <choose>\n      <if type="chapter entry-dictionary entry-encyclopedia paper-conference" match="any">\n        <text macro="container-prefix" suffix=" "/>\n      </if>\n    </choose>\n    <choose>\n      <if type="webpage">\n        <text variable="container-title" text-case="title"/>\n      </if>\n      <else-if type="legal_case" match="none">\n        <group delimiter=" ">\n          <text variable="container-title" text-case="title" font-style="italic"/>\n          <choose>\n            <if type="post-weblog">\n              <text value="(blog)"/>\n            </if>\n          </choose>\n        </group>\n      </else-if>\n    </choose>\n  </macro>\n  <macro name="publisher">\n    <group delimiter=": ">\n      <text variable="publisher-place"/>\n      <text variable="publisher"/>\n    </group>\n  </macro>\n  <macro name="date">\n    <choose>\n      <if variable="issued">\n        <group delimiter=" ">\n          <date variable="original-date" form="text" date-parts="year" prefix="(" suffix=")"/>\n          <date variable="issued">\n            <date-part name="year"/>\n          </date>\n        </group>\n      </if>\n      <else-if variable="status">\n        <text variable="status" text-case="capitalize-first"/>\n      </else-if>\n      <else>\n        <text term="no date" form="short"/>\n      </else>\n    </choose>\n  </macro>\n  <macro name="date-in-text">\n    <choose>\n      <if variable="issued">\n        <group delimiter=" ">\n          <date variable="original-date" form="text" date-parts="year" prefix="[" suffix="]"/>\n          <date variable="issued">\n            <date-part name="year"/>\n          </date>\n        </group>\n      </if>\n      <else-if variable="status">\n        <text variable="status"/>\n      </else-if>\n      <else>\n        <text term="no date" form="short"/>\n      </else>\n    </choose>\n  </macro>\n  <macro name="day-month">\n    <date variable="issued">\n      <date-part name="month"/>\n      <date-part name="day" prefix=" "/>\n    </date>\n  </macro>\n  <macro name="collection-title">\n    <choose>\n      <if match="none" type="article-journal">\n        <choose>\n          <if match="none" is-numeric="collection-number">\n            <group delimiter=", ">\n              <text variable="collection-title" text-case="title"/>\n              <text variable="collection-number"/>\n            </group>\n          </if>\n          <else>\n            <group delimiter=" ">\n              <text variable="collection-title" text-case="title"/>\n              <text variable="collection-number"/>\n            </group>\n          </else>\n        </choose>\n      </if>\n    </choose>\n  </macro>\n  <macro name="collection-title-journal">\n    <choose>\n      <if type="article-journal">\n        <group delimiter=" ">\n          <text variable="collection-title"/>\n          <text variable="collection-number"/>\n        </group>\n      </if>\n    </choose>\n  </macro>\n  <macro name="event">\n    <group delimiter=" ">\n      <choose>\n        <if variable="genre">\n          <text term="presented at"/>\n        </if>\n        <else>\n          <text term="presented at" text-case="capitalize-first"/>\n        </else>\n      </choose>\n      <text variable="event"/>\n    </group>\n  </macro>\n  <macro name="description">\n    <choose>\n      <if variable="interviewer" type="interview" match="any">\n        <group delimiter=". ">\n          <text macro="interviewer"/>\n          <text variable="medium" text-case="capitalize-first"/>\n        </group>\n      </if>\n      <else-if type="patent">\n        <group delimiter=" " prefix=". ">\n          <text variable="authority"/>\n          <text variable="number"/>\n        </group>\n      </else-if>\n      <else>\n        <text variable="medium" text-case="capitalize-first" prefix=". "/>\n      </else>\n    </choose>\n    <choose>\n      <if variable="title" match="none"/>\n      <else-if type="thesis personal_communication speech" match="any"/>\n      <else>\n        <group delimiter=" " prefix=". ">\n          <text variable="genre" text-case="capitalize-first"/>\n          <choose>\n            <if type="report">\n              <text variable="number"/>\n            </if>\n          </choose>\n        </group>\n      </else>\n    </choose>\n  </macro>\n  <macro name="issue">\n    <choose>\n      <if type="legal_case">\n        <text variable="authority" prefix=". "/>\n      </if>\n      <else-if type="speech">\n        <group prefix=". " delimiter=", ">\n          <group delimiter=" ">\n            <text variable="genre" text-case="capitalize-first"/>\n            <text macro="event"/>\n          </group>\n          <text variable="event-place"/>\n          <text macro="day-month"/>\n        </group>\n      </else-if>\n      <else-if type="article-newspaper article-magazine personal_communication" match="any">\n        <date variable="issued" form="text" prefix=", "/>\n      </else-if>\n      <else-if type="patent">\n        <group delimiter=", " prefix=", ">\n          <group delimiter=" ">\n            \x3c!--Needs Localization--\x3e\n            <text value="filed"/>\n            <date variable="submitted" form="text"/>\n          </group>\n          <group delimiter=" ">\n            <choose>\n              <if variable="issued submitted" match="all">\n                <text term="and"/>\n              </if>\n            </choose>\n            \x3c!--Needs Localization--\x3e\n            <text value="issued"/>\n            <date variable="issued" form="text"/>\n          </group>\n        </group>\n      </else-if>\n      <else-if type="article-journal" match="any"/>\n      <else>\n        <group prefix=". " delimiter=", ">\n          <choose>\n            <if type="thesis">\n              <text variable="genre" text-case="capitalize-first"/>\n            </if>\n          </choose>\n          <text macro="publisher"/>\n        </group>\n      </else>\n    </choose>\n  </macro>\n  <citation et-al-min="4" et-al-use-first="1" disambiguate-add-year-suffix="true" disambiguate-add-names="true" disambiguate-add-givenname="true" givenname-disambiguation-rule="primary-name" collapse="year" after-collapse-delimiter="; ">\n    <layout prefix="(" suffix=")" delimiter="; ">\n      <group delimiter=", ">\n        <choose>\n          <if variable="issued accessed" match="any">\n            <group delimiter=" ">\n              <text macro="contributors-short"/>\n              <text macro="date-in-text"/>\n            </group>\n          </if>\n          \x3c!---comma before forthcoming and n.d.--\x3e\n          <else>\n            <group delimiter=", ">\n              <text macro="contributors-short"/>\n              <text macro="date-in-text"/>\n            </group>\n          </else>\n        </choose>\n        <text macro="point-locators"/>\n      </group>\n    </layout>\n  </citation>\n  <bibliography hanging-indent="true" et-al-min="11" et-al-use-first="7" subsequent-author-substitute="&#8212;&#8212;&#8212;" entry-spacing="0">\n    <sort>\n      <key macro="contributors"/>\n      <key variable="issued"/>\n      <key variable="title"/>\n    </sort>\n    <layout suffix=".">\n      <group delimiter=". ">\n        <text macro="contributors"/>\n        <text macro="date"/>\n        <text macro="title"/>\n      </group>\n      <text macro="description"/>\n      <text macro="secondary-contributors" prefix=". "/>\n      <text macro="container-title" prefix=". "/>\n      <text macro="container-contributors"/>\n      <text macro="edition"/>\n      <text macro="locators-chapter"/>\n      <text macro="collection-title-journal" prefix=", " suffix=", "/>\n      <text macro="locators"/>\n      <text macro="collection-title" prefix=". "/>\n      <text macro="issue"/>\n      <text macro="locators-article"/>\n      <text macro="access" prefix=". "/>\n    </layout>\n  </bibliography>\n</style>',
    chicagoFullnoteBibliography =
        '<?xml version="1.0" encoding="utf-8"?>\n<style xmlns="http://purl.org/net/xbiblio/csl" class="note" version="1.0" demote-non-dropping-particle="display-and-sort" page-range-format="chicago">\n  <info>\n    <title>Chicago Manual of Style 17th edition (full note)</title>\n    <id>http://www.zotero.org/styles/chicago-fullnote-bibliography</id>\n    <link href="http://www.zotero.org/styles/chicago-fullnote-bibliography" rel="self"/>\n    <link href="http://www.chicagomanualofstyle.org/tools_citationguide.html" rel="documentation"/>\n    <author>\n      <name>Julian Onions</name>\n      <email>julian.onions@gmail.com</email>\n    </author>\n    <contributor>\n      <name>Simon Kornblith</name>\n      <email>simon@simonster.com</email>\n    </contributor>\n    <contributor>\n      <name>Elena Razlogova</name>\n      <email>elena.razlogova@gmail.com</email>\n    </contributor>\n    <contributor>\n      <name>Frank Bennett</name>\n      <email>biercenator@gmail.com</email>\n    </contributor>\n    <contributor>\n      <name>Andrew Dunning</name>\n      <uri>https://orcid.org/0000-0003-0464-5036</uri>\n    </contributor>\n    <contributor>\n      <name>Sebastian Karcher</name>\n    </contributor>\n    <contributor>\n      <name>Brenton M. Wiernik</name>\n    </contributor>\n    <category citation-format="note"/>\n    <category field="generic-base"/>\n    <summary>Chicago format with full notes and bibliography</summary>\n    <updated>2022-01-16T19:46:01+00:00</updated>\n    <rights license="http://creativecommons.org/licenses/by-sa/3.0/">This work is licensed under a Creative Commons Attribution-ShareAlike 3.0 License</rights>\n  </info>\n  <locale xml:lang="en">\n    <terms>\n      <term name="editor" form="verb-short">ed.</term>\n      <term name="translator" form="verb-short">trans.</term>\n      <term name="translator" form="short">trans.</term>\n      <term name="editortranslator" form="verb-short">ed. and trans.</term>\n      <term name="editortranslator" form="verb">Edited and translated by</term>\n      <term name="translator" form="short">trans.</term>\n    </terms>\n  </locale>\n  <macro name="editor-translator">\n    <group delimiter=", ">\n      <group delimiter=" ">\n        <choose>\n          <if variable="container-author reviewed-author" match="any">\n            <group>\n              <names variable="container-author reviewed-author">\n                <label form="verb-short" text-case="lowercase" suffix=" "/>\n                <name and="text" delimiter=", "/>\n              </names>\n            </group>\n          </if>\n        </choose>\n      </group>\n      <names variable="editor translator" delimiter=", ">\n        <label form="verb-short" text-case="lowercase" suffix=" "/>\n        <name and="text" delimiter=", "/>\n      </names>\n    </group>\n  </macro>\n  <macro name="secondary-contributors-note">\n    <choose>\n      <if type="chapter entry-dictionary entry-encyclopedia paper-conference" match="none">\n        <text macro="editor-translator"/>\n      </if>\n    </choose>\n  </macro>\n  <macro name="container-contributors-note">\n    <choose>\n      <if type="chapter entry-dictionary entry-encyclopedia paper-conference" match="any">\n        <text macro="editor-translator"/>\n      </if>\n    </choose>\n  </macro>\n  <macro name="secondary-contributors">\n    <choose>\n      <if type="chapter entry-dictionary entry-encyclopedia paper-conference" match="none">\n        <names variable="editor translator" delimiter=". ">\n          <label form="verb" text-case="capitalize-first" suffix=" "/>\n          <name and="text" delimiter=", "/>\n        </names>\n      </if>\n    </choose>\n  </macro>\n  <macro name="container-contributors">\n    <choose>\n      <if type="chapter entry-dictionary entry-encyclopedia paper-conference" match="any">\n        <group delimiter=", ">\n          <choose>\n            <if variable="author">\n              <choose>\n                <if variable="container-author" match="any">\n                  <names variable="container-author">\n                    <label form="verb-short" text-case="lowercase" suffix=" "/>\n                    <name and="text" delimiter=", "/>\n                  </names>\n                </if>\n              </choose>\n              \x3c!--This includes page numers after the container author, e.g. for Introductions --\x3e\n              <choose>\n                <if variable="container-author author" match="all">\n                  <group delimiter=". ">\n                    <text variable="page"/>\n                    <names variable="editor translator" delimiter=", ">\n                      <label form="verb" suffix=" "/>\n                      <name and="text" delimiter=", "/>\n                    </names>\n                  </group>\n                </if>\n                <else>\n                  <names variable="editor translator" delimiter=", ">\n                    <label form="verb" text-case="lowercase" suffix=" "/>\n                    <name and="text" delimiter=", "/>\n                  </names>\n                </else>\n              </choose>\n            </if>\n          </choose>\n        </group>\n      </if>\n    </choose>\n  </macro>\n  <macro name="recipient-note">\n    <names variable="recipient" delimiter=", ">\n      <label form="verb" text-case="lowercase" suffix=" "/>\n      <name and="text" delimiter=", "/>\n    </names>\n  </macro>\n  <macro name="contributors-note">\n    <group delimiter=" ">\n      <names variable="author">\n        <name and="text" sort-separator=", " delimiter=", "/>\n        <label form="short" prefix=", "/>\n        <substitute>\n          <names variable="editor"/>\n          <names variable="translator"/>\n        </substitute>\n      </names>\n      <text macro="recipient-note"/>\n    </group>\n  </macro>\n  <macro name="editor">\n    <names variable="editor">\n      <name name-as-sort-order="first" and="text" sort-separator=", " delimiter=", " delimiter-precedes-last="always"/>\n      <label form="short" prefix=", "/>\n    </names>\n  </macro>\n  <macro name="translator">\n    <names variable="translator">\n      <name name-as-sort-order="first" and="text" sort-separator=", " delimiter=", " delimiter-precedes-last="always"/>\n      <label form="verb-short" prefix=", "/>\n    </names>\n  </macro>\n  <macro name="recipient">\n    <group delimiter=" ">\n      <choose>\n        <if type="personal_communication">\n          <choose>\n            <if variable="genre">\n              <text variable="genre" text-case="capitalize-first"/>\n            </if>\n            <else>\n              <text term="letter" text-case="capitalize-first"/>\n            </else>\n          </choose>\n        </if>\n      </choose>\n      <text macro="recipient-note"/>\n    </group>\n  </macro>\n  <macro name="contributors">\n    <group delimiter=". ">\n      <names variable="author">\n        <name name-as-sort-order="first" and="text" sort-separator=", " delimiter=", " delimiter-precedes-last="always"/>\n        <substitute>\n          <text macro="editor"/>\n          <text macro="translator"/>\n          <choose>\n            <if type="article-magazine article-newspaper" match="any">\n              <text variable="container-title" font-style="italic"/>\n            </if>\n            <else-if type="webpage post-weblog" match="any">\n              <text variable="container-title"/>\n            </else-if>\n          </choose>\n        </substitute>\n      </names>\n      <text macro="recipient"/>\n    </group>\n  </macro>\n  <macro name="recipient-short">\n    <names variable="recipient">\n      <label form="verb" text-case="lowercase" suffix=" "/>\n      <name form="short" and="text" delimiter=", "/>\n    </names>\n  </macro>\n  <macro name="contributors-short">\n    <group delimiter=" ">\n      <names variable="author">\n        <name form="short" and="text" delimiter=", "/>\n        <substitute>\n          <names variable="editor"/>\n          <names variable="translator"/>\n        </substitute>\n      </names>\n      <text macro="recipient-short"/>\n    </group>\n  </macro>\n  <macro name="contributors-sort">\n    <names variable="author">\n      <name name-as-sort-order="all" and="text" sort-separator=", " delimiter=", " delimiter-precedes-last="always"/>\n      <substitute>\n        <names variable="editor"/>\n        <names variable="translator"/>\n        <choose>\n          <if type="article-magazine article-newspaper webpage post-weblog" match="any">\n            <text variable="container-title"/>\n          </if>\n        </choose>\n        <text macro="title"/>\n      </substitute>\n    </names>\n  </macro>\n  <macro name="interviewer-note">\n    <names variable="interviewer" delimiter=", ">\n      <label form="verb" text-case="lowercase" suffix=" "/>\n      <name and="text" delimiter=", "/>\n    </names>\n  </macro>\n  <macro name="interviewer">\n    <names variable="interviewer" delimiter=", ">\n      <label form="verb" text-case="capitalize-first" suffix=" "/>\n      <name and="text" delimiter=", "/>\n    </names>\n  </macro>\n  <macro name="title-note">\n    <choose>\n      <if variable="title" match="none">\n        <text variable="genre"/>\n      </if>\n      <else-if type="book graphic map motion_picture song" match="any">\n        <text variable="title" text-case="title" font-style="italic"/>\n        <group delimiter=" " prefix=", ">\n          <text term="version"/>\n          <text variable="version"/>\n        </group>\n      </else-if>\n      <else-if type="legal_case interview patent" match="any">\n        <text variable="title"/>\n      </else-if>\n      <else-if variable="reviewed-author">\n        <text variable="title" font-style="italic" prefix="review of "/>\n      </else-if>\n      <else>\n        <text variable="title" text-case="title" quotes="true"/>\n      </else>\n    </choose>\n  </macro>\n  <macro name="title">\n    <choose>\n      <if variable="title" match="none">\n        <choose>\n          <if type="personal_communication" match="none">\n            <text variable="genre" text-case="capitalize-first"/>\n          </if>\n        </choose>\n      </if>\n      <else-if type="book graphic motion_picture song" match="any">\n        <text variable="title" text-case="title" font-style="italic"/>\n        <group prefix=" (" suffix=")" delimiter=" ">\n          <text term="version"/>\n          <text variable="version"/>\n        </group>\n      </else-if>\n      <else-if variable="reviewed-author">\n        <group delimiter=", ">\n          <text variable="title" font-style="italic" prefix="Review of "/>\n          <names variable="reviewed-author">\n            <label form="verb-short" text-case="lowercase" suffix=" "/>\n            <name and="text" delimiter=", "/>\n          </names>\n        </group>\n      </else-if>\n      <else-if type="bill legislation legal_case interview patent" match="any">\n        <text variable="title"/>\n      </else-if>\n      <else>\n        <text variable="title" text-case="title" quotes="true"/>\n      </else>\n    </choose>\n  </macro>\n  <macro name="title-short">\n    <choose>\n      <if variable="title" match="none">\n        <choose>\n          <if type="interview">\n            <text term="interview"/>\n          </if>\n          <else-if type="manuscript speech" match="any">\n            <text variable="genre" form="short"/>\n          </else-if>\n        </choose>\n      </if>\n      <else-if type="book graphic motion_picture song" match="any">\n        <text variable="title" text-case="title" form="short" font-style="italic"/>\n      </else-if>\n      <else-if type="legal_case" variable="title-short" match="all">\n        <text variable="title" font-style="italic" form="short"/>\n      </else-if>\n      <else-if type="patent interview" match="any">\n        <text variable="title" form="short"/>\n      </else-if>\n      <else-if type="legal_case bill legislation" match="any">\n        <text variable="title"/>\n      </else-if>\n      <else>\n        <text variable="title" text-case="title" form="short" quotes="true"/>\n      </else>\n    </choose>\n  </macro>\n  <macro name="date-disambiguate">\n    <choose>\n      <if disambiguate="true" type="personal_communication" match="any">\n        <text macro="issued"/>\n      </if>\n    </choose>\n  </macro>\n  <macro name="description-note">\n    <group delimiter=", ">\n      <text macro="interviewer-note"/>\n      <text variable="medium"/>\n      <choose>\n        <if variable="title" match="none"/>\n        <else-if type="manuscript thesis speech" match="any"/>\n        <else-if type="patent">\n          <group delimiter=" ">\n            <text variable="authority"/>\n            <text variable="number"/>\n          </group>\n        </else-if>\n        <else>\n          <text variable="genre"/>\n        </else>\n      </choose>\n      <choose>\n        <if type="map">\n          <text variable="scale"/>\n        </if>\n        <else-if type="graphic">\n          <text variable="dimensions"/>\n        </else-if>\n      </choose>\n    </group>\n  </macro>\n  <macro name="description">\n    <group delimiter=", ">\n      <group delimiter=". ">\n        <text macro="interviewer"/>\n        <text variable="medium" text-case="capitalize-first"/>\n      </group>\n      <choose>\n        <if variable="title" match="none"/>\n        <else-if type="thesis speech" match="any"/>\n        <else-if type="patent">\n          <group delimiter=" ">\n            <text variable="authority"/>\n            <text variable="number"/>\n          </group>\n        </else-if>\n        <else>\n          <text variable="genre" text-case="capitalize-first"/>\n        </else>\n      </choose>\n      <choose>\n        <if type="map">\n          <text variable="scale"/>\n        </if>\n        <else-if type="graphic">\n          <text variable="dimensions"/>\n        </else-if>\n      </choose>\n    </group>\n  </macro>\n  <macro name="container-title-note">\n    <group delimiter=" ">\n      <choose>\n        <if type="chapter entry-dictionary entry-encyclopedia paper-conference" match="any">\n          <text term="in"/>\n        </if>\n      </choose>\n      <choose>\n        <if type="webpage">\n          <text variable="container-title"/>\n        </if>\n        <else-if type="post-weblog">\n          <text variable="container-title" text-case="title" font-style="italic" suffix=" (blog)"/>\n        </else-if>\n        <else-if type="bill legislation legal_case" match="none">\n          <text variable="container-title" text-case="title" font-style="italic"/>\n        </else-if>\n      </choose>\n    </group>\n  </macro>\n  <macro name="container-title">\n    <group delimiter=" ">\n      <choose>\n        <if type="chapter entry-dictionary entry-encyclopedia paper-conference" match="any">\n          <text term="in" text-case="capitalize-first"/>\n        </if>\n      </choose>\n      <choose>\n        <if type="webpage">\n          <text variable="container-title"/>\n        </if>\n        <else-if type="post-weblog">\n          <text variable="container-title" text-case="title" font-style="italic" suffix=" (blog)"/>\n        </else-if>\n        <else-if type="bill legislation legal_case" match="none">\n          <text variable="container-title" text-case="title" font-style="italic"/>\n        </else-if>\n      </choose>\n    </group>\n  </macro>\n  <macro name="collection-title">\n    <choose>\n      <if match="none" type="article-journal">\n        <choose>\n          <if match="none" is-numeric="collection-number">\n            <group delimiter=", ">\n              <text variable="collection-title" text-case="title"/>\n              <text variable="collection-number"/>\n            </group>\n          </if>\n          <else>\n            <group delimiter=" ">\n              <text variable="collection-title" text-case="title"/>\n              <text variable="collection-number"/>\n            </group>\n          </else>\n        </choose>\n      </if>\n    </choose>\n  </macro>\n  <macro name="collection-title-journal">\n    <choose>\n      <if type="article-journal">\n        <group delimiter=" ">\n          <text variable="collection-title"/>\n          <text variable="collection-number"/>\n        </group>\n      </if>\n    </choose>\n  </macro>\n  <macro name="edition-note">\n    <choose>\n      <if type="book chapter graphic motion_picture paper-conference report song" match="any">\n        <choose>\n          <if is-numeric="edition">\n            <group delimiter=" ">\n              <number variable="edition" form="ordinal"/>\n              <text term="edition" form="short"/>\n            </group>\n          </if>\n          <else>\n            <text variable="edition"/>\n          </else>\n        </choose>\n      </if>\n    </choose>\n  </macro>\n  <macro name="edition">\n    <choose>\n      <if type="book chapter graphic motion_picture paper-conference report song" match="any">\n        <choose>\n          <if is-numeric="edition">\n            <group delimiter=" ">\n              <number variable="edition" form="ordinal"/>\n              <text term="edition" form="short"/>\n            </group>\n          </if>\n          <else>\n            <text variable="edition" text-case="capitalize-first" suffix="."/>\n          </else>\n        </choose>\n      </if>\n    </choose>\n  </macro>\n  <macro name="locators-note-join-with-space">\n    <choose>\n      <if type="article-journal" variable="volume" match="all">\n        <choose>\n          <if match="none" variable="collection-title">\n            <text macro="locators-note"/>\n          </if>\n        </choose>\n      </if>\n    </choose>\n  </macro>\n  <macro name="locators-note-join-with-comma">\n    <choose>\n      <if type="article-journal" match="none">\n        <text macro="locators-note"/>\n      </if>\n      <else-if type="article-journal">\n        <choose>\n          <if variable="volume" match="none">\n            <text macro="locators-note"/>\n          </if>\n          <else-if match="any" variable="collection-title">\n            <text macro="locators-note"/>\n          </else-if>\n        </choose>\n      </else-if>\n    </choose>\n  </macro>\n  <macro name="locators-note">\n    <choose>\n      <if type="article-journal">\n        <group delimiter=", ">\n          <text macro="collection-title-journal"/>\n          <text variable="volume"/>\n          <group delimiter=" ">\n            <text term="issue" form="short"/>\n            <text variable="issue"/>\n          </group>\n        </group>\n      </if>\n      <else-if type="bill legislation legal_case" match="any">\n        <text macro="legal-cites"/>\n      </else-if>\n      <else-if type="book chapter graphic motion_picture paper-conference report song" match="any">\n        <group delimiter=", ">\n          <text macro="edition-note"/>\n          <group delimiter=" ">\n            <text term="volume" form="short"/>\n            <number variable="volume" form="numeric"/>\n          </group>\n          <choose>\n            <if variable="locator" match="none">\n              <group delimiter=" ">\n                <number variable="number-of-volumes" form="numeric"/>\n                <text term="volume" form="short" plural="true"/>\n              </group>\n            </if>\n          </choose>\n        </group>\n      </else-if>\n    </choose>\n  </macro>\n  <macro name="legal-cites">\n    <choose>\n      <if type="legal_case" match="any">\n        <group delimiter=" ">\n          <choose>\n            <if variable="container-title">\n              <text variable="volume"/>\n              <text variable="container-title"/>\n              <group delimiter=" ">\n                \x3c!--change to label variable="section" as that becomes available --\x3e\n                <text term="section" form="symbol"/>\n                <text variable="section"/>\n              </group>\n              <group delimiter=", ">\n                <text variable="page"/>\n                <choose>\n                  <if locator="page" match="any">\n                    <text variable="locator"/>\n                  </if>\n                  <else>\n                    <group delimiter=" ">\n                      <label variable="locator" form="short"/>\n                      <text variable="locator"/>\n                    </group>\n                  </else>\n                </choose>\n              </group>\n            </if>\n            <else>\n              <text variable="number" prefix="No. "/>\n            </else>\n          </choose>\n        </group>\n      </if>\n      <else-if type="bill legislation" match="any">\n        <group delimiter=", ">\n          <choose>\n            <if variable="number">\n              \x3c!--There\'s a public law number--\x3e\n              <text variable="number" prefix="Pub. L. No. "/>\n              <group delimiter=" ">\n                \x3c!--change to label variable="section" as that becomes available --\x3e\n                <text term="section" form="symbol"/>\n                <text variable="section"/>\n              </group>\n              <group delimiter=" ">\n                <text variable="volume"/>\n                <text variable="container-title"/>\n                <text variable="page-first"/>\n              </group>\n            </if>\n            <else>\n              <group delimiter=" ">\n                <text variable="volume"/>\n                <text variable="container-title"/>\n                \x3c!--change to label variable="section" as that becomes available --\x3e\n                <text term="section" form="symbol"/>\n                <text variable="section"/>\n              </group>\n            </else>\n          </choose>\n        </group>\n      </else-if>\n    </choose>\n  </macro>\n  <macro name="locators-join-with-space">\n    <choose>\n      <if type="article-journal" variable="volume" match="all">\n        <choose>\n          <if match="none" variable="collection-title">\n            <text macro="locators"/>\n          </if>\n        </choose>\n      </if>\n    </choose>\n  </macro>\n  <macro name="locators-join-with-comma">\n    <choose>\n      <if type="bill chapter legislation legal_case paper-conference" match="any">\n        <text macro="locators"/>\n      </if>\n      <else-if type="article-journal">\n        <choose>\n          <if variable="volume" match="none">\n            <text macro="locators"/>\n          </if>\n          <else-if match="any" variable="collection-title">\n            <text macro="locators"/>\n          </else-if>\n        </choose>\n      </else-if>\n    </choose>\n  </macro>\n  <macro name="locators-join-with-period">\n    <choose>\n      <if type="bill legislation legal_case article-journal chapter paper-conference" match="none">\n        <text macro="locators"/>\n      </if>\n    </choose>\n  </macro>\n  <macro name="locators">\n    <choose>\n      <if type="article-journal">\n        <group delimiter=", ">\n          <text macro="collection-title-journal"/>\n          <text variable="volume"/>\n          <group delimiter=" ">\n            <text term="issue" form="short"/>\n            <text variable="issue"/>\n          </group>\n        </group>\n      </if>\n      <else-if type="bill legislation legal_case" match="any">\n        <text macro="legal-cites"/>\n      </else-if>\n      <else-if type="book graphic motion_picture report song" match="any">\n        <group delimiter=". ">\n          <text macro="edition"/>\n          <group delimiter=" ">\n            <text term="volume" form="short" text-case="capitalize-first"/>\n            <number variable="volume" form="numeric"/>\n          </group>\n          <group delimiter=" ">\n            <number variable="number-of-volumes" form="numeric"/>\n            <text term="volume" form="short" plural="true"/>\n          </group>\n        </group>\n      </else-if>\n      <else-if type="chapter entry-dictionary entry-encyclopedia paper-conference" match="any">\n        <group delimiter=". ">\n          <text macro="edition"/>\n          <choose>\n            <if variable="page" match="none">\n              <group delimiter=" ">\n                <text term="volume" form="short" text-case="capitalize-first"/>\n                <number variable="volume" form="numeric"/>\n              </group>\n            </if>\n          </choose>\n        </group>\n      </else-if>\n    </choose>\n  </macro>\n  <macro name="locators-newspaper">\n    <choose>\n      <if type="article-newspaper">\n        <group delimiter=", ">\n          <group delimiter=" ">\n            <number variable="edition"/>\n            <text term="edition"/>\n          </group>\n          <group delimiter=" ">\n            <text term="section" form="short"/>\n            <text variable="section"/>\n          </group>\n        </group>\n      </if>\n    </choose>\n  </macro>\n  <macro name="event-note">\n    <text variable="event"/>\n  </macro>\n  <macro name="event">\n    <choose>\n      <if variable="title">\n        <group delimiter=" ">\n          <choose>\n            <if variable="genre">\n              <text term="presented at"/>\n            </if>\n            <else>\n              <text term="presented at" text-case="capitalize-first"/>\n            </else>\n          </choose>\n          <text variable="event"/>\n        </group>\n      </if>\n      <else>\n        <group delimiter=" ">\n          <text term="presented at" text-case="capitalize-first"/>\n          <text variable="event"/>\n        </group>\n      </else>\n    </choose>\n  </macro>\n  <macro name="originally-published">\n    <group delimiter=", ">\n      <group delimiter=": ">\n        <text variable="original-publisher-place"/>\n        <text variable="original-publisher"/>\n      </group>\n      <choose>\n        <if is-uncertain-date="original-date">\n          <date variable="original-date" form="numeric" date-parts="year" prefix="[" suffix="?]"/>\n        </if>\n        <else>\n          <date variable="original-date" form="numeric" date-parts="year"/>\n        </else>\n      </choose>\n    </group>\n  </macro>\n  <macro name="reprint-note">\n    \x3c!--needs localization--\x3e\n    <choose>\n      <if variable="original-date issued" match="all">\n        <choose>\n          \x3c!--for whatever reason in notes, when we have both original and new publishers, reprint doesn\'t appear--\x3e\n          <if variable="original-publisher original-publisher-place" match="none">\n            <text value="repr."/>\n          </if>\n        </choose>\n      </if>\n    </choose>\n  </macro>\n  <macro name="reprint">\n    \x3c!--needs localization--\x3e\n    <choose>\n      <if variable="original-date issued" match="all">\n        <text value="reprint" text-case="capitalize-first"/>\n      </if>\n    </choose>\n  </macro>\n  <macro name="publisher">\n    <choose>\n      <if type="thesis">\n        <text variable="publisher"/>\n      </if>\n      <else-if type="speech">\n        <text variable="event-place"/>\n      </else-if>\n      <else>\n        <group delimiter=": ">\n          <text variable="publisher-place"/>\n          <text variable="publisher"/>\n        </group>\n      </else>\n    </choose>\n  </macro>\n  <macro name="issued">\n    <choose>\n      <if variable="issued">\n        <choose>\n          <if type="legal_case">\n            <group delimiter=" ">\n              <text variable="authority"/>\n              <choose>\n                <if variable="container-title" match="any">\n                  \x3c!--Only print year for cases published in reporters--\x3e\n                  <date variable="issued" form="numeric" date-parts="year"/>\n                </if>\n                <else>\n                  <date variable="issued" form="text"/>\n                </else>\n              </choose>\n            </group>\n          </if>\n          <else-if type="book bill chapter  legislation motion_picture paper-conference song thesis" match="any">\n            <choose>\n              <if is-uncertain-date="issued">\n                <date variable="issued" form="numeric" date-parts="year" prefix="[" suffix="?]"/>\n              </if>\n              <else>\n                <date variable="issued" form="numeric" date-parts="year"/>\n              </else>\n            </choose>\n          </else-if>\n          <else-if type="patent">\n            <group delimiter=", ">\n              <group delimiter=" ">\n                \x3c!--Needs Localization--\x3e\n                <text value="filed"/>\n                <date variable="submitted" form="text"/>\n              </group>\n              <group delimiter=" ">\n                <choose>\n                  <if variable="issued submitted" match="all">\n                    <text term="and"/>\n                  </if>\n                </choose>\n                \x3c!--Needs Localization--\x3e\n                <text value="issued"/>\n                <date variable="issued" form="text"/>\n              </group>\n            </group>\n          </else-if>\n          <else>\n            <choose>\n              <if is-uncertain-date="issued">\n                <date variable="issued" form="text" prefix="[" suffix="?]"/>\n              </if>\n              <else>\n                <date variable="issued" form="text"/>\n              </else>\n            </choose>\n          </else>\n        </choose>\n      </if>\n      <else-if variable="status">\n        <text variable="status"/>\n      </else-if>\n      <else-if variable="accessed URL" match="all"/>\n      <else>\n        <text term="no date" form="short"/>\n      </else>\n    </choose>\n  </macro>\n  <macro name="point-locators-subsequent">\n    <choose>\n      <if type="legal_case" variable="locator" match="all">\n        <choose>\n          <if locator="page">\n            <group delimiter=":">\n              <text variable="volume"/>\n              <text variable="locator"/>\n            </group>\n          </if>\n          <else>\n            <group delimiter=" ">\n              <label variable="locator" form="short"/>\n              <text variable="locator"/>\n            </group>\n          </else>\n        </choose>\n      </if>\n      <else-if variable="locator">\n        <choose>\n          <if locator="page" match="none">\n            <group delimiter=" ">\n              <choose>\n                <if type="book graphic motion_picture report song" match="any">\n                  <choose>\n                    <if variable="volume">\n                      <group delimiter=", ">\n                        <group delimiter=" ">\n                          <text term="volume" form="short"/>\n                          <number variable="volume" form="numeric"/>\n                        </group>\n                        <label variable="locator" form="short"/>\n                      </group>\n                    </if>\n                    <else>\n                      <label variable="locator" form="short"/>\n                    </else>\n                  </choose>\n                </if>\n                <else>\n                  <label variable="locator" form="short"/>\n                </else>\n              </choose>\n              <text variable="locator"/>\n            </group>\n          </if>\n          <else-if type="book graphic motion_picture report song" match="any">\n            <group delimiter=":">\n              <number variable="volume" form="numeric"/>\n              <text variable="locator"/>\n            </group>\n          </else-if>\n          <else>\n            <text variable="locator"/>\n          </else>\n        </choose>\n      </else-if>\n    </choose>\n  </macro>\n  <macro name="point-locators-join-with-colon">\n    <choose>\n      <if type="article-journal">\n        <choose>\n          <if variable="locator page" match="any">\n            <choose>\n              <if variable="volume issue" match="any">\n                <text macro="point-locators"/>\n              </if>\n            </choose>\n          </if>\n        </choose>\n      </if>\n    </choose>\n  </macro>\n  <macro name="point-locators-join-with-comma">\n    <choose>\n      <if type="article-journal" match="none">\n        <text macro="point-locators"/>\n      </if>\n      <else-if variable="volume issue" match="none">\n        <text macro="point-locators"/>\n      </else-if>\n    </choose>\n  </macro>\n  <macro name="point-locators">\n    <choose>\n      <if variable="locator" match="none">\n        <choose>\n          <if type="article-journal chapter paper-conference" match="any">\n            <text variable="page"/>\n          </if>\n        </choose>\n      </if>\n      <else-if type="article-journal">\n        <group delimiter=" ">\n          <choose>\n            <if locator="page" match="none">\n              <label variable="locator" form="short" suffix=" "/>\n            </if>\n          </choose>\n          <text variable="locator"/>\n        </group>\n      </else-if>\n      <else-if type="legal_case"/>\n      <else>\n        <group delimiter=" ">\n          <choose>\n            <if locator="page" match="none">\n              <label variable="locator" form="short"/>\n            </if>\n          </choose>\n          <text variable="locator"/>\n        </group>\n      </else>\n    </choose>\n  </macro>\n  <macro name="locators-chapter">\n    <choose>\n      <if type="chapter entry-dictionary entry-encyclopedia paper-conference" match="any">\n        <choose>\n          <if variable="author container-author" match="all"/>\n          <else>\n            <choose>\n              <if variable="page">\n                <text variable="volume" suffix=":"/>\n                <text variable="page"/>\n              </if>\n            </choose>\n          </else>\n        </choose>\n      </if>\n    </choose>\n  </macro>\n  <macro name="locators-journal-join-with-colon">\n    <choose>\n      <if type="article-journal">\n        <choose>\n          <if variable="volume issue" match="any">\n            <text variable="page"/>\n          </if>\n        </choose>\n      </if>\n    </choose>\n  </macro>\n  <macro name="locators-journal-join-with-comma">\n    <choose>\n      <if type="article-journal">\n        <choose>\n          <if variable="volume issue" match="none">\n            <text variable="page"/>\n          </if>\n        </choose>\n      </if>\n    </choose>\n  </macro>\n  <macro name="archive-note">\n    <choose>\n      <if type="thesis">\n        <group delimiter=" ">\n          <text variable="archive"/>\n          <text variable="archive_location" prefix="(" suffix=")"/>\n        </group>\n      </if>\n      <else>\n        <group delimiter=", ">\n          <text variable="archive_location"/>\n          <text variable="archive"/>\n          <text variable="archive-place"/>\n        </group>\n      </else>\n    </choose>\n  </macro>\n  <macro name="archive">\n    <choose>\n      <if type="thesis">\n        <group delimiter=" ">\n          <text variable="archive"/>\n          <text variable="archive_location" prefix="(" suffix=")"/>\n        </group>\n      </if>\n      <else>\n        <group delimiter=". ">\n          <text variable="archive_location" text-case="capitalize-first"/>\n          <text variable="archive"/>\n          <text variable="archive-place"/>\n        </group>\n      </else>\n    </choose>\n  </macro>\n  <macro name="issue-note-join-with-space">\n    <choose>\n      <if type="article-journal bill legislation legal_case manuscript thesis" variable="publisher-place event-place publisher" match="any">\n        \x3c!--Chicago doesn\'t use publisher/place for Newspapers and we want the date delimited by a comma--\x3e\n        <choose>\n          <if type="article-newspaper" match="none">\n            <choose>\n              <if type="article-journal" match="none">\n                <text macro="issue-note"/>\n              </if>\n              <else-if variable="issue volume" match="any">\n                <text macro="issue-note"/>\n              </else-if>\n            </choose>\n          </if>\n        </choose>\n      </if>\n    </choose>\n  </macro>\n  <macro name="issue-note-join-with-comma">\n    <choose>\n      <if type="article-journal bill legislation legal_case manuscript speech thesis" variable="publisher-place publisher" match="none">\n        <text macro="issue-note"/>\n      </if>\n      <else-if type="article-newspaper">\n        <text macro="issue-note"/>\n      </else-if>\n      <else-if type="article-journal">\n        <choose>\n          <if variable="volume issue" match="none">\n            <text macro="issue-note"/>\n          </if>\n        </choose>\n      </else-if>\n    </choose>\n  </macro>\n  <macro name="issue-map-graphic">\n    \x3c!--See CMoS 17th ed. 14.235 and 14.237--\x3e\n    <choose>\n      <if type="graphic map" match="any">\n        <choose>\n          <if variable="publisher publisher-place" match="none">\n            <text macro="issued"/>\n          </if>\n        </choose>\n      </if>\n    </choose>\n  </macro>\n  <macro name="issue-note">\n    <choose>\n      <if type="bill legislation legal_case" match="any">\n        <text macro="issued" prefix="(" suffix=")"/>\n      </if>\n      <else-if type="article-journal">\n        <choose>\n          <if variable="volume issue" match="any">\n            <text macro="issued" prefix="(" suffix=")"/>\n          </if>\n          <else>\n            <text macro="issued"/>\n          </else>\n        </choose>\n      </else-if>\n      <else-if type="article-newspaper">\n        <text macro="issued"/>\n      </else-if>\n      <else-if type="manuscript thesis speech" match="any">\n        <group delimiter=", " prefix="(" suffix=")">\n          <choose>\n            <if variable="title" match="any">\n              <text variable="genre"/>\n            </if>\n          </choose>\n          <text variable="event"/>\n          <text variable="event-place"/>\n          <text variable="publisher"/>\n          <text macro="issued"/>\n        </group>\n      </else-if>\n      <else-if variable="publisher-place event-place publisher" match="any">\n        <group prefix="(" suffix=")" delimiter=", ">\n          <text macro="event-note"/>\n          <group delimiter="; ">\n            <text macro="originally-published"/>\n            <group delimiter=", ">\n              <text macro="reprint-note"/>\n              <text macro="publisher"/>\n            </group>\n          </group>\n          <text macro="issued"/>\n        </group>\n      </else-if>\n      <else>\n        <text macro="issued"/>\n      </else>\n    </choose>\n  </macro>\n  <macro name="issue-join-with-space">\n    <choose>\n      <if type="article-journal" match="any">\n        <choose>\n          <if variable="issue volume" match="any">\n            <text macro="issue"/>\n          </if>\n        </choose>\n      </if>\n      <else-if type="bill legislation legal_case" match="any">\n        <text macro="issue"/>\n      </else-if>\n    </choose>\n  </macro>\n  <macro name="issue-join-with-period">\n    <choose>\n      <if type="article-journal bill legislation legal_case" match="none">\n        <choose>\n          \x3c!-- We need a perdiod here when the container title gets moved up into author position, otherwise a comma (below)--\x3e\n          <if type="article-newspaper article-magazine" match="any">\n            <choose>\n              <if variable="author editor" match="none">\n                <text macro="issue"/>\n              </if>\n            </choose>\n          </if>\n          <else-if type="speech" variable="publisher publisher-place" match="any">\n            <text macro="issue"/>\n          </else-if>\n        </choose>\n      </if>\n    </choose>\n  </macro>\n  <macro name="issue-join-with-comma">\n    <choose>\n      <if type="bill legislation legal_case" match="none">\n        <choose>\n          <if type="article-journal" match="none">\n            <choose>\n              <if type="article-newspaper article-magazine" match="any">\n                <choose>\n                  <if variable="author editor" match="any">\n                    <text macro="issue"/>\n                  </if>\n                </choose>\n              </if>\n              <else-if type="speech" variable="publisher publisher-place" match="none">\n                <text macro="issue"/>\n              </else-if>\n            </choose>\n          </if>\n          <else-if variable="volume issue" match="none">\n            <text macro="issue"/>\n          </else-if>\n        </choose>\n      </if>\n    </choose>\n  </macro>\n  <macro name="issue">\n    <choose>\n      <if type="bill legislation legal_case" match="any">\n        <text macro="issued" prefix="(" suffix=")"/>\n      </if>\n      <else-if type="article-journal">\n        <choose>\n          <if variable="issue volume" match="any">\n            <text macro="issued" prefix="(" suffix=")"/>\n          </if>\n          <else>\n            <text macro="issued"/>\n          </else>\n        </choose>\n      </else-if>\n      <else-if type="speech">\n        <group delimiter=", ">\n          <group delimiter=" ">\n            <choose>\n              <if variable="title" match="none"/>\n              <else>\n                <text variable="genre" text-case="capitalize-first"/>\n              </else>\n            </choose>\n            <text macro="event"/>\n          </group>\n          <text variable="event-place"/>\n          <text macro="issued"/>\n        </group>\n      </else-if>\n      \x3c!--Chicago doesn\'t use publisher/place for Newspapers --\x3e\n      <else-if type="article-newspaper">\n        <text macro="issued"/>\n      </else-if>\n      <else-if variable="publisher-place publisher" match="any">\n        <group delimiter=", ">\n          <choose>\n            <if type="thesis">\n              <text variable="genre" text-case="capitalize-first"/>\n            </if>\n          </choose>\n          <group delimiter=". ">\n            <text macro="originally-published"/>\n            <group delimiter=", ">\n              <text macro="reprint"/>\n              <text macro="publisher"/>\n            </group>\n          </group>\n          <text macro="issued"/>\n        </group>\n      </else-if>\n      \x3c!--location for data for maps and artwork is different--\x3e\n      <else-if type="graphic map" match="none">\n        <text macro="issued"/>\n      </else-if>\n    </choose>\n  </macro>\n  <macro name="access-note">\n    <group delimiter=", ">\n      <choose>\n        <if type="graphic report" match="any">\n          <text macro="archive-note"/>\n        </if>\n        <else-if type="article-journal bill book chapter legal_case legislation motion_picture paper-conference" match="none">\n          <text macro="archive-note"/>\n        </else-if>\n      </choose>\n      <choose>\n        <if variable="issued" match="none">\n          <group delimiter=" ">\n            <text term="accessed"/>\n            <date variable="accessed" form="text"/>\n          </group>\n        </if>\n      </choose>\n      <choose>\n        <if type="legal_case" match="none">\n          <choose>\n            <if variable="DOI">\n              <text variable="DOI" prefix="https://doi.org/"/>\n            </if>\n            <else>\n              <text variable="URL"/>\n            </else>\n          </choose>\n        </if>\n      </choose>\n    </group>\n  </macro>\n  <macro name="access">\n    <group delimiter=". ">\n      <choose>\n        <if type="graphic report" match="any">\n          <text macro="archive"/>\n        </if>\n        <else-if type="article-journal bill book chapter legal_case legislation motion_picture paper-conference" match="none">\n          <text macro="archive"/>\n        </else-if>\n      </choose>\n      <choose>\n        <if variable="issued" match="none">\n          <group delimiter=" ">\n            <text term="accessed" text-case="capitalize-first"/>\n            <date variable="accessed" form="text"/>\n          </group>\n        </if>\n      </choose>\n      <choose>\n        <if type="legal_case" match="none">\n          <choose>\n            <if variable="DOI">\n              <text variable="DOI" prefix="https://doi.org/"/>\n            </if>\n            <else>\n              <text variable="URL"/>\n            </else>\n          </choose>\n        </if>\n      </choose>\n    </group>\n  </macro>\n  <macro name="case-locator-subsequent">\n    <choose>\n      <if type="legal_case">\n        <group delimiter=" ">\n          <text variable="volume"/>\n          <text variable="container-title"/>\n        </group>\n      </if>\n    </choose>\n  </macro>\n  <macro name="case-pinpoint-subsequent">\n    <choose>\n      <if type="legal_case">\n        <group delimiter=" ">\n          <choose>\n            <if locator="page">\n              <text term="at"/>\n              <text variable="locator"/>\n            </if>\n            <else>\n              <label variable="locator"/>\n              <text variable="locator"/>\n            </else>\n          </choose>\n        </group>\n      </if>\n    </choose>\n  </macro>\n  <citation et-al-min="4" et-al-use-first="1" disambiguate-add-names="true">\n    <layout suffix="." delimiter="; ">\n      <choose>\n        <if position="ibid ibid-with-locator" match="any">\n          <group delimiter=", ">\n            <text macro="contributors-short"/>\n            <group delimiter=" ">\n              <group delimiter=", ">\n                <choose>\n                  <if variable="author editor translator" match="none">\n                    <text macro="title-short"/>\n                  </if>\n                </choose>\n                <text macro="case-locator-subsequent"/>\n              </group>\n              <text macro="case-pinpoint-subsequent"/>\n            </group>\n            <choose>\n              <if match="none" type="legal_case">\n                <text macro="point-locators-subsequent"/>\n              </if>\n            </choose>\n          </group>\n        </if>\n        <else-if position="subsequent">\n          <group delimiter=", ">\n            <text macro="contributors-short"/>\n            <group delimiter=" ">\n              <group delimiter=", ">\n                <text macro="title-short"/>\n                \x3c!--if title & author are the same: --\x3e\n                <text macro="date-disambiguate"/>\n                <text macro="case-locator-subsequent"/>\n              </group>\n              <text macro="case-pinpoint-subsequent"/>\n            </group>\n            <choose>\n              <if match="none" type="legal_case">\n                <text macro="point-locators-subsequent"/>\n              </if>\n            </choose>\n          </group>\n        </else-if>\n        <else>\n          <group delimiter=", ">\n            <group delimiter=": ">\n              <group delimiter=", ">\n                <group delimiter=" ">\n                  <group delimiter=", ">\n                    <group delimiter=" ">\n                      <group delimiter=", ">\n                        <group delimiter=", ">\n                          <text macro="contributors-note"/>\n                          <text macro="title-note"/>\n                          <text macro="issue-map-graphic"/>\n                        </group>\n                        <text macro="description-note"/>\n                        <text macro="secondary-contributors-note"/>\n                        <text macro="container-title-note"/>\n                        <text macro="container-contributors-note"/>\n                      </group>\n                      <text macro="locators-note-join-with-space"/>\n                    </group>\n                    <text macro="locators-note-join-with-comma"/>\n                    <text macro="collection-title"/>\n                    <text macro="issue-note-join-with-comma"/>\n                  </group>\n                  <text macro="issue-note-join-with-space"/>\n                </group>\n                <text macro="locators-newspaper"/>\n                <text macro="point-locators-join-with-comma"/>\n              </group>\n              <text macro="point-locators-join-with-colon"/>\n            </group>\n            <text macro="access-note"/>\n          </group>\n        </else>\n      </choose>\n    </layout>\n  </citation>\n  <bibliography hanging-indent="true" et-al-min="11" et-al-use-first="7" subsequent-author-substitute="&#8212;&#8212;&#8212;" entry-spacing="0">\n    <sort>\n      <key macro="contributors-sort"/>\n      <key variable="title"/>\n      <key variable="genre"/>\n      <key variable="issued"/>\n    </sort>\n    <layout suffix=".">\n      <group delimiter=". ">\n        <group delimiter=": ">\n          <group delimiter=", ">\n            <group delimiter=" ">\n              <group delimiter=". ">\n                <group delimiter=" ">\n                  <group delimiter=", ">\n                    <group delimiter=". ">\n                      <group delimiter=". ">\n                        <text macro="contributors"/>\n                        <text macro="title"/>\n                        <text macro="issue-map-graphic"/>\n                      </group>\n                      <text macro="description"/>\n                      <text macro="secondary-contributors"/>\n                      <group delimiter=", ">\n                        <text macro="container-title"/>\n                        <text macro="container-contributors"/>\n                      </group>\n                      <text macro="locators-join-with-period"/>\n                    </group>\n                    <text macro="locators-join-with-comma"/>\n                    <text macro="locators-chapter"/>\n                  </group>\n                  <text macro="locators-join-with-space"/>\n                </group>\n                <text macro="collection-title"/>\n                <text macro="issue-join-with-period"/>\n              </group>\n              <text macro="issue-join-with-space"/>\n            </group>\n            <text macro="issue-join-with-comma"/>\n            <text macro="locators-journal-join-with-comma"/>\n            <text macro="locators-newspaper"/>\n          </group>\n          <text macro="locators-journal-join-with-colon"/>\n        </group>\n        <text macro="access"/>\n      </group>\n    </layout>\n  </bibliography>\n</style>',
    chicagoNoteBibliography =
        '<?xml version="1.0" encoding="utf-8"?>\n<style xmlns="http://purl.org/net/xbiblio/csl" class="note" version="1.0" demote-non-dropping-particle="display-and-sort" page-range-format="chicago">\n  <info>\n    <title>Chicago Manual of Style 17th edition (note)</title>\n    <id>http://www.zotero.org/styles/chicago-note-bibliography</id>\n    <link href="http://www.zotero.org/styles/chicago-note-bibliography" rel="self"/>\n    <link href="http://www.chicagomanualofstyle.org/tools_citationguide.html" rel="documentation"/>\n    <author>\n      <name>Julian Onions</name>\n      <email>julian.onions@gmail.com</email>\n    </author>\n    <contributor>\n      <name>Simon Kornblith</name>\n      <email>simon@simonster.com</email>\n    </contributor>\n    <contributor>\n      <name>Elena Razlogova</name>\n      <email>elena.razlogova@gmail.com</email>\n    </contributor>\n    <contributor>\n      <name>Frank Bennett</name>\n      <email>biercenator@gmail.com</email>\n    </contributor>\n    <contributor>\n      <name>Andrew Dunning</name>\n      <uri>https://orcid.org/0000-0003-0464-5036</uri>\n    </contributor>\n    <contributor>\n      <name>Sebastian Karcher</name>\n    </contributor>\n    <contributor>\n      <name>Brenton M. Wiernik</name>\n    </contributor>\n    <category citation-format="note"/>\n    <category field="generic-base"/>\n    <summary>Chicago format with short notes and bibliography</summary>\n    <updated>2017-10-12T12:00:00+00:00</updated>\n    <rights license="http://creativecommons.org/licenses/by-sa/3.0/">This work is licensed under a Creative Commons Attribution-ShareAlike 3.0 License</rights>\n  </info>\n  <locale xml:lang="en">\n    <terms>\n      <term name="editor" form="verb-short">ed.</term>\n      <term name="translator" form="verb-short">trans.</term>\n      <term name="translator" form="short">trans.</term>\n      <term name="editortranslator" form="verb-short">ed. and trans.</term>\n      <term name="editortranslator" form="verb">Edited and translated by</term>\n      <term name="translator" form="short">trans.</term>\n    </terms>\n  </locale>\n  <macro name="editor-translator">\n    <group delimiter=", ">\n      <group delimiter=" ">\n        <choose>\n          <if variable="container-author reviewed-author" match="any">\n            <group>\n              <names variable="container-author reviewed-author">\n                <label form="verb-short" text-case="lowercase" suffix=" "/>\n                <name and="text" delimiter=", "/>\n              </names>\n            </group>\n          </if>\n        </choose>\n      </group>\n      <names variable="editor translator" delimiter=", ">\n        <label form="verb-short" text-case="lowercase" suffix=" "/>\n        <name and="text" delimiter=", "/>\n      </names>\n    </group>\n  </macro>\n  <macro name="secondary-contributors-note">\n    <choose>\n      <if type="chapter entry-dictionary entry-encyclopedia paper-conference" match="none">\n        <text macro="editor-translator"/>\n      </if>\n    </choose>\n  </macro>\n  <macro name="container-contributors-note">\n    <choose>\n      <if type="chapter entry-dictionary entry-encyclopedia paper-conference" match="any">\n        <text macro="editor-translator"/>\n      </if>\n    </choose>\n  </macro>\n  <macro name="secondary-contributors">\n    <choose>\n      <if type="chapter entry-dictionary entry-encyclopedia paper-conference" match="none">\n        <names variable="editor translator" delimiter=". ">\n          <label form="verb" text-case="capitalize-first" suffix=" "/>\n          <name and="text" delimiter=", "/>\n        </names>\n      </if>\n    </choose>\n  </macro>\n  <macro name="container-contributors">\n    <choose>\n      <if type="chapter entry-dictionary entry-encyclopedia paper-conference" match="any">\n        <group delimiter=", ">\n          <choose>\n            <if variable="author">\n              <choose>\n                <if variable="container-author" match="any">\n                  <names variable="container-author">\n                    <label form="verb-short" text-case="lowercase" suffix=" "/>\n                    <name and="text" delimiter=", "/>\n                  </names>\n                </if>\n              </choose>\n              \x3c!--This includes page numers after the container author, e.g. for Introductions --\x3e\n              <choose>\n                <if variable="container-author author" match="all">\n                  <group delimiter=". ">\n                    <text variable="page"/>\n                    <names variable="editor translator" delimiter=", ">\n                      <label form="verb" suffix=" "/>\n                      <name and="text" delimiter=", "/>\n                    </names>\n                  </group>\n                </if>\n                <else>\n                  <names variable="editor translator" delimiter=", ">\n                    <label form="verb" text-case="lowercase" suffix=" "/>\n                    <name and="text" delimiter=", "/>\n                  </names>\n                </else>\n              </choose>\n            </if>\n          </choose>\n        </group>\n      </if>\n    </choose>\n  </macro>\n  <macro name="recipient-note">\n    <names variable="recipient" delimiter=", ">\n      <label form="verb" text-case="lowercase" suffix=" "/>\n      <name and="text" delimiter=", "/>\n    </names>\n  </macro>\n  <macro name="contributors-note">\n    <group delimiter=" ">\n      <names variable="author">\n        <name and="text" sort-separator=", " delimiter=", "/>\n        <label form="short" prefix=", "/>\n        <substitute>\n          <names variable="editor"/>\n          <names variable="translator"/>\n        </substitute>\n      </names>\n      <text macro="recipient-note"/>\n    </group>\n  </macro>\n  <macro name="editor">\n    <names variable="editor">\n      <name name-as-sort-order="first" and="text" sort-separator=", " delimiter=", " delimiter-precedes-last="always"/>\n      <label form="short" prefix=", "/>\n    </names>\n  </macro>\n  <macro name="translator">\n    <names variable="translator">\n      <name name-as-sort-order="first" and="text" sort-separator=", " delimiter=", " delimiter-precedes-last="always"/>\n      <label form="verb-short" prefix=", "/>\n    </names>\n  </macro>\n  <macro name="recipient">\n    <group delimiter=" ">\n      <choose>\n        <if type="personal_communication">\n          <choose>\n            <if variable="genre">\n              <text variable="genre" text-case="capitalize-first"/>\n            </if>\n            <else>\n              <text term="letter" text-case="capitalize-first"/>\n            </else>\n          </choose>\n        </if>\n      </choose>\n      <text macro="recipient-note"/>\n    </group>\n  </macro>\n  <macro name="contributors">\n    <group delimiter=". ">\n      <names variable="author">\n        <name name-as-sort-order="first" and="text" sort-separator=", " delimiter=", " delimiter-precedes-last="always"/>\n        <substitute>\n          <text macro="editor"/>\n          <text macro="translator"/>\n          <choose>\n            <if type="article-magazine article-newspaper" match="any">\n              <text variable="container-title" font-style="italic"/>\n            </if>\n            <else-if type="webpage post-weblog" match="any">\n              <text variable="container-title"/>\n            </else-if>\n          </choose>\n        </substitute>\n      </names>\n      <text macro="recipient"/>\n    </group>\n  </macro>\n  <macro name="recipient-short">\n    <names variable="recipient">\n      <label form="verb" text-case="lowercase" suffix=" "/>\n      <name form="short" and="text" delimiter=", "/>\n    </names>\n  </macro>\n  <macro name="contributors-short">\n    <group delimiter=" ">\n      <names variable="author">\n        <name form="short" and="text" delimiter=", "/>\n        <substitute>\n          <names variable="editor"/>\n          <names variable="translator"/>\n        </substitute>\n      </names>\n      <text macro="recipient-short"/>\n    </group>\n  </macro>\n  <macro name="contributors-sort">\n    <names variable="author">\n      <name name-as-sort-order="all" and="text" sort-separator=", " delimiter=", " delimiter-precedes-last="always"/>\n      <substitute>\n        <names variable="editor"/>\n        <names variable="translator"/>\n        <choose>\n          <if type="article-magazine article-newspaper webpage post-weblog" match="any">\n            <text variable="container-title"/>\n          </if>\n        </choose>\n        <text macro="title"/>\n      </substitute>\n    </names>\n  </macro>\n  <macro name="interviewer-note">\n    <names variable="interviewer" delimiter=", ">\n      <label form="verb" text-case="lowercase" suffix=" "/>\n      <name and="text" delimiter=", "/>\n    </names>\n  </macro>\n  <macro name="interviewer">\n    <names variable="interviewer" delimiter=", ">\n      <label form="verb" text-case="capitalize-first" suffix=" "/>\n      <name and="text" delimiter=", "/>\n    </names>\n  </macro>\n  <macro name="title-note">\n    <choose>\n      <if variable="title" match="none">\n        <text variable="genre"/>\n      </if>\n      <else-if type="book graphic map motion_picture song" match="any">\n        <text variable="title" text-case="title" font-style="italic"/>\n        <group delimiter=" " prefix=", ">\n          <text term="version"/>\n          <text variable="version"/>\n        </group>\n      </else-if>\n      <else-if type="legal_case interview patent" match="any">\n        <text variable="title"/>\n      </else-if>\n      <else-if variable="reviewed-author">\n        <text variable="title" font-style="italic" prefix="review of "/>\n      </else-if>\n      <else>\n        <text variable="title" text-case="title" quotes="true"/>\n      </else>\n    </choose>\n  </macro>\n  <macro name="title">\n    <choose>\n      <if variable="title" match="none">\n        <choose>\n          <if type="personal_communication" match="none">\n            <text variable="genre" text-case="capitalize-first"/>\n          </if>\n        </choose>\n      </if>\n      <else-if type="book graphic motion_picture song" match="any">\n        <text variable="title" text-case="title" font-style="italic"/>\n        <group prefix=" (" suffix=")" delimiter=" ">\n          <text term="version"/>\n          <text variable="version"/>\n        </group>\n      </else-if>\n      <else-if variable="reviewed-author">\n        <group delimiter=", ">\n          <text variable="title" font-style="italic" prefix="Review of "/>\n          <names variable="reviewed-author">\n            <label form="verb-short" text-case="lowercase" suffix=" "/>\n            <name and="text" delimiter=", "/>\n          </names>\n        </group>\n      </else-if>\n      <else-if type="bill legislation legal_case interview patent" match="any">\n        <text variable="title"/>\n      </else-if>\n      <else>\n        <text variable="title" text-case="title" quotes="true"/>\n      </else>\n    </choose>\n  </macro>\n  <macro name="title-short">\n    <choose>\n      <if variable="title" match="none">\n        <choose>\n          <if type="interview">\n            <text term="interview"/>\n          </if>\n          <else-if type="manuscript speech" match="any">\n            <text variable="genre" form="short"/>\n          </else-if>\n        </choose>\n      </if>\n      <else-if type="book graphic motion_picture song" match="any">\n        <text variable="title" text-case="title" form="short" font-style="italic"/>\n      </else-if>\n      <else-if type="legal_case" variable="title-short" match="all">\n        <text variable="title" font-style="italic" form="short"/>\n      </else-if>\n      <else-if type="patent interview" match="any">\n        <text variable="title" form="short"/>\n      </else-if>\n      <else-if type="legal_case bill legislation" match="any">\n        <text variable="title"/>\n      </else-if>\n      <else>\n        <text variable="title" text-case="title" form="short" quotes="true"/>\n      </else>\n    </choose>\n  </macro>\n  <macro name="date-disambiguate">\n    <choose>\n      <if disambiguate="true" type="personal_communication" match="any">\n        <text macro="issued"/>\n      </if>\n    </choose>\n  </macro>\n  <macro name="description-note">\n    <group delimiter=", ">\n      <text macro="interviewer-note"/>\n      <text variable="medium"/>\n      <choose>\n        <if variable="title" match="none"/>\n        <else-if type="manuscript thesis speech" match="any"/>\n        <else-if type="patent">\n          <group delimiter=" ">\n            <text variable="authority"/>\n            <text variable="number"/>\n          </group>\n        </else-if>\n        <else>\n          <text variable="genre"/>\n        </else>\n      </choose>\n      <choose>\n        <if type="map">\n          <text variable="scale"/>\n        </if>\n        <else-if type="graphic">\n          <text variable="dimensions"/>\n        </else-if>\n      </choose>\n    </group>\n  </macro>\n  <macro name="description">\n    <group delimiter=", ">\n      <group delimiter=". ">\n        <text macro="interviewer"/>\n        <text variable="medium" text-case="capitalize-first"/>\n      </group>\n      <choose>\n        <if variable="title" match="none"/>\n        <else-if type="thesis speech" match="any"/>\n        <else-if type="patent">\n          <group delimiter=" ">\n            <text variable="authority"/>\n            <text variable="number"/>\n          </group>\n        </else-if>\n        <else>\n          <text variable="genre" text-case="capitalize-first"/>\n        </else>\n      </choose>\n      <choose>\n        <if type="map">\n          <text variable="scale"/>\n        </if>\n        <else-if type="graphic">\n          <text variable="dimensions"/>\n        </else-if>\n      </choose>\n    </group>\n  </macro>\n  <macro name="container-title-note">\n    <group delimiter=" ">\n      <choose>\n        <if type="chapter entry-dictionary entry-encyclopedia paper-conference" match="any">\n          <text term="in"/>\n        </if>\n      </choose>\n      <choose>\n        <if type="webpage">\n          <text variable="container-title"/>\n        </if>\n        <else-if type="post-weblog">\n          <text variable="container-title" text-case="title" font-style="italic" suffix=" (blog)"/>\n        </else-if>\n        <else-if type="bill legislation legal_case" match="none">\n          <text variable="container-title" text-case="title" font-style="italic"/>\n        </else-if>\n      </choose>\n    </group>\n  </macro>\n  <macro name="container-title">\n    <group delimiter=" ">\n      <choose>\n        <if type="chapter entry-dictionary entry-encyclopedia paper-conference" match="any">\n          <text term="in" text-case="capitalize-first"/>\n        </if>\n      </choose>\n      <choose>\n        <if type="webpage">\n          <text variable="container-title"/>\n        </if>\n        <else-if type="post-weblog">\n          <text variable="container-title" text-case="title" font-style="italic" suffix=" (blog)"/>\n        </else-if>\n        <else-if type="bill legislation legal_case" match="none">\n          <text variable="container-title" text-case="title" font-style="italic"/>\n        </else-if>\n      </choose>\n    </group>\n  </macro>\n  <macro name="collection-title">\n    <choose>\n      <if match="none" type="article-journal">\n        <choose>\n          <if match="none" is-numeric="collection-number">\n            <group delimiter=", ">\n              <text variable="collection-title" text-case="title"/>\n              <text variable="collection-number"/>\n            </group>\n          </if>\n          <else>\n            <group delimiter=" ">\n              <text variable="collection-title" text-case="title"/>\n              <text variable="collection-number"/>\n            </group>\n          </else>\n        </choose>\n      </if>\n    </choose>\n  </macro>\n  <macro name="collection-title-journal">\n    <choose>\n      <if type="article-journal">\n        <group delimiter=" ">\n          <text variable="collection-title"/>\n          <text variable="collection-number"/>\n        </group>\n      </if>\n    </choose>\n  </macro>\n  <macro name="edition-note">\n    <choose>\n      <if type="book chapter graphic motion_picture paper-conference report song" match="any">\n        <choose>\n          <if is-numeric="edition">\n            <group delimiter=" ">\n              <number variable="edition" form="ordinal"/>\n              <text term="edition" form="short"/>\n            </group>\n          </if>\n          <else>\n            <text variable="edition"/>\n          </else>\n        </choose>\n      </if>\n    </choose>\n  </macro>\n  <macro name="edition">\n    <choose>\n      <if type="book chapter graphic motion_picture paper-conference report song" match="any">\n        <choose>\n          <if is-numeric="edition">\n            <group delimiter=" ">\n              <number variable="edition" form="ordinal"/>\n              <text term="edition" form="short"/>\n            </group>\n          </if>\n          <else>\n            <text variable="edition" text-case="capitalize-first" suffix="."/>\n          </else>\n        </choose>\n      </if>\n    </choose>\n  </macro>\n  <macro name="locators-note-join-with-space">\n    <choose>\n      <if type="article-journal" variable="volume" match="all">\n        <choose>\n          <if match="none" variable="collection-title">\n            <text macro="locators-note"/>\n          </if>\n        </choose>\n      </if>\n    </choose>\n  </macro>\n  <macro name="locators-note-join-with-comma">\n    <choose>\n      <if type="article-journal" match="none">\n        <text macro="locators-note"/>\n      </if>\n      <else-if type="article-journal">\n        <choose>\n          <if variable="volume" match="none">\n            <text macro="locators-note"/>\n          </if>\n          <else-if match="any" variable="collection-title">\n            <text macro="locators-note"/>\n          </else-if>\n        </choose>\n      </else-if>\n    </choose>\n  </macro>\n  <macro name="locators-note">\n    <choose>\n      <if type="article-journal">\n        <group delimiter=", ">\n          <text macro="collection-title-journal"/>\n          <text variable="volume"/>\n          <group delimiter=" ">\n            <text term="issue" form="short"/>\n            <text variable="issue"/>\n          </group>\n        </group>\n      </if>\n      <else-if type="bill legislation legal_case" match="any">\n        <text macro="legal-cites"/>\n      </else-if>\n      <else-if type="book chapter graphic motion_picture paper-conference report song" match="any">\n        <group delimiter=", ">\n          <text macro="edition-note"/>\n          <group delimiter=" ">\n            <text term="volume" form="short"/>\n            <number variable="volume" form="numeric"/>\n          </group>\n          <choose>\n            <if variable="locator" match="none">\n              <group delimiter=" ">\n                <number variable="number-of-volumes" form="numeric"/>\n                <text term="volume" form="short" plural="true"/>\n              </group>\n            </if>\n          </choose>\n        </group>\n      </else-if>\n    </choose>\n  </macro>\n  <macro name="legal-cites">\n    <choose>\n      <if type="legal_case" match="any">\n        <group delimiter=" ">\n          <choose>\n            <if variable="container-title">\n              <text variable="volume"/>\n              <text variable="container-title"/>\n              <group delimiter=" ">\n                \x3c!--change to label variable="section" as that becomes available --\x3e\n                <text term="section" form="symbol"/>\n                <text variable="section"/>\n              </group>\n              <group delimiter=", ">\n                <text variable="page"/>\n                <choose>\n                  <if locator="page" match="any">\n                    <text variable="locator"/>\n                  </if>\n                  <else>\n                    <group delimiter=" ">\n                      <label variable="locator" form="short"/>\n                      <text variable="locator"/>\n                    </group>\n                  </else>\n                </choose>\n              </group>\n            </if>\n            <else>\n              <text variable="number" prefix="No. "/>\n            </else>\n          </choose>\n        </group>\n      </if>\n      <else-if type="bill legislation" match="any">\n        <group delimiter=", ">\n          <choose>\n            <if variable="number">\n              \x3c!--There\'s a public law number--\x3e\n              <text variable="number" prefix="Pub. L. No. "/>\n              <group delimiter=" ">\n                \x3c!--change to label variable="section" as that becomes available --\x3e\n                <text term="section" form="symbol"/>\n                <text variable="section"/>\n              </group>\n              <group delimiter=" ">\n                <text variable="volume"/>\n                <text variable="container-title"/>\n                <text variable="page-first"/>\n              </group>\n            </if>\n            <else>\n              <group delimiter=" ">\n                <text variable="volume"/>\n                <text variable="container-title"/>\n                \x3c!--change to label variable="section" as that becomes available --\x3e\n                <text term="section" form="symbol"/>\n                <text variable="section"/>\n              </group>\n            </else>\n          </choose>\n        </group>\n      </else-if>\n    </choose>\n  </macro>\n  <macro name="locators-join-with-space">\n    <choose>\n      <if type="article-journal" variable="volume" match="all">\n        <choose>\n          <if match="none" variable="collection-title">\n            <text macro="locators"/>\n          </if>\n        </choose>\n      </if>\n    </choose>\n  </macro>\n  <macro name="locators-join-with-comma">\n    <choose>\n      <if type="bill chapter legislation legal_case paper-conference" match="any">\n        <text macro="locators"/>\n      </if>\n      <else-if type="article-journal">\n        <choose>\n          <if variable="volume" match="none">\n            <text macro="locators"/>\n          </if>\n          <else-if match="any" variable="collection-title">\n            <text macro="locators"/>\n          </else-if>\n        </choose>\n      </else-if>\n    </choose>\n  </macro>\n  <macro name="locators-join-with-period">\n    <choose>\n      <if type="bill legislation legal_case article-journal chapter paper-conference" match="none">\n        <text macro="locators"/>\n      </if>\n    </choose>\n  </macro>\n  <macro name="locators">\n    <choose>\n      <if type="article-journal">\n        <group delimiter=", ">\n          <text macro="collection-title-journal"/>\n          <text variable="volume"/>\n          <group delimiter=" ">\n            <text term="issue" form="short"/>\n            <text variable="issue"/>\n          </group>\n        </group>\n      </if>\n      <else-if type="bill legislation legal_case" match="any">\n        <text macro="legal-cites"/>\n      </else-if>\n      <else-if type="book graphic motion_picture report song" match="any">\n        <group delimiter=". ">\n          <text macro="edition"/>\n          <group delimiter=" ">\n            <text term="volume" form="short" text-case="capitalize-first"/>\n            <number variable="volume" form="numeric"/>\n          </group>\n          <group delimiter=" ">\n            <number variable="number-of-volumes" form="numeric"/>\n            <text term="volume" form="short" plural="true"/>\n          </group>\n        </group>\n      </else-if>\n      <else-if type="chapter entry-dictionary entry-encyclopedia paper-conference" match="any">\n        <group delimiter=". ">\n          <text macro="edition"/>\n          <choose>\n            <if variable="page" match="none">\n              <group delimiter=" ">\n                <text term="volume" form="short" text-case="capitalize-first"/>\n                <number variable="volume" form="numeric"/>\n              </group>\n            </if>\n          </choose>\n        </group>\n      </else-if>\n    </choose>\n  </macro>\n  <macro name="locators-newspaper">\n    <choose>\n      <if type="article-newspaper">\n        <group delimiter=", ">\n          <group delimiter=" ">\n            <number variable="edition"/>\n            <text term="edition"/>\n          </group>\n          <group delimiter=" ">\n            <text term="section" form="short"/>\n            <text variable="section"/>\n          </group>\n        </group>\n      </if>\n    </choose>\n  </macro>\n  <macro name="event-note">\n    <text variable="event"/>\n  </macro>\n  <macro name="event">\n    <choose>\n      <if variable="title">\n        <group delimiter=" ">\n          <choose>\n            <if variable="genre">\n              <text term="presented at"/>\n            </if>\n            <else>\n              <text term="presented at" text-case="capitalize-first"/>\n            </else>\n          </choose>\n          <text variable="event"/>\n        </group>\n      </if>\n      <else>\n        <group delimiter=" ">\n          <text term="presented at" text-case="capitalize-first"/>\n          <text variable="event"/>\n        </group>\n      </else>\n    </choose>\n  </macro>\n  <macro name="originally-published">\n    <group delimiter=", ">\n      <group delimiter=": ">\n        <text variable="original-publisher-place"/>\n        <text variable="original-publisher"/>\n      </group>\n      <choose>\n        <if is-uncertain-date="original-date">\n          <date variable="original-date" form="numeric" date-parts="year" prefix="[" suffix="?]"/>\n        </if>\n        <else>\n          <date variable="original-date" form="numeric" date-parts="year"/>\n        </else>\n      </choose>\n    </group>\n  </macro>\n  <macro name="reprint-note">\n    \x3c!--needs localization--\x3e\n    <choose>\n      <if variable="original-date issued" match="all">\n        <choose>\n          \x3c!--for whatever reason in notes, when we have both original and new publishers, reprint doesn\'t appear--\x3e\n          <if variable="original-publisher original-publisher-place" match="none">\n            <text value="repr."/>\n          </if>\n        </choose>\n      </if>\n    </choose>\n  </macro>\n  <macro name="reprint">\n    \x3c!--needs localization--\x3e\n    <choose>\n      <if variable="original-date issued" match="all">\n        <text value="reprint" text-case="capitalize-first"/>\n      </if>\n    </choose>\n  </macro>\n  <macro name="publisher">\n    <choose>\n      <if type="thesis">\n        <text variable="publisher"/>\n      </if>\n      <else-if type="speech">\n        <text variable="event-place"/>\n      </else-if>\n      <else>\n        <group delimiter=": ">\n          <text variable="publisher-place"/>\n          <text variable="publisher"/>\n        </group>\n      </else>\n    </choose>\n  </macro>\n  <macro name="issued">\n    <choose>\n      <if variable="issued">\n        <choose>\n          <if type="legal_case">\n            <group delimiter=" ">\n              <text variable="authority"/>\n              <choose>\n                <if variable="container-title" match="any">\n                  \x3c!--Only print year for cases published in reporters--\x3e\n                  <date variable="issued" form="numeric" date-parts="year"/>\n                </if>\n                <else>\n                  <date variable="issued" form="text"/>\n                </else>\n              </choose>\n            </group>\n          </if>\n          <else-if type="book bill chapter  legislation motion_picture paper-conference song thesis" match="any">\n            <choose>\n              <if is-uncertain-date="issued">\n                <date variable="issued" form="numeric" date-parts="year" prefix="[" suffix="?]"/>\n              </if>\n              <else>\n                <date variable="issued" form="numeric" date-parts="year"/>\n              </else>\n            </choose>\n          </else-if>\n          <else-if type="patent">\n            <group delimiter=", ">\n              <group delimiter=" ">\n                \x3c!--Needs Localization--\x3e\n                <text value="filed"/>\n                <date variable="submitted" form="text"/>\n              </group>\n              <group delimiter=" ">\n                <choose>\n                  <if variable="issued submitted" match="all">\n                    <text term="and"/>\n                  </if>\n                </choose>\n                \x3c!--Needs Localization--\x3e\n                <text value="issued"/>\n                <date variable="issued" form="text"/>\n              </group>\n            </group>\n          </else-if>\n          <else>\n            <choose>\n              <if is-uncertain-date="issued">\n                <date variable="issued" form="text" prefix="[" suffix="?]"/>\n              </if>\n              <else>\n                <date variable="issued" form="text"/>\n              </else>\n            </choose>\n          </else>\n        </choose>\n      </if>\n      <else-if variable="status">\n        <text variable="status"/>\n      </else-if>\n      <else-if variable="accessed URL" match="all"/>\n      <else>\n        <text term="no date" form="short"/>\n      </else>\n    </choose>\n  </macro>\n  <macro name="point-locators-subsequent">\n    <choose>\n      <if type="legal_case" variable="locator" match="all">\n        <choose>\n          <if locator="page">\n            <group delimiter=":">\n              <text variable="volume"/>\n              <text variable="locator"/>\n            </group>\n          </if>\n          <else>\n            <group delimiter=" ">\n              <label variable="locator" form="short"/>\n              <text variable="locator"/>\n            </group>\n          </else>\n        </choose>\n      </if>\n      <else-if variable="locator">\n        <choose>\n          <if locator="page" match="none">\n            <group delimiter=" ">\n              <choose>\n                <if type="book graphic motion_picture report song" match="any">\n                  <choose>\n                    <if variable="volume">\n                      <group delimiter=", ">\n                        <group delimiter=" ">\n                          <text term="volume" form="short"/>\n                          <number variable="volume" form="numeric"/>\n                        </group>\n                        <label variable="locator" form="short"/>\n                      </group>\n                    </if>\n                    <else>\n                      <label variable="locator" form="short"/>\n                    </else>\n                  </choose>\n                </if>\n                <else>\n                  <label variable="locator" form="short"/>\n                </else>\n              </choose>\n              <text variable="locator"/>\n            </group>\n          </if>\n          <else-if type="book graphic motion_picture report song" match="any">\n            <group delimiter=":">\n              <number variable="volume" form="numeric"/>\n              <text variable="locator"/>\n            </group>\n          </else-if>\n          <else>\n            <text variable="locator"/>\n          </else>\n        </choose>\n      </else-if>\n    </choose>\n  </macro>\n  <macro name="point-locators-join-with-colon">\n    <choose>\n      <if type="article-journal">\n        <choose>\n          <if variable="locator page" match="any">\n            <choose>\n              <if variable="volume issue" match="any">\n                <text macro="point-locators"/>\n              </if>\n            </choose>\n          </if>\n        </choose>\n      </if>\n    </choose>\n  </macro>\n  <macro name="point-locators-join-with-comma">\n    <choose>\n      <if type="article-journal" match="none">\n        <text macro="point-locators"/>\n      </if>\n      <else-if variable="volume issue" match="none">\n        <text macro="point-locators"/>\n      </else-if>\n    </choose>\n  </macro>\n  <macro name="point-locators">\n    <choose>\n      <if variable="locator" match="none">\n        <choose>\n          <if type="article-journal chapter paper-conference" match="any">\n            <text variable="page"/>\n          </if>\n        </choose>\n      </if>\n      <else-if type="article-journal">\n        <group delimiter=" ">\n          <choose>\n            <if locator="page" match="none">\n              <label variable="locator" form="short" suffix=" "/>\n            </if>\n          </choose>\n          <text variable="locator"/>\n        </group>\n      </else-if>\n      <else-if type="legal_case"/>\n      <else>\n        <group delimiter=" ">\n          <choose>\n            <if locator="page" match="none">\n              <label variable="locator" form="short"/>\n            </if>\n          </choose>\n          <text variable="locator"/>\n        </group>\n      </else>\n    </choose>\n  </macro>\n  <macro name="locators-chapter">\n    <choose>\n      <if type="chapter entry-dictionary entry-encyclopedia paper-conference" match="any">\n        <choose>\n          <if variable="author container-author" match="all"/>\n          <else>\n            <choose>\n              <if variable="page">\n                <text variable="volume" suffix=":"/>\n                <text variable="page"/>\n              </if>\n            </choose>\n          </else>\n        </choose>\n      </if>\n    </choose>\n  </macro>\n  <macro name="locators-journal-join-with-colon">\n    <choose>\n      <if type="article-journal">\n        <choose>\n          <if variable="volume issue" match="any">\n            <text variable="page"/>\n          </if>\n        </choose>\n      </if>\n    </choose>\n  </macro>\n  <macro name="locators-journal-join-with-comma">\n    <choose>\n      <if type="article-journal">\n        <choose>\n          <if variable="volume issue" match="none">\n            <text variable="page"/>\n          </if>\n        </choose>\n      </if>\n    </choose>\n  </macro>\n  <macro name="archive-note">\n    <choose>\n      <if type="thesis">\n        <group delimiter=" ">\n          <text variable="archive"/>\n          <text variable="archive_location" prefix="(" suffix=")"/>\n        </group>\n      </if>\n      <else>\n        <group delimiter=", ">\n          <text variable="archive_location"/>\n          <text variable="archive"/>\n          <text variable="archive-place"/>\n        </group>\n      </else>\n    </choose>\n  </macro>\n  <macro name="archive">\n    <choose>\n      <if type="thesis">\n        <group delimiter=" ">\n          <text variable="archive"/>\n          <text variable="archive_location" prefix="(" suffix=")"/>\n        </group>\n      </if>\n      <else>\n        <group delimiter=". ">\n          <text variable="archive_location" text-case="capitalize-first"/>\n          <text variable="archive"/>\n          <text variable="archive-place"/>\n        </group>\n      </else>\n    </choose>\n  </macro>\n  <macro name="issue-note-join-with-space">\n    <choose>\n      <if type="article-journal bill legislation legal_case manuscript thesis" variable="publisher-place event-place publisher" match="any">\n        \x3c!--Chicago doesn\'t use publisher/place for Newspapers and we want the date delimited by a comma--\x3e\n        <choose>\n          <if type="article-newspaper" match="none">\n            <choose>\n              <if type="article-journal" match="none">\n                <text macro="issue-note"/>\n              </if>\n              <else-if variable="issue volume" match="any">\n                <text macro="issue-note"/>\n              </else-if>\n            </choose>\n          </if>\n        </choose>\n      </if>\n    </choose>\n  </macro>\n  <macro name="issue-note-join-with-comma">\n    <choose>\n      <if type="article-journal bill legislation legal_case manuscript speech thesis" variable="publisher-place publisher" match="none">\n        <text macro="issue-note"/>\n      </if>\n      <else-if type="article-newspaper">\n        <text macro="issue-note"/>\n      </else-if>\n      <else-if type="article-journal">\n        <choose>\n          <if variable="volume issue" match="none">\n            <text macro="issue-note"/>\n          </if>\n        </choose>\n      </else-if>\n    </choose>\n  </macro>\n  <macro name="issue-map-graphic">\n    \x3c!--See CMoS 17th ed. 14.235 and 14.237--\x3e\n    <choose>\n      <if type="graphic map" match="any">\n        <choose>\n          <if variable="publisher publisher-place" match="none">\n            <text macro="issued"/>\n          </if>\n        </choose>\n      </if>\n    </choose>\n  </macro>\n  <macro name="issue-note">\n    <choose>\n      <if type="bill legislation legal_case" match="any">\n        <text macro="issued" prefix="(" suffix=")"/>\n      </if>\n      <else-if type="article-journal">\n        <choose>\n          <if variable="volume issue" match="any">\n            <text macro="issued" prefix="(" suffix=")"/>\n          </if>\n          <else>\n            <text macro="issued"/>\n          </else>\n        </choose>\n      </else-if>\n      <else-if type="article-newspaper">\n        <text macro="issued"/>\n      </else-if>\n      <else-if type="manuscript thesis speech" match="any">\n        <group delimiter=", " prefix="(" suffix=")">\n          <choose>\n            <if variable="title" match="any">\n              <text variable="genre"/>\n            </if>\n          </choose>\n          <text variable="event"/>\n          <text variable="event-place"/>\n          <text variable="publisher"/>\n          <text macro="issued"/>\n        </group>\n      </else-if>\n      <else-if variable="publisher-place event-place publisher" match="any">\n        <group prefix="(" suffix=")" delimiter=", ">\n          <text macro="event-note"/>\n          <group delimiter="; ">\n            <text macro="originally-published"/>\n            <group delimiter=", ">\n              <text macro="reprint-note"/>\n              <text macro="publisher"/>\n            </group>\n          </group>\n          <text macro="issued"/>\n        </group>\n      </else-if>\n      <else>\n        <text macro="issued"/>\n      </else>\n    </choose>\n  </macro>\n  <macro name="issue-join-with-space">\n    <choose>\n      <if type="article-journal" match="any">\n        <choose>\n          <if variable="issue volume" match="any">\n            <text macro="issue"/>\n          </if>\n        </choose>\n      </if>\n      <else-if type="bill legislation legal_case" match="any">\n        <text macro="issue"/>\n      </else-if>\n    </choose>\n  </macro>\n  <macro name="issue-join-with-period">\n    <choose>\n      <if type="article-journal bill legislation legal_case" match="none">\n        <choose>\n          \x3c!-- We need a perdiod here when the container title gets moved up into author position, otherwise a comma (below)--\x3e\n          <if type="article-newspaper article-magazine" match="any">\n            <choose>\n              <if variable="author editor" match="none">\n                <text macro="issue"/>\n              </if>\n            </choose>\n          </if>\n          <else-if type="speech" variable="publisher publisher-place" match="any">\n            <text macro="issue"/>\n          </else-if>\n        </choose>\n      </if>\n    </choose>\n  </macro>\n  <macro name="issue-join-with-comma">\n    <choose>\n      <if type="bill legislation legal_case" match="none">\n        <choose>\n          <if type="article-journal" match="none">\n            <choose>\n              <if type="article-newspaper article-magazine" match="any">\n                <choose>\n                  <if variable="author editor" match="any">\n                    <text macro="issue"/>\n                  </if>\n                </choose>\n              </if>\n              <else-if type="speech" variable="publisher publisher-place" match="none">\n                <text macro="issue"/>\n              </else-if>\n            </choose>\n          </if>\n          <else-if variable="volume issue" match="none">\n            <text macro="issue"/>\n          </else-if>\n        </choose>\n      </if>\n    </choose>\n  </macro>\n  <macro name="issue">\n    <choose>\n      <if type="bill legislation legal_case" match="any">\n        <text macro="issued" prefix="(" suffix=")"/>\n      </if>\n      <else-if type="article-journal">\n        <choose>\n          <if variable="issue volume" match="any">\n            <text macro="issued" prefix="(" suffix=")"/>\n          </if>\n          <else>\n            <text macro="issued"/>\n          </else>\n        </choose>\n      </else-if>\n      <else-if type="speech">\n        <group delimiter=", ">\n          <group delimiter=" ">\n            <choose>\n              <if variable="title" match="none"/>\n              <else>\n                <text variable="genre" text-case="capitalize-first"/>\n              </else>\n            </choose>\n            <text macro="event"/>\n          </group>\n          <text variable="event-place"/>\n          <text macro="issued"/>\n        </group>\n      </else-if>\n      \x3c!--Chicago doesn\'t use publisher/place for Newspapers --\x3e\n      <else-if type="article-newspaper">\n        <text macro="issued"/>\n      </else-if>\n      <else-if variable="publisher-place publisher" match="any">\n        <group delimiter=", ">\n          <choose>\n            <if type="thesis">\n              <text variable="genre" text-case="capitalize-first"/>\n            </if>\n          </choose>\n          <group delimiter=". ">\n            <text macro="originally-published"/>\n            <group delimiter=", ">\n              <text macro="reprint"/>\n              <text macro="publisher"/>\n            </group>\n          </group>\n          <text macro="issued"/>\n        </group>\n      </else-if>\n      \x3c!--location for data for maps and artwork is different--\x3e\n      <else-if type="graphic map" match="none">\n        <text macro="issued"/>\n      </else-if>\n    </choose>\n  </macro>\n  <macro name="access-note">\n    <group delimiter=", ">\n      <choose>\n        <if type="graphic report" match="any">\n          <text macro="archive-note"/>\n        </if>\n        <else-if type="article-journal bill book chapter legal_case legislation motion_picture paper-conference" match="none">\n          <text macro="archive-note"/>\n        </else-if>\n      </choose>\n      <choose>\n        <if variable="issued" match="none">\n          <group delimiter=" ">\n            <text term="accessed"/>\n            <date variable="accessed" form="text"/>\n          </group>\n        </if>\n      </choose>\n      <choose>\n        <if type="legal_case" match="none">\n          <choose>\n            <if variable="DOI">\n              <text variable="DOI" prefix="https://doi.org/"/>\n            </if>\n            <else>\n              <text variable="URL"/>\n            </else>\n          </choose>\n        </if>\n      </choose>\n    </group>\n  </macro>\n  <macro name="access">\n    <group delimiter=". ">\n      <choose>\n        <if type="graphic report" match="any">\n          <text macro="archive"/>\n        </if>\n        <else-if type="article-journal bill book chapter legal_case legislation motion_picture paper-conference" match="none">\n          <text macro="archive"/>\n        </else-if>\n      </choose>\n      <choose>\n        <if variable="issued" match="none">\n          <group delimiter=" ">\n            <text term="accessed" text-case="capitalize-first"/>\n            <date variable="accessed" form="text"/>\n          </group>\n        </if>\n      </choose>\n      <choose>\n        <if type="legal_case" match="none">\n          <choose>\n            <if variable="DOI">\n              <text variable="DOI" prefix="https://doi.org/"/>\n            </if>\n            <else>\n              <text variable="URL"/>\n            </else>\n          </choose>\n        </if>\n      </choose>\n    </group>\n  </macro>\n  <macro name="case-locator-subsequent">\n    <choose>\n      <if type="legal_case">\n        <group delimiter=" ">\n          <text variable="volume"/>\n          <text variable="container-title"/>\n        </group>\n      </if>\n    </choose>\n  </macro>\n  <macro name="case-pinpoint-subsequent">\n    <choose>\n      <if type="legal_case">\n        <group delimiter=" ">\n          <choose>\n            <if locator="page">\n              <text term="at"/>\n              <text variable="locator"/>\n            </if>\n            <else>\n              <label variable="locator"/>\n              <text variable="locator"/>\n            </else>\n          </choose>\n        </group>\n      </if>\n    </choose>\n  </macro>\n  <citation et-al-min="4" et-al-use-first="1" disambiguate-add-names="true">\n    <layout suffix="." delimiter="; ">\n      <choose>\n        <if position="ibid ibid-with-locator" match="any">\n          <group delimiter=", ">\n            <text macro="contributors-short"/>\n            <group delimiter=" ">\n              <group delimiter=", ">\n                <choose>\n                  <if variable="author editor translator" match="none">\n                    <text macro="title-short"/>\n                  </if>\n                </choose>\n                <text macro="case-locator-subsequent"/>\n              </group>\n              <text macro="case-pinpoint-subsequent"/>\n            </group>\n            <choose>\n              <if match="none" type="legal_case">\n                <text macro="point-locators-subsequent"/>\n              </if>\n            </choose>\n          </group>\n        </if>\n        <else>\n          <group delimiter=", ">\n            <text macro="contributors-short"/>\n            <group delimiter=" ">\n              <group delimiter=", ">\n                <text macro="title-short"/>\n                \x3c!--if title & author are the same: --\x3e\n                <text macro="date-disambiguate"/>\n                <text macro="case-locator-subsequent"/>\n              </group>\n              <text macro="case-pinpoint-subsequent"/>\n            </group>\n            <choose>\n              <if match="none" type="legal_case">\n                <text macro="point-locators-subsequent"/>\n              </if>\n            </choose>\n          </group>\n        </else>\n      </choose>\n    </layout>\n  </citation>\n  <bibliography hanging-indent="true" et-al-min="11" et-al-use-first="7" subsequent-author-substitute="&#8212;&#8212;&#8212;" entry-spacing="0">\n    <sort>\n      <key macro="contributors-sort"/>\n      <key variable="title"/>\n      <key variable="genre"/>\n      <key variable="issued"/>\n    </sort>\n    <layout suffix=".">\n      <group delimiter=". ">\n        <group delimiter=": ">\n          <group delimiter=", ">\n            <group delimiter=" ">\n              <group delimiter=". ">\n                <group delimiter=" ">\n                  <group delimiter=", ">\n                    <group delimiter=". ">\n                      <group delimiter=". ">\n                        <text macro="contributors"/>\n                        <text macro="title"/>\n                        <text macro="issue-map-graphic"/>\n                      </group>\n                      <text macro="description"/>\n                      <text macro="secondary-contributors"/>\n                      <group delimiter=", ">\n                        <text macro="container-title"/>\n                        <text macro="container-contributors"/>\n                      </group>\n                      <text macro="locators-join-with-period"/>\n                    </group>\n                    <text macro="locators-join-with-comma"/>\n                    <text macro="locators-chapter"/>\n                  </group>\n                  <text macro="locators-join-with-space"/>\n                </group>\n                <text macro="collection-title"/>\n                <text macro="issue-join-with-period"/>\n              </group>\n              <text macro="issue-join-with-space"/>\n            </group>\n            <text macro="issue-join-with-comma"/>\n            <text macro="locators-journal-join-with-comma"/>\n            <text macro="locators-newspaper"/>\n          </group>\n          <text macro="locators-journal-join-with-colon"/>\n        </group>\n        <text macro="access"/>\n      </group>\n    </layout>\n  </bibliography>\n</style>',
    elsevierHarvardWithoutTitles =
        '<?xml version="1.0" encoding="utf-8"?>\n<style xmlns="http://purl.org/net/xbiblio/csl" class="in-text" version="1.0" demote-non-dropping-particle="sort-only" default-locale="en-US">\n  <info>\n    <title>Elsevier - Harvard (without titles)</title>\n    <id>http://www.zotero.org/styles/elsevier-harvard-without-titles</id>\n    <link href="http://www.zotero.org/styles/elsevier-harvard-without-titles" rel="self"/>\n    <link href="http://www.zotero.org/styles/elsevier-harvard" rel="template"/>\n    <link href="http://www.elsevier.com/journals/biosensors-and-bioelectronics/0956-5663/guide-for-authors#68000" rel="documentation"/>\n    <author>\n      <name>David Kaplan</name>\n      <email>david.kaplan@ird.fr</email>\n    </author>\n    <contributor>\n      <name>Simon Kornblith</name>\n      <email>simon@simonster.com</email>\n    </contributor>\n    <contributor>\n      <name>Bruce D\'Arcus</name>\n    </contributor>\n    <contributor>\n      <name>Curtis M. Humphrey</name>\n    </contributor>\n    <contributor>\n      <name>Richard Karnesky</name>\n      <email>karnesky+zotero@gmail.com</email>\n      <uri>http://arc.nucapt.northwestern.edu/Richard_Karnesky</uri>\n    </contributor>\n    <contributor>\n      <name>Sebastian Karcher</name>\n    </contributor>\n    <category citation-format="author-date"/>\n    <category field="biology"/>\n    <category field="generic-base"/>\n    <updated>2012-09-27T22:06:38+00:00</updated>\n    <rights license="http://creativecommons.org/licenses/by-sa/3.0/">This work is licensed under a Creative Commons Attribution-ShareAlike 3.0 License</rights>\n  </info>\n  <macro name="container">\n    <choose>\n      <if type="chapter paper-conference" match="any">\n        <text term="in" prefix=", " suffix=": "/>\n        <names variable="editor translator" delimiter=", " suffix=", ">\n          <name name-as-sort-order="all" sort-separator=", " initialize-with="." delimiter=", " delimiter-precedes-last="always"/>\n          <label form="short" text-case="capitalize-first" prefix=" (" suffix=")"/>\n        </names>\n        <group delimiter=", ">\n          <text variable="container-title" text-case="title"/>\n          <text variable="collection-title" text-case="title"/>\n        </group>\n      </if>\n      <else-if type="bill book graphic legal_case legislation motion_picture report song" match="any">\n        <group prefix=", " delimiter=", ">\n          <text variable="container-title"/>\n          <text variable="collection-title"/>\n        </group>\n      </else-if>\n      <else-if type="article-journal article-magazine article-newspaper" match="none">\n        <group prefix=". " delimiter=", ">\n          <text variable="container-title" form="short"/>\n          <text variable="collection-title"/>\n        </group>\n      </else-if>\n      <else>\n        <group delimiter=", ">\n          <text variable="container-title" form="short"/>\n          <text variable="collection-title"/>\n        </group>\n      </else>\n    </choose>\n  </macro>\n  <macro name="author">\n    <names variable="author">\n      <name name-as-sort-order="all" sort-separator=", " initialize-with="." delimiter=", " delimiter-precedes-last="always"/>\n      <label form="short" prefix=" (" suffix=")" text-case="capitalize-first"/>\n      <substitute>\n        <names variable="editor"/>\n        <names variable="translator"/>\n        <text macro="title"/>\n      </substitute>\n    </names>\n  </macro>\n  <macro name="author-short">\n    <names variable="author">\n      <name form="short" and="text" delimiter=", " initialize-with=". "/>\n      <substitute>\n        <names variable="editor"/>\n        <names variable="translator"/>\n        <choose>\n          <if type="bill book graphic legal_case legislation motion_picture report song" match="any">\n            <text variable="title" form="short" font-style="italic"/>\n          </if>\n          <else>\n            <text variable="title" form="short" quotes="true"/>\n          </else>\n        </choose>\n      </substitute>\n    </names>\n  </macro>\n  <macro name="access">\n    <choose>\n      <if type="webpage">\n        <group delimiter=" ">\n          <text value="URL"/>\n          <text variable="URL"/>\n          <group prefix="(" suffix=").">\n            <text term="accessed" suffix=" "/>\n            <date variable="accessed">\n              <date-part name="month" form="numeric" suffix="."/>\n              <date-part name="day" suffix="."/>\n              <date-part name="year" form="short"/>\n            </date>\n          </group>\n        </group>\n      </if>\n    </choose>\n  </macro>\n  <macro name="title">\n    <choose>\n      <if type="report thesis" match="any">\n        <text variable="title"/>\n        <group prefix=" (" suffix=")">\n          <text variable="genre"/>\n          <text variable="number" prefix=" No. "/>\n        </group>\n      </if>\n      <else-if type="bill book graphic legal_case legislation motion_picture report song speech" match="any">\n        <text variable="title"/>\n        <text macro="edition" prefix=", "/>\n      </else-if>\n      <else-if type="webpage">\n        <text variable="title"/>\n        <text value="WWW Document" prefix=" [" suffix="]"/>\n      </else-if>\n      <else-if type="article-journal article-magazine article-newspaper" match="none">\n        <text variable="title"/>\n      </else-if>\n    </choose>\n  </macro>\n  <macro name="publisher">\n    <group delimiter=", ">\n      <text variable="publisher"/>\n      <text variable="publisher-place"/>\n    </group>\n  </macro>\n  <macro name="event">\n    <choose>\n      <if variable="event">\n        <text term="presented at" text-case="capitalize-first" suffix=" "/>\n        <text variable="event"/>\n      </if>\n    </choose>\n  </macro>\n  <macro name="issued">\n    <choose>\n      <if variable="issued">\n        <date variable="issued">\n          <date-part name="year"/>\n        </date>\n      </if>\n      <else>\n        <text term="no date" form="short"/>\n      </else>\n    </choose>\n  </macro>\n  <macro name="edition">\n    <group delimiter=" ">\n      <choose>\n        <if is-numeric="edition">\n          <number variable="edition" form="ordinal"/>\n        </if>\n        <else>\n          <text variable="edition" suffix="."/>\n        </else>\n      </choose>\n      <text value="ed"/>\n    </group>\n  </macro>\n  <macro name="locators">\n    <choose>\n      <if type="article-journal article-magazine article-newspaper" match="any">\n        <group prefix=" " delimiter=", ">\n          <group>\n            <text variable="volume"/>\n          </group>\n          <text variable="page"/>\n        </group>\n      </if>\n      <else-if type="bill book graphic legal_case legislation motion_picture report song thesis" match="any">\n        <group delimiter=", " prefix=". ">\n          <text macro="event"/>\n          <text macro="publisher"/>\n        </group>\n      </else-if>\n      <else-if type="chapter paper-conference" match="any">\n        <group delimiter=", " prefix=". ">\n          <text macro="event"/>\n          <text macro="publisher"/>\n          <group>\n            <label variable="page" form="short" suffix=" "/>\n            <text variable="page"/>\n          </group>\n        </group>\n      </else-if>\n      <else-if type="patent">\n        <text variable="number" prefix=". "/>\n      </else-if>\n    </choose>\n  </macro>\n  <citation et-al-min="3" et-al-use-first="1" disambiguate-add-givenname="true" disambiguate-add-year-suffix="true" collapse="year" cite-group-delimiter=", ">\n    <sort>\n      <key macro="author"/>\n      <key macro="issued" sort="descending"/>\n    </sort>\n    <layout prefix="(" suffix=")" delimiter="; ">\n      <group delimiter=", ">\n        <text macro="author-short"/>\n        <text macro="issued"/>\n        <group delimiter=" ">\n          <label variable="locator" form="short"/>\n          <text variable="locator"/>\n        </group>\n      </group>\n    </layout>\n  </citation>\n  <bibliography hanging-indent="true" entry-spacing="0" line-spacing="1">\n    <sort>\n      <key macro="author"/>\n      <key macro="issued" sort="ascending"/>\n    </sort>\n    <layout>\n      <group suffix=".">\n        <text macro="author" suffix=","/>\n        <text macro="issued" prefix=" "/>\n        <group prefix=". ">\n          <text macro="title"/>\n          <text macro="container"/>\n          <text macro="locators"/>\n        </group>\n      </group>\n      <text macro="access" prefix=". "/>\n    </layout>\n  </bibliography>\n</style>',
    harvardCiteThemRight =
        '<?xml version="1.0" encoding="utf-8"?>\n<style xmlns="http://purl.org/net/xbiblio/csl" class="in-text" version="1.0" demote-non-dropping-particle="sort-only" default-locale="en-GB">\n  <info>\n    <title>Cite Them Right 12th edition - Harvard</title>\n    <id>http://www.zotero.org/styles/harvard-cite-them-right</id>\n    <link href="http://www.zotero.org/styles/harvard-cite-them-right" rel="self"/>\n    <link href="http://www.zotero.org/styles/harvard-cite-them-right-11th-edition" rel="template"/>\n    <link href="http://www.citethemrightonline.com/" rel="documentation"/>\n    <author>\n      <name>Patrick O\'Brien</name>\n    </author>\n    <category citation-format="author-date"/>\n    <category field="generic-base"/>\n    <summary>Harvard according to Cite Them Right, 11th edition.</summary>\n    <updated>2022-06-27T11:10:37+00:00</updated>\n    <rights license="http://creativecommons.org/licenses/by-sa/3.0/">This work is licensed under a Creative Commons Attribution-ShareAlike 3.0 License</rights>\n  </info>\n  <locale xml:lang="en-GB">\n    <terms>\n      <term name="editor" form="short">\n        <single>ed.</single>\n        <multiple>eds</multiple>\n      </term>\n      <term name="editortranslator" form="verb">edited and translated by</term>\n      <term name="edition" form="short">edn.</term>\n    </terms>\n  </locale>\n  <macro name="editor">\n    <choose>\n      <if type="chapter paper-conference" match="any">\n        <names variable="container-author" delimiter=", " suffix=", ">\n          <name and="text" initialize-with=". " delimiter=", " sort-separator=", " name-as-sort-order="all"/>\n        </names>\n        <choose>\n          <if variable="container-author" match="none">\n            <names variable="editor translator" delimiter=", ">\n              <name and="text" initialize-with="."/>\n              <label form="short" prefix=" (" suffix=")"/>\n            </names>\n          </if>\n        </choose>\n      </if>\n    </choose>\n  </macro>\n  <macro name="secondary-contributors">\n    <choose>\n      <if type="chapter paper-conference" match="none">\n        <names variable="editor translator" delimiter=". ">\n          <label form="verb" text-case="capitalize-first" suffix=" "/>\n          <name and="text" initialize-with="."/>\n        </names>\n      </if>\n      <else-if variable="container-author" match="any">\n        <names variable="editor translator" delimiter=". ">\n          <label form="verb" text-case="capitalize-first" suffix=" "/>\n          <name and="text" initialize-with=". " delimiter=", "/>\n        </names>\n      </else-if>\n    </choose>\n  </macro>\n  <macro name="author">\n    <names variable="author">\n      <name and="text" delimiter-precedes-last="never" initialize-with="." name-as-sort-order="all"/>\n      <label form="short" prefix=" (" suffix=")"/>\n      <et-al font-style="italic"/>\n      <substitute>\n        <names variable="editor"/>\n        <names variable="translator"/>\n        <choose>\n          <if type="article-newspaper article-magazine" match="any">\n            <text variable="container-title" text-case="title" font-style="italic"/>\n          </if>\n          <else>\n            <text macro="title"/>\n          </else>\n        </choose>\n      </substitute>\n    </names>\n  </macro>\n  <macro name="author-short">\n    <names variable="author">\n      <name form="short" and="text" delimiter=", " delimiter-precedes-last="never" initialize-with=". "/>\n      <et-al font-style="italic"/>\n      <substitute>\n        <names variable="editor"/>\n        <names variable="translator"/>\n        <choose>\n          <if type="article-newspaper article-magazine" match="any">\n            <text variable="container-title" text-case="title" font-style="italic"/>\n          </if>\n          <else>\n            <text macro="title"/>\n          </else>\n        </choose>\n      </substitute>\n    </names>\n  </macro>\n  <macro name="access">\n    <choose>\n      <if variable="DOI">\n        <group delimiter=": ">\n          <text term="available at" text-case="capitalize-first"/>\n          <text variable="DOI" prefix="https://doi.org/"/>\n        </group>\n      </if>\n      <else-if variable="URL">\n        <text term="available at" suffix=": " text-case="capitalize-first"/>\n        <text variable="URL"/>\n        <group prefix=" (" delimiter=": " suffix=")">\n          <text term="accessed" text-case="capitalize-first"/>\n          <date form="text" variable="accessed">\n            <date-part name="day"/>\n            <date-part name="month"/>\n            <date-part name="year"/>\n          </date>\n        </group>\n      </else-if>\n    </choose>\n  </macro>\n  <macro name="number-volumes">\n    <choose>\n      <if variable="volume" match="none">\n        <group delimiter=" " prefix="(" suffix=")">\n          <text variable="number-of-volumes"/>\n          <label variable="volume" form="short" strip-periods="true"/>\n        </group>\n      </if>\n    </choose>\n  </macro>\n  <macro name="title">\n    <choose>\n      <if type="bill book legal_case legislation motion_picture report song thesis webpage graphic" match="any">\n        <group delimiter=". ">\n          <group delimiter=" ">\n            <group delimiter=" ">\n              <text variable="title" font-style="italic"/>\n              <text variable="medium" prefix="[" suffix="]"/>\n            </group>\n            <text macro="number-volumes"/>\n          </group>\n          <text macro="edition"/>\n        </group>\n      </if>\n      <else>\n        <text variable="title" form="long" quotes="true"/>\n      </else>\n    </choose>\n  </macro>\n  <macro name="publisher">\n    <choose>\n      <if type="thesis">\n        <group delimiter=". ">\n          <text variable="genre"/>\n          <text variable="publisher"/>\n        </group>\n      </if>\n      <else-if type="report">\n        <group delimiter=". ">\n          <group delimiter=" ">\n            <text variable="genre"/>\n            <text variable="number"/>\n          </group>\n          <group delimiter=": ">\n            <text variable="publisher-place"/>\n            <text variable="publisher"/>\n          </group>\n        </group>\n      </else-if>\n      <else-if type="article-journal article-newspaper article-magazine" match="none">\n        <group delimiter=" ">\n          <group delimiter=", ">\n            <choose>\n              <if type="speech" variable="event" match="any">\n                <text variable="event" font-style="italic"/>\n              </if>\n            </choose>\n            <group delimiter=": ">\n              <text variable="publisher-place"/>\n              <text variable="publisher"/>\n            </group>\n          </group>\n          <group prefix="(" suffix=")" delimiter=", ">\n            <text variable="collection-title"/>\n            <text variable="collection-number"/>\n          </group>\n        </group>\n      </else-if>\n    </choose>\n  </macro>\n  <macro name="year-date">\n    <choose>\n      <if variable="issued">\n        <date variable="issued">\n          <date-part name="year"/>\n        </date>\n        <text variable="year-suffix"/>\n      </if>\n      <else>\n        <text term="no date"/>\n        <text variable="year-suffix" prefix=" "/>\n      </else>\n    </choose>\n  </macro>\n  <macro name="locator">\n    <choose>\n      <if type="article-journal">\n        <text variable="volume"/>\n        <text variable="issue" prefix="(" suffix=")"/>\n      </if>\n    </choose>\n  </macro>\n  <macro name="published-date">\n    <choose>\n      <if type="article-newspaper article-magazine post-weblog speech" match="any">\n        <date variable="issued">\n          <date-part name="day" suffix=" "/>\n          <date-part name="month" form="long"/>\n        </date>\n      </if>\n    </choose>\n  </macro>\n  <macro name="pages">\n    <choose>\n      <if type="chapter paper-conference article-journal article article-magazine article-newspaper book review review-book report" match="any">\n        <group delimiter=" ">\n          <label variable="page" form="short"/>\n          <text variable="page"/>\n        </group>\n      </if>\n    </choose>\n  </macro>\n  <macro name="container-title">\n    <choose>\n      <if variable="container-title">\n        <group delimiter=". ">\n          <group delimiter=" ">\n            <text variable="container-title" font-style="italic"/>\n            <choose>\n              <if type="article article-journal" match="any">\n                <choose>\n                  <if match="none" variable="page volume">\n                    <text value="Preprint" prefix="[" suffix="]"/>\n                  </if>\n                </choose>\n              </if>\n            </choose>\n          </group>\n          <text macro="edition"/>\n        </group>\n      </if>\n    </choose>\n  </macro>\n  <macro name="edition">\n    <choose>\n      <if is-numeric="edition">\n        <group delimiter=" ">\n          <number variable="edition" form="ordinal"/>\n          <text term="edition" form="short" strip-periods="true"/>\n        </group>\n      </if>\n      <else>\n        <text variable="edition"/>\n      </else>\n    </choose>\n  </macro>\n  <macro name="container-prefix">\n    <choose>\n      <if type="chapter paper-conference" match="any">\n        <text term="in"/>\n      </if>\n    </choose>\n  </macro>\n  <citation et-al-min="4" et-al-use-first="1" disambiguate-add-year-suffix="true" disambiguate-add-names="true" disambiguate-add-givenname="true" collapse="year">\n    <sort>\n      <key macro="year-date"/>\n    </sort>\n    <layout prefix="(" suffix=")" delimiter="; ">\n      <group delimiter=", ">\n        <group delimiter=", ">\n          <text macro="author-short"/>\n          <text macro="year-date"/>\n        </group>\n        <group>\n          <label variable="locator" form="short" suffix=" "/>\n          <text variable="locator"/>\n        </group>\n      </group>\n    </layout>\n  </citation>\n  <bibliography and="text" et-al-min="4" et-al-use-first="1">\n    <sort>\n      <key macro="author"/>\n      <key macro="year-date"/>\n      <key variable="title"/>\n    </sort>\n    <layout suffix=".">\n      <group delimiter=". ">\n        <group delimiter=" ">\n          <text macro="author"/>\n          <text macro="year-date" prefix="(" suffix=")"/>\n          <group delimiter=", ">\n            <text macro="title"/>\n            <group delimiter=" ">\n              <text macro="container-prefix"/>\n              <text macro="editor"/>\n              <text macro="container-title"/>\n            </group>\n          </group>\n        </group>\n        <text macro="secondary-contributors"/>\n        <text macro="publisher"/>\n      </group>\n      <group delimiter=", " prefix=", ">\n        <text macro="locator"/>\n        <text macro="published-date"/>\n        <text macro="pages"/>\n      </group>\n      <text macro="access" prefix=". "/>\n    </layout>\n  </bibliography>\n</style>',
    IEEE =
        '<?xml version="1.0" encoding="utf-8"?>\n<style xmlns="http://purl.org/net/xbiblio/csl" class="in-text" version="1.0" demote-non-dropping-particle="sort-only">\n  <info>\n    <title>IEEE</title>\n    <id>http://www.zotero.org/styles/ieee</id>\n    <link href="http://www.zotero.org/styles/ieee" rel="self"/>\n    \x3c!-- <link href="https://ieeeauthorcenter.ieee.org/wp-content/uploads/IEEE-Reference-Guide.pdf" rel="documentation"/> - 2018 guidelines --\x3e\n    <link href="http://journals.ieeeauthorcenter.ieee.org/wp-content/uploads/sites/7/IEEE_Reference_Guide.pdf" rel="documentation"/>\n    <link href="https://journals.ieeeauthorcenter.ieee.org/your-role-in-article-production/ieee-editorial-style-manual/" rel="documentation"/>\n    <author>\n      <name>Michael Berkowitz</name>\n      <email>mberkowi@gmu.edu</email>\n    </author>\n    <contributor>\n      <name>Julian Onions</name>\n      <email>julian.onions@gmail.com</email>\n    </contributor>\n    <contributor>\n      <name>Rintze Zelle</name>\n      <uri>http://twitter.com/rintzezelle</uri>\n    </contributor>\n    <contributor>\n      <name>Stephen Frank</name>\n      <uri>http://www.zotero.org/sfrank</uri>\n    </contributor>\n    <contributor>\n      <name>Sebastian Karcher</name>\n    </contributor>\n    <contributor>\n      <name>Giuseppe Silano</name>\n      <email>g.silano89@gmail.com</email>\n      <uri>http://giuseppesilano.net</uri>\n    </contributor>\n    <contributor>\n      <name>Patrick O\'Brien</name>\n    </contributor>\n    <contributor>\n      <name>Brenton M. Wiernik</name>\n    </contributor>\n    <contributor>\n      <name>Oliver Couch</name>\n      <email>oliver.couch@gmail.com</email>\n    </contributor>\n    <category citation-format="numeric"/>\n    <category field="engineering"/>\n    <category field="generic-base"/>\n    <summary>IEEE style as per the 2021 guidelines, V 01.29.2021.</summary>\n    <updated>2023-04-18T00:52:46+10:00</updated>\n    <rights license="http://creativecommons.org/licenses/by-sa/3.0/">This work is licensed under a Creative Commons Attribution-ShareAlike 3.0 License</rights>\n  </info>\n  <locale xml:lang="en">\n    <date form="text">\n      <date-part name="month" form="short" suffix=" "/>\n      <date-part name="day" form="numeric-leading-zeros" suffix=", "/>\n      <date-part name="year"/>\n    </date>\n    <terms>\n      <term name="chapter" form="short">ch.</term>\n      <term name="presented at">presented at the</term>\n      <term name="available at">available</term>\n    </terms>\n  </locale>\n  \x3c!-- Macros --\x3e\n  <macro name="status">\n    <choose>\n      <if variable="page issue volume" match="none">\n        <text variable="status" text-case="capitalize-first" suffix="" font-weight="bold"/>\n      </if>\n    </choose>\n  </macro>\n  <macro name="edition">\n    <choose>\n      <if type="bill book chapter graphic legal_case legislation motion_picture paper-conference report song" match="any">\n        <choose>\n          <if is-numeric="edition">\n            <group delimiter=" ">\n              <number variable="edition" form="ordinal"/>\n              <text term="edition" form="short"/>\n            </group>\n          </if>\n          <else>\n            <text variable="edition" text-case="capitalize-first" suffix="."/>\n          </else>\n        </choose>\n      </if>\n    </choose>\n  </macro>\n  <macro name="issued">\n    <choose>\n      <if type="article-journal report" match="any">\n        <date variable="issued">\n          <date-part name="month" form="short" suffix=" "/>\n          <date-part name="year" form="long"/>\n        </date>\n      </if>\n      <else-if type="bill book chapter graphic legal_case legislation song thesis" match="any">\n        <date variable="issued">\n          <date-part name="year" form="long"/>\n        </date>\n      </else-if>\n      <else-if type="paper-conference" match="any">\n        <date variable="issued">\n          <date-part name="month" form="short"/>\n          <date-part name="year" prefix=" "/>\n        </date>\n      </else-if>\n      <else-if type="motion_picture" match="any">\n        <date variable="issued" form="text" prefix="(" suffix=")"/>\n      </else-if>\n      <else>\n        <date variable="issued" form="text"/>\n      </else>\n    </choose>\n  </macro>\n  <macro name="author">\n    <names variable="author">\n      <name and="text" et-al-min="7" et-al-use-first="1" initialize-with=". "/>\n      <label form="short" prefix=", " text-case="capitalize-first"/>\n      <et-al font-style="italic"/>\n      <substitute>\n        <names variable="editor"/>\n        <names variable="translator"/>\n      </substitute>\n    </names>\n  </macro>\n  <macro name="editor">\n    <names variable="editor">\n      <name initialize-with=". " delimiter=", " and="text"/>\n      <label form="short" prefix=", " text-case="capitalize-first"/>\n    </names>\n  </macro>\n  <macro name="locators">\n    <group delimiter=", ">\n      <text macro="edition"/>\n      <group delimiter=" ">\n        <text term="volume" form="short"/>\n        <number variable="volume" form="numeric"/>\n      </group>\n      <group delimiter=" ">\n        <number variable="number-of-volumes" form="numeric"/>\n        <text term="volume" form="short" plural="true"/>\n      </group>\n      <group delimiter=" ">\n        <text term="issue" form="short"/>\n        <number variable="issue" form="numeric"/>\n      </group>\n    </group>\n  </macro>\n  <macro name="title">\n    <choose>\n      <if type="bill book graphic legal_case legislation motion_picture song" match="any">\n        <text variable="title" font-style="italic"/>\n      </if>\n      <else>\n        <text variable="title" quotes="true"/>\n      </else>\n    </choose>\n  </macro>\n  <macro name="publisher">\n    <choose>\n      <if type="bill book chapter graphic legal_case legislation motion_picture paper-conference song" match="any">\n        <group delimiter=": ">\n          <text variable="publisher-place"/>\n          <text variable="publisher"/>\n        </group>\n      </if>\n      <else>\n        <group delimiter=", ">\n          <text variable="publisher"/>\n          <text variable="publisher-place"/>\n        </group>\n      </else>\n    </choose>\n  </macro>\n  <macro name="event">\n    <choose>\n      \x3c!-- Published Conference Paper --\x3e\n      <if type="paper-conference speech" match="any">\n        <choose>\n          <if variable="container-title" match="any">\n            <group delimiter=" ">\n              <text term="in"/>\n              <text variable="container-title" font-style="italic"/>\n            </group>\n          </if>\n          \x3c!-- Unpublished Conference Paper --\x3e\n          <else>\n            <group delimiter=" ">\n              <text term="presented at"/>\n              <text variable="event"/>\n            </group>\n          </else>\n        </choose>\n      </if>\n    </choose>\n  </macro>\n  <macro name="access">\n    <choose>\n      <if type="webpage post post-weblog" match="any">\n        \x3c!-- https://url.com/ (accessed Mon. DD, YYYY). --\x3e\n        <choose>\n          <if variable="URL">\n            <group delimiter=". " prefix=" ">\n              <group delimiter=": ">\n                <text term="accessed" text-case="capitalize-first"/>\n                <date variable="accessed" form="text"/>\n              </group>\n              <text term="online" prefix="[" suffix="]" text-case="capitalize-first"/>\n              <group delimiter=": ">\n                <text term="available at" text-case="capitalize-first"/>\n                <text variable="URL"/>\n              </group>\n            </group>\n          </if>\n        </choose>\n      </if>\n      <else-if match="any" variable="DOI">\n        \x3c!-- doi: 10.1000/xyz123. --\x3e\n        <text variable="DOI" prefix=" doi: " suffix="."/>\n      </else-if>\n      <else-if variable="URL">\n        \x3c!-- Accessed: Mon. DD, YYYY. [Medium]. Available: https://URL.com/ --\x3e\n        <group delimiter=". " prefix=" " suffix=". ">\n          \x3c!-- Accessed: Mon. DD, YYYY. --\x3e\n          <group delimiter=": ">\n            <text term="accessed" text-case="capitalize-first"/>\n            <date variable="accessed" form="text"/>\n          </group>\n          \x3c!-- [Online Video]. --\x3e\n          <group prefix="[" suffix="]" delimiter=" ">\n            <choose>\n              <if variable="medium" match="any">\n                <text variable="medium" text-case="capitalize-first"/>\n              </if>\n              <else>\n                <text term="online" text-case="capitalize-first"/>\n                <choose>\n                  <if type="motion_picture">\n                    <text term="video" text-case="capitalize-first"/>\n                  </if>\n                </choose>\n              </else>\n            </choose>\n          </group>\n        </group>\n        \x3c!-- Available: https://URL.com/ --\x3e\n        <group delimiter=": " prefix=" ">\n          <text term="available at" text-case="capitalize-first"/>\n          <text variable="URL"/>\n        </group>\n      </else-if>\n    </choose>\n  </macro>\n  <macro name="page">\n    <choose>\n      <if type="article-journal" variable="number" match="all">\n        <group delimiter=" ">\n          <text value="Art."/>\n          <text term="issue" form="short"/>\n          <text variable="number"/>\n        </group>\n      </if>\n      <else>\n        <group delimiter=" ">\n          <label variable="page" form="short"/>\n          <text variable="page"/>\n        </group>\n      </else>\n    </choose>\n  </macro>\n  <macro name="citation-locator">\n    <group delimiter=" ">\n      <choose>\n        <if locator="page">\n          <label variable="locator" form="short"/>\n        </if>\n        <else>\n          <label variable="locator" form="short" text-case="capitalize-first"/>\n        </else>\n      </choose>\n      <text variable="locator"/>\n    </group>\n  </macro>\n  <macro name="geographic-location">\n    <group delimiter=", " suffix=".">\n      <choose>\n        <if variable="publisher-place">\n          <text variable="publisher-place" text-case="title"/>\n        </if>\n        <else-if variable="event-place">\n          <text variable="event-place" text-case="title"/>\n        </else-if>\n      </choose>\n    </group>\n  </macro>\n  \x3c!-- Series --\x3e\n  <macro name="collection">\n    <choose>\n      <if variable="collection-title" match="any">\n        <text term="in" suffix=" "/>\n        <group delimiter=", " suffix=". ">\n          <text variable="collection-title"/>\n          <text variable="collection-number" prefix="no. "/>\n          <text variable="volume" prefix="vol. "/>\n        </group>\n      </if>\n    </choose>\n  </macro>\n  \x3c!-- Citation --\x3e\n  <citation collapse="citation-number">\n    <sort>\n      <key variable="citation-number"/>\n    </sort>\n    <layout delimiter=", ">\n      <group prefix="[" suffix="]" delimiter=", ">\n        <text variable="citation-number"/>\n        <text macro="citation-locator"/>\n      </group>\n    </layout>\n  </citation>\n  \x3c!-- Bibliography --\x3e\n  <bibliography entry-spacing="0" second-field-align="flush">\n    <layout>\n      \x3c!-- Citation Number --\x3e\n      <text variable="citation-number" prefix="[" suffix="]"/>\n      \x3c!-- Author(s) --\x3e\n      <text macro="author" suffix=", "/>\n      \x3c!-- Rest of Citation --\x3e\n      <choose>\n        \x3c!-- Specific Formats --\x3e\n        <if type="article-journal">\n          <group delimiter=", ">\n            <text macro="title"/>\n            <text variable="container-title" font-style="italic" form="short"/>\n            <text macro="locators"/>\n            <text macro="page"/>\n            <text macro="issued"/>\n            <text macro="status"/>\n          </group>\n          <choose>\n            <if variable="URL DOI" match="none">\n              <text value="."/>\n            </if>\n            <else>\n              <text value=","/>\n            </else>\n          </choose>\n          <text macro="access"/>\n        </if>\n        <else-if type="paper-conference speech" match="any">\n          <group delimiter=", " suffix=", ">\n            <text macro="title"/>\n            <text macro="event"/>\n            <text macro="editor"/>\n          </group>\n          <text macro="collection"/>\n          <group delimiter=", " suffix=".">\n            <text macro="publisher"/>\n            <text macro="issued"/>\n            <text macro="page"/>\n            <text macro="status"/>\n          </group>\n          <text macro="access"/>\n        </else-if>\n        <else-if type="chapter">\n          <group delimiter=", " suffix=".">\n            <text macro="title"/>\n            <group delimiter=" ">\n              <text term="in" suffix=" "/>\n              <text variable="container-title" font-style="italic"/>\n            </group>\n            <text macro="locators"/>\n            <text macro="editor"/>\n            <text macro="collection"/>\n            <text macro="publisher"/>\n            <text macro="issued"/>\n            <text macro="page"/>\n          </group>\n          <text macro="access"/>\n        </else-if>\n        <else-if type="report">\n          <group delimiter=", " suffix=".">\n            <text macro="title"/>\n            <text macro="publisher"/>\n            <group delimiter=" ">\n              <text variable="genre"/>\n              <text variable="number"/>\n            </group>\n            <text macro="issued"/>\n          </group>\n          <text macro="access"/>\n        </else-if>\n        <else-if type="thesis">\n          <group delimiter=", " suffix=".">\n            <text macro="title"/>\n            <text variable="genre"/>\n            <text macro="publisher"/>\n            <text macro="issued"/>\n          </group>\n          <text macro="access"/>\n        </else-if>\n        <else-if type="webpage post-weblog post" match="any">\n          <group delimiter=", " suffix=".">\n            <text macro="title"/>\n            <text variable="container-title"/>\n          </group>\n          <text macro="access"/>\n        </else-if>\n        <else-if type="patent">\n          <group delimiter=", ">\n            <text macro="title"/>\n            <text variable="number"/>\n            <text macro="issued"/>\n          </group>\n          <text macro="access"/>\n        </else-if>\n        \x3c!-- Online Video --\x3e\n        <else-if type="motion_picture">\n          <text macro="geographic-location" suffix=". "/>\n          <group delimiter=", " suffix=".">\n            <text macro="title"/>\n            <text macro="issued"/>\n          </group>\n          <text macro="access"/>\n        </else-if>\n        \x3c!-- Generic/Fallback Formats --\x3e\n        <else-if type="bill book graphic legal_case legislation report song" match="any">\n          <group delimiter=", " suffix=". ">\n            <text macro="title"/>\n            <text macro="locators"/>\n          </group>\n          <text macro="collection"/>\n          <group delimiter=", " suffix=".">\n            <text macro="publisher"/>\n            <text macro="issued"/>\n            <text macro="page"/>\n          </group>\n          <text macro="access"/>\n        </else-if>\n        <else-if type="article-magazine article-newspaper broadcast interview manuscript map patent personal_communication song speech thesis webpage" match="any">\n          <group delimiter=", " suffix=".">\n            <text macro="title"/>\n            <text variable="container-title" font-style="italic"/>\n            <text macro="locators"/>\n            <text macro="publisher"/>\n            <text macro="page"/>\n            <text macro="issued"/>\n          </group>\n          <text macro="access"/>\n        </else-if>\n        <else>\n          <group delimiter=", " suffix=". ">\n            <text macro="title"/>\n            <text variable="container-title" font-style="italic"/>\n            <text macro="locators"/>\n          </group>\n          <text macro="collection"/>\n          <group delimiter=", " suffix=".">\n            <text macro="publisher"/>\n            <text macro="page"/>\n            <text macro="issued"/>\n          </group>\n          <text macro="access"/>\n        </else>\n      </choose>\n    </layout>\n  </bibliography>\n</style>',
    modernHumanitiesResearchAssociation =
        '<?xml version="1.0" encoding="utf-8"?>\n<style xmlns="http://purl.org/net/xbiblio/csl" class="note" version="1.0" demote-non-dropping-particle="sort-only" page-range-format="chicago" default-locale="en-GB">\n  <info>\n    <title>Modern Humanities Research Association 3rd edition (note with bibliography)</title>\n    <title-short>MHRA</title-short>\n    <id>http://www.zotero.org/styles/modern-humanities-research-association</id>\n    <link href="http://www.zotero.org/styles/modern-humanities-research-association" rel="self"/>\n    <link href="http://www.mhra.org.uk/Publications/Books/StyleGuide/download.shtml" rel="documentation"/>\n    <author>\n      <name>Rintze Zelle</name>\n      <uri>http://twitter.com/rintzezelle</uri>\n    </author>\n    <contributor>\n      <name>Sebastian Karcher</name>\n    </contributor>\n    <contributor>\n      <name>Andrew Dunning</name>\n      <uri>https://orcid.org/0000-0003-0464-5036</uri>\n    </contributor>\n    <category citation-format="note"/>\n    <category field="generic-base"/>\n    <summary>MHRA format with full notes and bibliography</summary>\n    <updated>2019-01-07T13:45:21+00:00</updated>\n    <rights license="http://creativecommons.org/licenses/by-sa/3.0/">This work is licensed under a Creative Commons Attribution-ShareAlike 3.0 License</rights>\n  </info>\n  <locale xml:lang="en">\n    <terms>\n      <term name="et-al">and others</term>\n      <term name="editor" form="verb-short">ed. by</term>\n      <term name="edition" form="short">edn</term>\n      <term name="translator" form="verb-short">trans. by</term>\n      <term name="folio">\n        <single>fol.</single>\n        <multiple>fols</multiple>\n      </term>\n    </terms>\n  </locale>\n  <macro name="author">\n    <group delimiter=". ">\n      <names variable="author">\n        <name name-as-sort-order="first" and="text" sort-separator=", " delimiter=", " delimiter-precedes-last="always"/>\n        <label form="short" prefix=", " suffix="."/>\n        <substitute>\n          <names variable="editor"/>\n          <names variable="translator"/>\n          <text macro="title-note"/>\n        </substitute>\n      </names>\n      <text macro="recipient"/>\n    </group>\n  </macro>\n  <macro name="recipient">\n    <group delimiter=" ">\n      <choose>\n        <if type="personal_communication">\n          <choose>\n            <if variable="genre">\n              <text variable="genre" text-case="capitalize-first"/>\n            </if>\n            <else>\n              <text term="letter" text-case="capitalize-first"/>\n            </else>\n          </choose>\n        </if>\n      </choose>\n      <text macro="recipient-note"/>\n    </group>\n  </macro>\n  <macro name="contributors-note">\n    <names variable="author">\n      <name and="text" sort-separator=", " delimiter=", "/>\n      <label form="short" prefix=", "/>\n      <substitute>\n        <text macro="title-note"/>\n      </substitute>\n    </names>\n    <text macro="recipient-note"/>\n  </macro>\n  <macro name="title-note">\n    <choose>\n      <if variable="title" match="none">\n        <text variable="genre"/>\n      </if>\n      <else-if type="bill book graphic legislation motion_picture report song" match="any">\n        <text variable="title" text-case="title" font-style="italic"/>\n        <group delimiter=" " prefix=", ">\n          <text term="version"/>\n          <text variable="version"/>\n        </group>\n      </else-if>\n      <else-if type="legal_case interview" match="any">\n        <text variable="title"/>\n      </else-if>\n      <else-if variable="reviewed-author">\n        <text variable="title" font-style="italic" prefix="review of "/>\n      </else-if>\n      <else>\n        <text variable="title" text-case="title" quotes="true"/>\n      </else>\n    </choose>\n  </macro>\n  <macro name="disambiguate">\n    <choose>\n      <if disambiguate="true">\n        <choose>\n          <if variable="title" match="none">\n            <text macro="issued"/>\n          </if>\n          <else-if type="bill book graphic legal_case legislation motion_picture report song" match="any">\n            <text variable="title" font-style="italic" text-case="title" form="short"/>\n          </else-if>\n          <else>\n            <text variable="title" quotes="true" text-case="title" form="short"/>\n          </else>\n        </choose>\n      </if>\n    </choose>\n  </macro>\n  <macro name="title-sort-substitute">\n    <choose>\n      <if type="bill book graphic legal_case legislation motion_picture report song" match="any">\n        <text variable="title" font-style="italic" text-case="title" form="short"/>\n      </if>\n      <else>\n        <text variable="title" quotes="true" text-case="title" form="short"/>\n      </else>\n    </choose>\n  </macro>\n  <macro name="editor-translator">\n    <group delimiter=", ">\n      <group delimiter=" ">\n        <choose>\n          <if variable="container-author reviewed-author" match="any">\n            <group>\n              <names variable="container-author reviewed-author">\n                <label form="verb-short" text-case="lowercase" suffix=" "/>\n                <name and="text" delimiter=", "/>\n              </names>\n            </group>\n          </if>\n        </choose>\n      </group>\n      <names variable="editor translator director" delimiter=", ">\n        <label form="verb-short" text-case="lowercase" suffix=" "/>\n        <name and="text" delimiter=", "/>\n      </names>\n    </group>\n  </macro>\n  <macro name="secondary-contributors-note">\n    <choose>\n      <if type="chapter paper-conference" match="none">\n        <text macro="editor-translator"/>\n      </if>\n    </choose>\n  </macro>\n  <macro name="container-contributors-note">\n    <choose>\n      <if type="chapter paper-conference" match="any">\n        <text macro="editor-translator"/>\n      </if>\n    </choose>\n  </macro>\n  <macro name="collection-title">\n    <group delimiter=", ">\n      <choose>\n        <if type="article-journal">\n          <text variable="collection-title"/>\n          <text variable="collection-number"/>\n        </if>\n        <else>\n          <text variable="collection-title" text-case="title"/>\n          <text variable="collection-number"/>\n        </else>\n      </choose>\n    </group>\n  </macro>\n  <macro name="locators-note">\n    <choose>\n      <if type="article-journal">\n        <group delimiter=".">\n          <text variable="volume"/>\n          <text variable="issue"/>\n        </group>\n      </if>\n      <else-if type="bill book chapter graphic legal_case legislation motion_picture paper-conference report song" match="any">\n        <group delimiter=", ">\n          <text macro="edition-note"/>\n          <group>\n            <number variable="number-of-volumes" form="numeric"/>\n            <text term="volume" form="short" prefix=" " plural="true"/>\n          </group>\n        </group>\n      </else-if>\n    </choose>\n  </macro>\n  <macro name="volume">\n    <choose>\n      <if type="article-journal">\n        <group delimiter=".">\n          <text variable="volume"/>\n          <text variable="issue"/>\n        </group>\n      </if>\n      <else-if type="bill book chapter graphic legal_case legislation motion_picture paper-conference report song" match="any">\n        <group delimiter=", ">\n          <text macro="edition-note"/>\n          <group>\n            <number variable="number-of-volumes" form="numeric"/>\n            <text term="volume" form="short" prefix=" " plural="true"/>\n          </group>\n        </group>\n      </else-if>\n    </choose>\n  </macro>\n  <macro name="issue-note">\n    <choose>\n      <if type="article-journal">\n        <choose>\n          <if variable="volume">\n            <text macro="issued" prefix=" (" suffix=")"/>\n          </if>\n          <else>\n            <text macro="issued" prefix=", "/>\n          </else>\n        </choose>\n      </if>\n      <else-if variable="publisher-place publisher" match="any">\n        <group prefix=" (" suffix=")" delimiter=", ">\n          <group delimiter=" ">\n            <choose>\n              <if variable="title" match="none"/>\n              <else-if type="thesis speech" match="any">\n                <text variable="genre" prefix="unpublished "/>\n              </else-if>\n            </choose>\n            <text macro="event"/>\n          </group>\n          <text macro="publisher"/>\n          <text macro="issued"/>\n        </group>\n      </else-if>\n      <else>\n        <text macro="issued" prefix=", "/>\n      </else>\n    </choose>\n  </macro>\n  <macro name="locators-specific-note">\n    <choose>\n      <if type="bill book chapter graphic legal_case legislation motion_picture paper-conference report song" match="any">\n        <choose>\n          <if is-numeric="volume">\n            <number variable="volume" form="roman" font-variant="small-caps"/>\n          </if>\n          <else>\n            <text variable="volume" font-variant="small-caps"/>\n          </else>\n        </choose>\n      </if>\n    </choose>\n  </macro>\n  <macro name="container-title-note">\n    <choose>\n      <if type="chapter paper-conference" match="any">\n        <text term="in" suffix=" "/>\n      </if>\n    </choose>\n    <text variable="container-title" text-case="title" font-style="italic"/>\n  </macro>\n  <macro name="edition-note">\n    <choose>\n      <if type="bill book chapter graphic legal_case legislation motion_picture paper-conference report song" match="any">\n        <choose>\n          <if is-numeric="edition">\n            <group delimiter=" ">\n              <number variable="edition" form="ordinal"/>\n              <text term="edition" form="short"/>\n            </group>\n          </if>\n          <else>\n            <text variable="edition"/>\n          </else>\n        </choose>\n      </if>\n    </choose>\n  </macro>\n  <macro name="recipient-note">\n    <names variable="recipient" delimiter=", ">\n      <label form="verb" prefix=" " suffix=" "/>\n      <name and="text" delimiter=", "/>\n    </names>\n  </macro>\n  <macro name="recipient-short">\n    <names variable="recipient">\n      <label form="verb" prefix=" " suffix=" "/>\n      <name form="short" and="text" delimiter=", "/>\n    </names>\n  </macro>\n  <macro name="contributors-short">\n    <names variable="author">\n      <name form="short" and="text" sort-separator=", " delimiter=", "/>\n      <substitute>\n        <names variable="editor"/>\n        <names variable="translator"/>\n        <text macro="title-sort-substitute"/>\n      </substitute>\n    </names>\n    <text macro="recipient-short"/>\n  </macro>\n  <macro name="locators-newspaper">\n    <choose>\n      <if type="article-newspaper">\n        <group delimiter=", ">\n          <group delimiter=" ">\n            <text variable="edition"/>\n            <text term="edition"/>\n          </group>\n          <group>\n            <text term="section" suffix=" "/>\n            <text variable="section"/>\n          </group>\n        </group>\n      </if>\n    </choose>\n  </macro>\n  <macro name="event">\n    <group>\n      <text term="presented at" suffix=" "/>\n      <text variable="event"/>\n    </group>\n  </macro>\n  <macro name="publisher">\n    <choose>\n      <if type="thesis">\n        <text variable="publisher"/>\n      </if>\n      <else>\n        <group delimiter=": ">\n          <text variable="publisher-place"/>\n          <text variable="publisher"/>\n        </group>\n      </else>\n    </choose>\n  </macro>\n  <macro name="issued">\n    <choose>\n      <if type="report article-newspaper article-magazine personal_communication" match="any">\n        <date variable="issued">\n          <date-part name="day" suffix=" "/>\n          <date-part name="month" suffix=" "/>\n          <date-part name="year"/>\n        </date>\n      </if>\n      <else>\n        <date variable="issued">\n          <date-part name="year"/>\n        </date>\n      </else>\n    </choose>\n  </macro>\n  <macro name="pages">\n    <choose>\n      <if type="article-journal">\n        <text variable="page" prefix=", "/>\n      </if>\n      <else>\n        <choose>\n          <if variable="volume">\n            <text variable="page" prefix=", "/>\n          </if>\n          <else>\n            <label variable="page" form="short" prefix=", " suffix=" "/>\n            <text variable="page"/>\n          </else>\n        </choose>\n      </else>\n    </choose>\n  </macro>\n  <macro name="point-locators">\n    <text macro="pages"/>\n    <choose>\n      <if variable="page">\n        <group prefix=" (" suffix=")">\n          <label variable="locator" form="short" suffix=" "/>\n          <text variable="locator"/>\n        </group>\n      </if>\n      <else>\n        <label variable="locator" form="short" prefix=", " suffix=" "/>\n        <text variable="locator"/>\n      </else>\n    </choose>\n  </macro>\n  <macro name="point-locators-subsequent">\n    <label variable="locator" form="short" prefix=", " suffix=" "/>\n    <text variable="locator"/>\n  </macro>\n  <macro name="archive-note">\n    <group delimiter=", ">\n      <text variable="archive-place"/>\n      <text variable="archive"/>\n      <text variable="archive_location"/>\n    </group>\n  </macro>\n  <macro name="access-note">\n    <group delimiter=", ">\n      <choose>\n        <if type="article-journal bill chapter legal_case legislation paper-conference" match="none">\n          <text macro="archive-note" prefix=", "/>\n        </if>\n      </choose>\n    </group>\n    <choose>\n      <if variable="DOI">\n        <text variable="DOI" prefix=" &lt;https://doi.org/" suffix="&gt;"/>\n      </if>\n      <else>\n        <choose>\n          <if variable="URL">\n            <text variable="URL" prefix=" &lt;" suffix="&gt;"/>\n            <group prefix=" [" suffix="]">\n              <text term="accessed"/>\n              <date variable="accessed">\n                <date-part name="day" prefix=" "/>\n                <date-part name="month" prefix=" "/>\n                <date-part name="year" prefix=" "/>\n              </date>\n            </group>\n          </if>\n        </choose>\n      </else>\n    </choose>\n  </macro>\n  <macro name="artwork">\n    <choose>\n      <if type="graphic" match="any">\n        <group delimiter=", ">\n          <text variable="medium"/>\n          <text variable="dimensions"/>\n        </group>\n      </if>\n    </choose>\n  </macro>\n  <citation et-al-min="4" et-al-use-first="1" disambiguate-add-names="true" disambiguate-add-givenname="true">\n    <layout suffix="." delimiter="; ">\n      <choose>\n        <if position="subsequent">\n          <group delimiter=", ">\n            <text macro="contributors-short"/>\n            <text macro="disambiguate"/>\n            <text macro="locators-specific-note"/>\n          </group>\n          <text macro="point-locators-subsequent"/>\n        </if>\n        <else>\n          <group delimiter=", ">\n            <text macro="contributors-note"/>\n            <text macro="title-note"/>\n            <text macro="secondary-contributors-note"/>\n            <text macro="container-title-note"/>\n            <text macro="container-contributors-note"/>\n            <text macro="collection-title"/>\n            <text macro="locators-note"/>\n          </group>\n          <text macro="issue-note"/>\n          <text macro="locators-specific-note" prefix=", "/>\n          <text macro="locators-newspaper" prefix=", "/>\n          <text macro="point-locators"/>\n          <text macro="access-note"/>\n        </else>\n      </choose>\n    </layout>\n  </citation>\n  <bibliography hanging-indent="true" et-al-min="7" et-al-use-first="6" subsequent-author-substitute="&#8212;&#8212;&#8212;">\n    <sort>\n      <key macro="author"/>\n      <key variable="title"/>\n    </sort>\n    <layout>\n      <group delimiter=", ">\n        <text macro="author"/>\n        <text macro="title-note"/>\n        <text macro="secondary-contributors-note"/>\n        <text macro="container-title-note"/>\n        <text macro="container-contributors-note"/>\n        <text macro="collection-title"/>\n        <text macro="volume"/>\n      </group>\n      <text macro="issue-note"/>\n      <text macro="locators-specific-note" prefix=", "/>\n      <text macro="artwork" prefix=", "/>\n      <text macro="locators-newspaper" prefix=", "/>\n      <text macro="pages"/>\n      <text macro="access-note"/>\n    </layout>\n  </bibliography>\n</style>',
    modernLanguageAssociation =
        '<?xml version="1.0" encoding="utf-8"?>\n<style xmlns="http://purl.org/net/xbiblio/csl" class="in-text" version="1.0" demote-non-dropping-particle="never" page-range-format="minimal-two">\n  <info>\n    <title>Modern Language Association 9th edition</title>\n    <title-short>MLA</title-short>\n    <id>http://www.zotero.org/styles/modern-language-association</id>\n    <link href="http://www.zotero.org/styles/modern-language-association" rel="self"/>\n    <link href="http://style.mla.org" rel="documentation"/>\n    <author>\n      <name>Sebastian Karcher</name>\n    </author>\n    <contributor>\n      <name>Patrick O\'Brien</name>\n    </contributor>\n    <category citation-format="author"/>\n    <category field="generic-base"/>\n    <summary>This style adheres to the MLA 9th edition handbook. Follows the structure of references as outlined in the MLA Manual closely</summary>\n    <updated>2023-07-21T20:05:10+00:00</updated>\n    <rights license="http://creativecommons.org/licenses/by-sa/3.0/">This work is licensed under a Creative Commons Attribution-ShareAlike 3.0 License</rights>\n  </info>\n  <locale xml:lang="en">\n    <date form="text">\n      <date-part name="day" suffix=" "/>\n      <date-part name="month" suffix=" " form="short"/>\n      <date-part name="year"/>\n    </date>\n    <terms>\n      <term name="month-01" form="short">Jan.</term>\n      <term name="month-02" form="short">Feb.</term>\n      <term name="month-03" form="short">Mar.</term>\n      <term name="month-04" form="short">Apr.</term>\n      <term name="month-05" form="short">May</term>\n      <term name="month-06" form="short">June</term>\n      <term name="month-07" form="short">July</term>\n      <term name="month-08" form="short">Aug.</term>\n      <term name="month-09" form="short">Sept.</term>\n      <term name="month-10" form="short">Oct.</term>\n      <term name="month-11" form="short">Nov.</term>\n      <term name="month-12" form="short">Dec.</term>\n      <term name="translator" form="short">trans.</term>\n    </terms>\n  </locale>\n  <macro name="author">\n    <names variable="author">\n      <name name-as-sort-order="first" and="text" delimiter-precedes-last="always" delimiter-precedes-et-al="always" initialize="false" initialize-with=". "/>\n      <label form="long" prefix=", "/>\n      <substitute>\n        <names variable="editor"/>\n        <names variable="translator"/>\n        <text macro="title"/>\n      </substitute>\n    </names>\n  </macro>\n  <macro name="author-short">\n    <group delimiter=", ">\n      <names variable="author">\n        <name form="short" initialize-with=". " and="text"/>\n        <substitute>\n          <names variable="editor"/>\n          <names variable="translator"/>\n          <text macro="title-short"/>\n        </substitute>\n      </names>\n      <choose>\n        <if disambiguate="true">\n          <text macro="title-short"/>\n        </if>\n      </choose>\n    </group>\n  </macro>\n  <macro name="title">\n    <choose>\n      <if variable="container-title" match="any">\n        <text variable="title" quotes="true" text-case="title"/>\n      </if>\n      <else>\n        <text variable="title" font-style="italic" text-case="title"/>\n      </else>\n    </choose>\n  </macro>\n  <macro name="title-short">\n    <choose>\n      <if variable="container-title" match="any">\n        <text variable="title" form="short" quotes="true" text-case="title"/>\n      </if>\n      <else>\n        <text variable="title" form="short" font-style="italic" text-case="title"/>\n      </else>\n    </choose>\n  </macro>\n  <macro name="container-title">\n    <text variable="container-title" font-style="italic" text-case="title"/>\n  </macro>\n  <macro name="other-contributors">\n    <choose>\n      <if variable="container-title" match="any">\n        <group delimiter=", ">\n          <names variable="container-author" delimiter=", ">\n            <label form="verb" suffix=" "/>\n            <name and="text"/>\n          </names>\n          <names variable="editor translator" delimiter=", ">\n            <label form="verb" suffix=" "/>\n            <name and="text"/>\n          </names>\n          <names variable="director illustrator interviewer" delimiter=", ">\n            <label form="verb" suffix=" "/>\n            <name and="text"/>\n          </names>\n        </group>\n      </if>\n      <else>\n        <group delimiter=", ">\n          <names variable="container-author" delimiter=", ">\n            <label form="verb" suffix=" " text-case="capitalize-first"/>\n            <name and="text"/>\n          </names>\n          <names variable="editor translator" delimiter=", ">\n            <label form="verb" suffix=" " text-case="capitalize-first"/>\n            <name and="text"/>\n          </names>\n          <names variable="director illustrator interviewer" delimiter=", ">\n            <label form="verb" suffix=" " text-case="capitalize-first"/>\n            <name and="text"/>\n          </names>\n        </group>\n      </else>\n    </choose>\n  </macro>\n  <macro name="version">\n    <group delimiter=", ">\n      <choose>\n        <if is-numeric="edition">\n          <group delimiter=" ">\n            <number variable="edition" form="ordinal"/>\n            <text term="edition" form="short"/>\n          </group>\n        </if>\n        <else>\n          <text variable="edition" text-case="capitalize-first"/>\n        </else>\n      </choose>\n      <text variable="version"/>\n      <text variable="medium"/>\n    </group>\n  </macro>\n  <macro name="volume-lowercase">\n    <group delimiter=" ">\n      <text term="volume" form="short"/>\n      <text variable="volume"/>\n    </group>\n  </macro>\n  <macro name="number">\n    <group delimiter=", ">\n      <group>\n        <choose>\n          \x3c!--lowercase if we have a preceding element--\x3e\n          <if variable="edition container-title" match="any">\n            <text macro="volume-lowercase"/>\n          </if>\n          \x3c!--other contributors preceding the volume--\x3e\n          <else-if variable="author" match="all">\n            <choose>\n              <if variable="editor translator container-author illustrator interviewer director" match="any">\n                <text macro="volume-lowercase"/>\n              </if>\n            </choose>\n          </else-if>\n          <else-if variable="editor" match="all">\n            <choose>\n              <if variable="translator container-author illustrator interviewer director" match="any">\n                <text macro="volume-lowercase"/>\n              </if>\n            </choose>\n          </else-if>\n          <else-if variable="container-author illustrator interviewer director" match="any">\n            <text macro="volume-lowercase"/>\n          </else-if>\n          <else>\n            <group delimiter=" ">\n              <text term="volume" form="short" text-case="capitalize-first"/>\n              <text variable="volume"/>\n            </group>\n          </else>\n        </choose>\n      </group>\n      <group delimiter=" ">\n        <text term="issue" form="short"/>\n        <text variable="issue"/>\n      </group>\n      <choose>\n        <if type="report">\n          <text variable="genre"/>\n        </if>\n      </choose>\n      <text variable="number"/>\n    </group>\n  </macro>\n  <macro name="publisher">\n    <choose>\n      <if type="thesis" match="any">\n        <group delimiter=". ">\n          <date variable="issued" form="numeric" date-parts="year"/>\n          <group delimiter=", ">\n            <text variable="publisher"/>\n            <text variable="genre"/>\n          </group>\n        </group>\n      </if>\n      <else-if type="article-magazine article-newspaper article-journal" match="none">\n        <text variable="publisher"/>\n      </else-if>\n    </choose>\n  </macro>\n  <macro name="publication-date">\n    <choose>\n      <if type="book chapter paper-conference motion_picture" match="any">\n        <date variable="issued" form="numeric" date-parts="year"/>\n      </if>\n      <else-if type="article-journal" match="any">\n        <date variable="issued" form="text" date-parts="year-month"/>\n      </else-if>\n      <else-if type="speech thesis" match="none">\n        <date variable="issued" form="text"/>\n      </else-if>\n    </choose>\n  </macro>\n  <macro name="location">\n    <group delimiter=", ">\n      <group delimiter=" ">\n        <label variable="page" form="short"/>\n        <text variable="page"/>\n      </group>\n      <choose>\n        <if variable="source" match="none">\n          <text macro="URI"/>\n        </if>\n      </choose>\n    </group>\n  </macro>\n  <macro name="container2-title">\n    <group delimiter=", ">\n      <choose>\n        <if type="speech">\n          <text variable="event"/>\n          <date variable="event-date" form="text"/>\n          <text variable="event-place"/>\n        </if>\n      </choose>\n      <text variable="archive"/>\n      <text variable="archive-place"/>\n      <text variable="archive_location"/>\n    </group>\n  </macro>\n  <macro name="container2-location">\n    <choose>\n      <if variable="source">\n        <choose>\n          <if variable="DOI URL" match="any">\n            <group delimiter=", ">\n              <text variable="source" font-style="italic"/>\n              <text macro="URI"/>\n            </group>\n          </if>\n        </choose>\n      </if>\n    </choose>\n  </macro>\n  <macro name="URI">\n    <choose>\n      <if variable="DOI">\n        <text variable="DOI" prefix="https://doi.org/"/>\n      </if>\n      <else>\n        <text variable="URL"/>\n      </else>\n    </choose>\n  </macro>\n  <macro name="accessed">\n    \x3c!--using accessed where we don\'t have an issued date; follows recommendation on p. 53 --\x3e\n    <choose>\n      <if variable="issued" match="none">\n        <group delimiter=" ">\n          <text term="accessed" text-case="capitalize-first"/>\n          <date variable="accessed" form="text"/>\n        </group>\n      </if>\n    </choose>\n  </macro>\n  <citation et-al-min="3" et-al-use-first="1" disambiguate-add-names="true" disambiguate-add-givenname="true">\n    <layout prefix="(" suffix=")" delimiter="; ">\n      <choose>\n        <if locator="page line" match="any">\n          <group delimiter=" ">\n            <text macro="author-short"/>\n            <text variable="locator"/>\n          </group>\n        </if>\n        <else>\n          <group delimiter=", ">\n            <text macro="author-short"/>\n            <group>\n              <label variable="locator" form="short"/>\n              <text variable="locator"/>\n            </group>\n          </group>\n        </else>\n      </choose>\n    </layout>\n  </citation>\n  <bibliography hanging-indent="true" et-al-min="3" et-al-use-first="1" line-spacing="2" entry-spacing="0" subsequent-author-substitute="---">\n    <sort>\n      <key macro="author"/>\n      <key variable="title"/>\n    </sort>\n    <layout suffix=".">\n      <group delimiter=". ">\n        <text macro="author"/>\n        <text macro="title"/>\n        <date variable="original-date" form="numeric" date-parts="year"/>\n        <group delimiter=", ">\n          \x3c!---This group corresponds to MLA\'s "Container 1"--\x3e\n          <text macro="container-title"/>\n          <text macro="other-contributors"/>\n          <text macro="version"/>\n          <text macro="number"/>\n          <text macro="publisher"/>\n          <text macro="publication-date"/>\n          <text macro="location"/>\n        </group>\n        <group delimiter=", ">\n          \x3c!---This group corresponds to MLA\'s "Container 2"--\x3e\n          \x3c!--currently just using this one for archival info--\x3e\n          <text macro="container2-title"/>\n          <text macro="container2-location"/>\n        </group>\n        <text macro="accessed"/>\n      </group>\n    </layout>\n  </bibliography>\n</style>',
    nature =
        '<?xml version="1.0" encoding="utf-8"?>\n<style xmlns="http://purl.org/net/xbiblio/csl" class="in-text" version="1.0" demote-non-dropping-particle="sort-only" default-locale="en-GB">\n  <info>\n    <title>Nature</title>\n    <id>http://www.zotero.org/styles/nature</id>\n    <link href="http://www.zotero.org/styles/nature" rel="self"/>\n    <link href="http://www.nature.com/nature/authors/gta/index.html#a5.4" rel="documentation"/>\n    <link href="http://www.nature.com/srep/publish/guidelines#references" rel="documentation"/>\n    <author>\n      <name>Michael Berkowitz</name>\n      <email>mberkowi@gmu.edu</email>\n    </author>\n    <category citation-format="numeric"/>\n    <category field="science"/>\n    <category field="generic-base"/>\n    <issn>0028-0836</issn>\n    <eissn>1476-4687</eissn>\n    <updated>2022-07-01T16:03:34+00:00</updated>\n    <rights license="http://creativecommons.org/licenses/by-sa/3.0/">This work is licensed under a Creative Commons Attribution-ShareAlike 3.0 License</rights>\n  </info>\n  <macro name="title">\n    <choose>\n      <if type="bill book graphic legal_case legislation motion_picture report song" match="any">\n        <text variable="title" font-style="italic"/>\n      </if>\n      <else>\n        <text variable="title"/>\n      </else>\n    </choose>\n  </macro>\n  <macro name="author">\n    <names variable="author">\n      <name sort-separator=", " delimiter=", " and="symbol" initialize-with=". " delimiter-precedes-last="never" name-as-sort-order="all"/>\n      <label form="short" prefix=", "/>\n      <et-al font-style="italic"/>\n    </names>\n  </macro>\n  <macro name="access">\n    <choose>\n      <if variable="volume" type="article" match="any"/>\n      <else-if variable="DOI">\n        <text variable="DOI" prefix="doi:"/>\n      </else-if>\n    </choose>\n  </macro>\n  <macro name="issuance">\n    <choose>\n      <if type="bill book graphic legal_case legislation motion_picture song thesis chapter paper-conference" match="any">\n        <group delimiter="; " suffix=".">\n          <group delimiter=", " prefix="(" suffix=")">\n            <text variable="publisher" form="long"/>\n            <date variable="issued">\n              <date-part name="year"/>\n            </date>\n          </group>\n        </group>\n      </if>\n      <else-if type="article">\n        <group delimiter=" ">\n          <choose>\n            <if variable="genre" match="any">\n              <text variable="genre" text-case="capitalize-first"/>\n            </if>\n            <else>\n              <text term="article" text-case="capitalize-first"/>\n            </else>\n          </choose>\n          <text term="at"/>\n          <choose>\n            <if variable="DOI" match="any">\n              <text variable="DOI" prefix="https://doi.org/"/>\n            </if>\n            <else>\n              <text variable="URL"/>\n            </else>\n          </choose>\n          <date date-parts="year" form="text" variable="issued" prefix="(" suffix=")"/>\n        </group>\n      </else-if>\n      <else-if type="report webpage post post-weblog" match="any">\n        <group delimiter=" ">\n          <text variable="URL"/>\n          <date date-parts="year" form="text" variable="issued" prefix="(" suffix=")"/>\n        </group>\n      </else-if>\n      <else>\n        <date variable="issued" prefix="(" suffix=")">\n          <date-part name="year"/>\n        </date>\n      </else>\n    </choose>\n  </macro>\n  <macro name="container-title">\n    <choose>\n      <if type="article-journal">\n        <text variable="container-title" font-style="italic" form="short"/>\n      </if>\n      <else>\n        <text variable="container-title" font-style="italic"/>\n      </else>\n    </choose>\n  </macro>\n  <macro name="editor">\n    <choose>\n      <if type="chapter paper-conference" match="any">\n        <names variable="editor" prefix="(" suffix=")">\n          <label form="short" suffix=" "/>\n          <name and="symbol" delimiter-precedes-last="never" initialize-with=". " name-as-sort-order="all"/>\n        </names>\n      </if>\n    </choose>\n  </macro>\n  <macro name="volume">\n    <choose>\n      <if type="article-journal" match="any">\n        <text variable="volume" font-weight="bold" suffix=","/>\n      </if>\n      <else>\n        <group delimiter=" ">\n          <label variable="volume" form="short"/>\n          <text variable="volume"/>\n        </group>\n      </else>\n    </choose>\n  </macro>\n  <citation collapse="citation-number">\n    <sort>\n      <key variable="citation-number"/>\n    </sort>\n    <layout vertical-align="sup" delimiter=",">\n      <text variable="citation-number"/>\n    </layout>\n  </citation>\n  <bibliography et-al-min="6" et-al-use-first="1" second-field-align="flush" entry-spacing="0" line-spacing="2">\n    <layout suffix=".">\n      <text variable="citation-number" suffix="."/>\n      <group delimiter=" ">\n        <text macro="author" suffix="."/>\n        <text macro="title" suffix="."/>\n        <choose>\n          <if type="chapter paper-conference" match="any">\n            <text term="in"/>\n          </if>\n        </choose>\n        <text macro="container-title"/>\n        <text macro="editor"/>\n        <text macro="volume"/>\n        <text variable="page"/>\n        <text macro="issuance"/>\n        <text macro="access"/>\n      </group>\n    </layout>\n  </bibliography>\n</style>'

async function itemGetWithLocalContent(e, t = !0, a = !0, i = !1) {
    const r = await ua(),
        o = await r.collection.items.find(["id", e])
    try {
        o &&
        t &&
        !o.content &&
        o.currentVersion &&
        "file" !== o.rawType &&
        (o.content = await getLocalContentFromState(
            e,
            a ? o.unSyncedVersions : [],
        ))
    } catch (_err) {
        console.log(_err)
    }
    try {
        if (i && o?.content) {
            const e = new ko([]),
                t = pt("bio_citation", o.content),
                a = pt("bibliography", o.content),
                i = {}
            let r = "apa-annotated-bibliography",
                s = "en-US"
            if (t.length) {
                const a = await Promise.all(
                    t
                        .filter((e, a) =>
                            e.attrs.reference
                                ? a ===
                                t.findIndex(
                                    (t) =>
                                        t.attrs.reference ===
                                        e.attrs.reference,
                                )
                                : !!e.attrs.metadataId &&
                                a ===
                                t.findIndex(
                                    (t) =>
                                        t.attrs.metadataId ===
                                        e.attrs.metadataId,
                                ),
                        )
                        .map((e) =>
                            e.attrs.reference
                                ? sciGetMetadataByCardReference(
                                    e.attrs.reference,
                                )
                                : sciGetMetadata(e.attrs.metadataId),
                        ),
                )
                console.log("metadatas", a.length)
                const n = new Set()
                a.forEach((t) => {
                    t?.reference && (i[t.reference] = t.id),
                    t &&
                    !n.has(t.id) &&
                    (e.add(
                        (function (e) {
                            const t = []
                            if (
                                (t.push(
                                    `TY  - ${
                                        To[e.type || "other"] || "JOUR"
                                    }`,
                                ),
                                    e.authors?.forEach((e) => {
                                        if (!e.name) return
                                        const a = (function (e) {
                                            if (
                                                (e = e.trim()).includes(",")
                                            ) {
                                                const [t, ...a] = e
                                                    .split(",")
                                                    .map((e) => e.trim())
                                                return {
                                                    family: t,
                                                    given: a.join(""),
                                                }
                                            }
                                            {
                                                const [t, ...a] = e
                                                    .split(" ")
                                                    .reverse()
                                                return 0 === a.length
                                                    ? {family: "", given: t}
                                                    : {
                                                        family: t,
                                                        given: a
                                                            .reverse()
                                                            .join(" "),
                                                    }
                                            }
                                        })(e.name)
                                        "author" === e.role ||
                                        "editor" === e.role
                                            ? t.push(
                                                `AU  - ${a.family}, ${a.given}`,
                                            )
                                            : "reviewed_author" === e.role
                                                ? t.push(
                                                    `RP  - ${a.family}, ${a.given}`,
                                                )
                                                : ("translator" === e.role ||
                                                    "contributor" ===
                                                    e.role) &&
                                                t.push(
                                                    `AU  - ${a.family}, ${a.given}`,
                                                )
                                    }),
                                    t.push(
                                        `TI  - ${e.title?.trim() || ""}`,
                                    ),
                                    (Array.isArray(e.keywords)
                                            ? e.keywords
                                            : e.keywords?.split(",")
                                    )?.forEach((e) => {
                                        e && t.push(`KW  - ${e}`)
                                    }),
                                    e.time)
                            ) {
                                const [a = "", n = "", i = ""] =
                                    e.time.split("-")
                                t.push(`PY  - ${a}`),
                                    t.push(`DA  - ${a}/${n}/${i}/`)
                            }
                            if (
                                (e.doi &&
                                So.test(e.doi) &&
                                t.push(`DO  - ${e.doi}`),
                                e.journal &&
                                t.push(`T2  - ${e.journal}`),
                                e.volume && t.push(`VL  - ${e.volume}`),
                                e.issue && t.push(`IS  - ${e.issue}`),
                                e.issn &&
                                ("string" == typeof e.issn
                                    ? Ao.test(e.issn) &&
                                    t.push(`SN  - ${e.issn}`)
                                    : Ao.test(e.issn.value) &&
                                    t.push(
                                        `SN  - ${e.issn.value}`,
                                    )),
                                    e.page)
                            ) {
                                const [a, n] = e.page.split("-")
                                a && t.push(`SP  - ${a}`),
                                n && t.push(`EP  - ${n}`)
                            }
                            return (
                                e.url && t.push(`UR  - ${e.url}`),
                                    t.push(
                                        `ID  - ${e.id || Math.random()}`,
                                    ),
                                    t.push("ER  - "),
                                    t.join("\n")
                            )
                        })(t),
                        {strict: !1, generateGraph: !1},
                    ),
                        n.add(t.id))
                }),
                    console.log("cite.data", e.data.length)
            }
            if (a.length) {
                const [t] = a
                ;(r = t.attrs.template || "apa-annotated-bibliography"),
                    (s = t.attrs.lang || "en-US")
                const i = mod1[r.replace(/-(\w)/g, (e, t) => t.toUpperCase())]
                ko.CSL.register.addTemplate(r, i),
                    (t.type = "bibliography_display"),
                    (t.content = e
                        .format("bibliography", {
                            format: "text",
                            template: r,
                            lang: s,
                            asEntryArray: !0,
                        })
                        .map(([e, t]) => ({
                            type: "paragraph",
                            content: [{type: "text", text: t || "​"}],
                        })))
            }
            t.forEach((t) => {
                try {
                    t.type = "bio_display_citation"
                    const a = i[t.attrs.reference] || t.attrs.metadataId
                    console.log("referencesMap id", a)
                    const n = e.data.findIndex((e) => e.id === a),
                        o = a,
                        l = e.data.slice(0, n).map((e) => e.id)
                    t.content = [
                        {
                            type: "text",
                            text: e.format(
                                "citation",
                                {
                                    format: "text",
                                    template: r,
                                    lang: s,
                                    entry: o,
                                    citationsPre: l,
                                } || "​",
                            ),
                        },
                    ]
                } catch (_err) {
                    console.log(_err)
                }
            })
        }
    } catch (_err) {
        console.log(_err)
    }
    return o
}

const Uo = function (e, t, a) {
    if (!e || !e.content || !t) return e
    const n = [e]
    for (; n.length;) {
        const e = n.pop()
        if (e.content)
            for (let i = e.content.length - 1; i >= 0; i--) {
                const r = e.content[i]
                if (r.type === t)
                    if (a) {
                        let t = !0
                        for (const e in a)
                            if (a[e] !== r.attrs?.[e]) {
                                t = !1
                                break
                            }
                        t && e.content.splice(i, 1)
                    } else e.content.splice(i, 1)
                else n.unshift(r)
            }
    }
    return e
}

async function itemReplaceTag(e, t, a) {
    if (!t || !a?.length) return !1
    const n = await ua()
    for (const i of a) {
        const a = await n.collection.items.find(
            (e) => e.id === i,
            [
                "id",
                "tags",
                "tags_in_content",
                "content",
                "currentVersion",
                "rawType",
                "unSyncedVersions",
            ],
        )
        if (!a) return !1
        const r = a.tags || [],
            o = a.tags_in_content || []
        r.includes(t) || r.push(t)
        let s = !1
        o.includes(e) &&
        (!a.content &&
        a.currentVersion &&
        "file" !== a.rawType &&
        (a.content = await getLocalContentFromState(
            a.id,
            a.unSyncedVersions || [],
        )),
            (s = !0),
            (a.content = Uo(a.content, "tag", {id: e})))
        const l = {
            tags: r.filter((t) => t !== e),
            tags_in_content: o.filter((t) => t !== e),
        }
        s && (l.content = a.content),
            await n.collection.items.update((e) => e.id === i, l)
    }
    return !0
}

const Wo = async (e, t = "???", a = !1, n = 0) => {
        try {
            const i = n || Date.now(),
                r = await ua()
            "memo" in e && (e.memo_edit_time_ms = i)
            const o = await r.collection.items.update(["id", e.id], {
                ...e,
                edit_time_ms: i,
            })
            ye.info("item update in:", t)
            const l = o[0]
            return l
                ? (be(f, e.id),
                a || be(s, {doc: l}),
                !a && Gr(l.goal) && be(_, e.id),
                    await Qa("item", Object.keys(e), i, e.id),
                    o)
                : []
        } catch (_err) {
            ye.error("item update error:", _err)
        }
    },
    itemUpdateTitle = async (e, t = !1) => {
        const a = (await Wo(e, "updateTitle", t))?.[0]
        return a && be(u, a.id, a.title, !!a.titled), a
    },
    itemUpdateContent = async (e, t = !1) => {
        const a = await itemGet(e.id),
            n = Date.now(),
            i = n,
            r = Yi(e.content),
            o = Yi(a?.content),
            s = r - o,
            l = ((e = new Date()) =>
                `${e.getUTCFullYear()}${("0" + (e.getUTCMonth() + 1)).slice(
                    -2,
                )}${("0" + e.getUTCDate()).slice(-2)}${(
                    "0" + e.getUTCHours()
                ).slice(-2)}`)()
        let c = a?.wordsCountHistory
        if (c) c = {...c, [l]: r}
        else {
            const e = o
            c = {[Mr(a?.add_time_ms)]: e, [l]: r}
        }
        const d = a?.goal,
            _ = d?.words || 0
        if (d && _) {
            let t = r
            "character" === d.wordsCountType && (t = Ji(e.content)),
                t >= _
                    ? (e.goal = {
                        ...d,
                        isAchieved: !0,
                    })
                    : d.isAchieved && (e.goal = {...d, isAchieved: !1})
        }
        const m = await Wo(
            {...e, wordsCountHistory: c, content_edit_time_ms: i},
            "updateContent",
            t,
            n,
        )
        return be(h, e.id, s), m?.[0]
    },
    itemUpdateIcon = async (e, t = !1) => {
        const a = await Wo(e, "updateIcon", t)
        return be("emoji_of_doc_updated", e.id), a?.[0]
    },
    itemUpdateTag = async (e, t = !1) => {
        let a = (await itemGet(e.id))?.tags
        return (
            await Cr(e.id, a || [], e.tags || []),
                (await Wo(e, "updateTag", t))?.[0]
        )
    },
    itemUpdateBelongsTo = async (e, t = !1) => {
        const a = await Wo(e, "updateBelongsTo", t)
        return be("item_update_belongsTo", e.id, e.belongsTo), a?.[0]
    },
    itemUpdateFlashcardGotIt = async (e, t = !1) => {
        const a = Date.now()
        e = e.isGotFlashcard ? {...e, isGotFlashcardTimeMs: a} : e
        const n = await Wo(e, "updateFlashcardGotIt", t, a)
        return (
            be("item_update_flashcard_got_it", e.id, !!e.isGotFlashcard), n?.[0]
        )
    },
    Zo = [
        {level: 0, time: 1200, limit: 3600},
        {level: 1, time: 2400, limit: 31200},
        {
            level: 2,
            time: 28800,
            limit: 82800,
        },
        {level: 3, time: 54e3, limit: 140400},
        {level: 4, time: 86400, limit: 432e3},
        {
            level: 5,
            time: 345600,
            limit: 2505600,
        },
        {level: 6, time: 216e4, limit: 4838400},
    ],
    Qo = (e, t, a = Date.now()) => {
        const n = Zo[e]
        return n ? (Xo(a - t, n.limit) ? 0 : e + 1) : e
    },
    Xo = (e, t) => e > 1e3 * t,
    es = (e) => "card" === e.rawType || "doc" === e.rawType || !e.rawType,
    itemUpdateFlashcardHistory = async (e, t = !1) => {
        const a = await itemGet(e.id)
        if (!a) return
        const n = Date.now(),
            i = ((e = new Date()) =>
                `${e.getUTCFullYear()}${("0" + (e.getUTCMonth() + 1)).slice(
                    -2,
                )}${("0" + e.getUTCDate()).slice(-2)}${(
                    "0" + e.getUTCHours()
                ).slice(-2)}`)()
        let r = !1,
            o = a.showAsFlashcardHistory
        o ? (o = [...new Set([...o, i])]) : ((o = [i]), (r = !0))
        let s = 0
        a.showAsFlashcardLastTimeMs &&
        void 0 !== a.ebbinghausLevel &&
        (s = a.isEnhancedFlashcard
            ? ((e, t, a = Date.now()) =>
                e >= 7 && e < 9 ? e + 1 : Qo(e, t, a))(
                a.ebbinghausLevel,
                a.showAsFlashcardLastTimeMs,
                n,
            )
            : Qo(a.ebbinghausLevel, a.showAsFlashcardLastTimeMs, n))
        const l = await Wo(
            {
                ...e,
                showAsFlashcardHistory: o,
                showAsFlashcardLastTimeMs: n,
                ebbinghausLevel: s,
            },
            "updateFlashcardHistory",
            t,
            n,
        )
        return be("item_update_flashcard_history", e.id, r), l?.[0]
    },
    itemUpdateOther = async (e, t = !1) => (await Wo(e, "updateOther", t))?.[0],
    ns = (e) => {
        let {content: t} = e
        return t
            ? "string" == typeof t
                ? [
                    {
                        content: t,
                        type: "content",
                    },
                ]
                : "object" == typeof t
                    ? pr(t)
                    : [{content: t.toString(), type: "content"}]
            : []
    }
const searchByKeyWord = async (e, t = {}) => (
        (e = e.trim()),
            ye.info(`search by "${e}"`),
            trackEvent("search", "by_keyword"),
            await (async function (e) {
                let t = [],
                    a = [],
                    n = []
                const i = [],
                    r = [],
                    o = []
                if (!e) return {docs: t, files: a, cards: n}
                const s = ((e) => {
                        const t = (e = e.trim().toLowerCase())
                            .split(" ")
                            .map((e) => e.trim())
                            .filter((e) => e)
                        return [...new Set(t)]
                    })(e),
                    l = await ua(),
                    c = await mn(l),
                    d = await Fi(c)
                for (let e of c) {
                    if (e.isInTrashcan || e.fileItemInArticle) continue
                    const {
                            title: l,
                            content: c,
                            rawType: _,
                            id: m,
                            icon: p,
                            tags: u,
                            tags_in_content: h,
                        } = e,
                        f = l ? l.toLowerCase() : ""
                    if (
                        ("file" !== _ &&
                        e.currentVersion &&
                        !c &&
                        (e.content = await getLocalContentFromState(
                            e.id,
                            e.unSyncedVersions,
                        )),
                            mr(f, s))
                    ) {
                        let t = []
                        "file" !== _ &&
                        (t = ns(e).filter((e) =>
                            mr(e.content.toLowerCase(), s),
                        )),
                            "card" === _
                                ? o.push({
                                    type: "card",
                                    id: m,
                                    title: l,
                                    icon: p,
                                    tags: u,
                                    tags_in_content: h,
                                    contents: t,
                                })
                                : "file" === _
                                    ? r.push({
                                        type: "file",
                                        id: m,
                                        title: l,
                                        icon: p,
                                        tags: u,
                                        tags_in_content: h,
                                        path: d[m],
                                        contents: t,
                                    })
                                    : i.push({
                                        type: "doc",
                                        id: m,
                                        title: l,
                                        icon: p,
                                        tags: u,
                                        tags_in_content: h,
                                        path: d[m],
                                        contents: t,
                                    })
                    } else {
                        let i = []
                        "file" !== _ &&
                        (i = ns(e).filter((e) =>
                            mr(e.content.toLowerCase(), s),
                        )),
                        i.length &&
                        ("card" === _
                            ? n.push({
                                type: "card",
                                id: m,
                                title: l,
                                icon: p,
                                tags: u,
                                tags_in_content: h,
                                contents: i,
                            })
                            : "file" === _
                                ? a.push({
                                    type: "file",
                                    id: m,
                                    title: l,
                                    icon: p,
                                    tags: u,
                                    tags_in_content: h,
                                    path: d[m],
                                    contents: i,
                                })
                                : t.push({
                                    type: "doc",
                                    id: m,
                                    title: l,
                                    icon: p,
                                    tags: u,
                                    tags_in_content: h,
                                    path: d[m],
                                    contents: i,
                                }))
                    }
                }
                return (
                    (t = [...i, ...t]),
                        (a = [...r, ...a]),
                        (n = [...o, ...n]),
                        {docs: t, files: a, cards: n}
                )
            })(e)
    ),
    rs = (e) => {
        let {content: t} = e
        return t
            ? "string" == typeof t
                ? [
                    {
                        content: t,
                        type: "content",
                    },
                ]
                : "object" == typeof t
                    ? pr(t)
                    : [{content: t.toString(), type: "content"}]
            : []
    },
    searchByProjectOrTag = async (e, t, a) => {
        if (!e || !t) return []
        let n = () => !1
        if ("project" === a) {
            const e = await projectGet(t, !0)
            if (!e) return []
            const a = we(e.tree).map((e) => e.id)
            n = (e) => a.includes(e.id)
        } else if ("tag" === a) {
            const e = await getTargetIds(t)
            n = (t) => {
                const {tags: a, tags_in_content: n} = t
                return (
                    !(!a || !e.some((e) => a.includes(e))) ||
                    !(!n || !e.some((e) => n.includes(e)))
                )
            }
        }
        return (
            ye.info(`search by "${e}" within ${a}`),
                trackEvent("search", `by_keyword_within_${a}`),
                await (async function (e, t) {
                    const a = [],
                        n = [e.toLowerCase()],
                        i = await ua(),
                        r = await mn(i)
                    for (let e of r) {
                        const {
                            id: i,
                            icon: r,
                            title: o,
                            content: s,
                            rawType: l,
                            isInTrashcan: c,
                            fileItemInArticle: d,
                            add_time_ms: _,
                            edit_time_ms: m,
                        } = e
                        if (c || d) continue
                        if (l && "doc" !== l && "card" !== l) continue
                        if (
                            (e.currentVersion &&
                            !s &&
                            (e.content = await getLocalContentFromState(
                                e.id,
                                e.unSyncedVersions,
                            )),
                                !t(e))
                        )
                            continue
                        const p = rs(e).filter(
                            (e) =>
                                "content" === e.type &&
                                mr(e.content.toLowerCase(), n),
                        )
                        p.length &&
                        a.push({
                            id: i,
                            title: o,
                            icon: r,
                            contents: p,
                            add_time_ms: _,
                            edit_time_ms: m,
                        })
                    }
                    return a
                })(e, n)
        )
    },
    trashcanAdd = async (e) => {
        let t = await ua()
        const a = await t.collection.trashcan.insert({
                ...e,
                id: (0, Ja.v4)(),
                add_time_ms: new Date().getTime(),
            }),
            n = ft([a])
        for (let e of n) await itemUpdateOther({id: e, isInTrashcan: !0}, !0)
        "project" === e.type && be(E, n)
        for (let e of n) await relationToggleHideById(e)
        if ("project" === e.type) {
            const t = e.data,
                a = t.children
                    ? t.children.flatMap(function e(t) {
                        return t.children
                            ? [t.id, ...t.children.flatMap(e)]
                            : []
                    })
                    : []
            await relationToggleHideById(e.data.id)
            for (let e of a) await relationToggleHideById(e)
        }
        return a
    },
    ls = async (e, t) => {
        if ("item" === e.type && e.project_id) {
            const a = e.data.id,
                n = e.project_id,
                i = await t.collection.projects.find((e) => e.id === n)
            if (!i) return
            const r = ve(i.tree_for_show, (e) => e.id === a)
            if (!r) return
            const o = await Sn(i, a),
                s = ((e, t) => {
                    let a = Se(e, t)
                    if (!a) return null
                    let n = a.findIndex((e) => e.id === t)
                    if (-1 === n) return null
                    let i = a[n + 1]
                    return i ? i.id : null
                })(i.tree, a)
            ;(e.data = r), (e.path = o || e.path), (e.next_id = s || e.next_id)
        }
    },
    trashcanAll = async (e = {}) => {
        let t = await ua(),
            a = await t.collection.trashcan.all()
        if (e.needNewData) for (let e of a) await ls(e, t)
        return a.reverse()
    },
    ds = async (e) => {
        const t = await ha(),
            a = le().join(t, e)
        await ie().remove(a)
    },
    _s = (e) => {
        let t = []
        return (
            e.map((e) => {
                if ("project" === e.type) {
                    const {id: a, children: n} = e.data
                    t.push(a),
                    n &&
                    n.forEach(function e(a) {
                        t.push(a.id),
                        a.children && a.children.forEach(e)
                    })
                }
            }),
                t
        )
    },
    ms = async (e) => {
        let t = await ua(),
            {children: a, tree: n} = e,
            i = we(n).map((e) => e.id)
        if (Array.isArray(a) && a.length > 0)
            for (let e of a) {
                const t = await ms(e)
                i = [...i, ...t]
            }
        return (
            await t.collection.projects.delete((t) => t.id === e.id),
                await relationDeleteById(e.id),
                [...new Set(i)]
        )
    },
    trashcanDelete = async (e) => {
        let t = await trashcanGet(e)
        if (!t) return
        let {type: a} = t
        ;((e) => "project" === e.type)(t)
            ? await (async (e) => {
                let t = await ua()
                const a = _s([e])
                let n = await ms(e.data)
                if (
                    (n.push(...(e.items_need_to_hide ?? [])),
                        ye.warning("delete hide items", e.items_need_to_hide),
                        (n = [...new Set(n)]),
                        await t.collection.trashcan.delete((t) => t.id === e.id),
                        !n.length)
                )
                    return
                const i = async (a) => {
                        await t.collection.items.delete(["id", a]),
                            await ds(a),
                            await relationDeleteById(a),
                            await deleteYChangesById(a),
                        (await t.list.card_ids.find((t) => t === e.id)) &&
                        (await t.list.card_ids.delete(
                            (t) => t === e.id,
                        )),
                            await pdfHighlightDeleteByBelongs(a),
                            await sciDelMetadataByItemId(a)
                    },
                    r = await trashcanAll(),
                    o = _s(r),
                    s = await un(t)
                let l = []
                for (let e of n) {
                    let t = s[e]?.belongsTo
                    t && t.length
                        ? ((t = t.filter((e) => !a.includes(e))),
                            t.length
                                ? t.find((e) => o.includes(e))
                                    ? await itemUpdateBelongsTo(
                                        {
                                            id: e,
                                            belongsTo: t,
                                        },
                                        !0,
                                    )
                                    : (await itemUpdateBelongsTo(
                                        {
                                            id: e,
                                            belongsTo: t,
                                            isInTrashcan: !1,
                                        },
                                        !0,
                                    ),
                                        l.push(e))
                                : await i(e))
                        : await i(e)
                }
                l.length && be("trashcan_delete_release_items", l),
                    be(f),
                    be(O)
            })(t)
            : ("item" !== a && "item_link" !== a && "card" !== a) ||
            (await (async (e) => {
                let t = await ua()
                if ("card" !== e.type) {
                    let a = e.data.children || [],
                        n = we(a)
                    n.push(e.data)
                    for (let e of n)
                        await t.collection.items.delete(["id", e.id]),
                            await ds(e.id),
                            await relationDeleteById(e.id),
                            await deleteYChangesById(e.id),
                            await pdfHighlightDeleteByBelongs(e.id),
                            await sciDelMetadataByItemId(e.id)
                } else
                    await t.collection.items.delete(["id", e.data.id]),
                        await ds(e.data.id),
                        await relationDeleteById(e.data.id),
                        await deleteYChangesById(e.data.id),
                        await pdfHighlightDeleteByBelongs(e.data.id),
                        await sciDelMetadataByItemId(e.data.id)
                await t.collection.trashcan.delete((t) => t.id === e.id)
            })(t)),
            be("trashcan_delete")
    },
    trashcanEmpty = async () => {
        let e = await ua(),
            t = await e.collection.trashcan.all()
        for (let e of t) await trashcanDelete(e.id)
    },
    trashcanGet = async (e) => {
        let t = await ua()
        return await t.collection.trashcan.find((t) => t.id === e)
    },
    fs = async (e, t, a) => {
        if (!t?.length) return
        a || (a = await bn())
        let n = await ua()
        const i = await n.collection.trashcan.find((t) => t.data.id === e)
        if (i) {
            const e = i.data
            let r = e.tree
            ;(r = In(r, t)),
                await n.collection.trashcan.update((e) => e.id === i.id, {
                    data: {
                        ...e,
                        tree: r,
                        children: wn(e, a),
                    },
                })
        }
    },
    gs = (e) =>
        e.children && Array.isArray(e.children)
            ? e.children.map((e) => ({
                id: e.id,
                children: gs(e),
            }))
            : [],
    trashcanRestoreItem = async (e, t = {}) => {
        let a = await ua(),
            n = await trashcanGet(e)
        if (!n) return {success: !1, code: "item_not_exist"}
        const i = await trashcanAll(),
            r = ft(i.filter((t) => t.id !== e))
        let o = ft([n])
        if ("item" !== n.type) {
            o = o.filter((e) => !r.includes(e))
            for (let e of o)
                await itemUpdateOther({id: e, isInTrashcan: !1}, !0)
        } else
            await (async (e) => {
                const {project_id: t} = e,
                    a = ft([e])
                if (!t)
                    for (let e of a)
                        await itemUpdateOther({id: e, isInTrashcan: !1}, !0)
                const n = await ua(),
                    i = await trashcanAll(),
                    r = _s(i),
                    o = await un(n),
                    s = {},
                    l = (e, t) => {
                        const a = s[e]
                        a ? a.push(t) : (s[e] = [t])
                    }
                for (let e of a) {
                    const t = o[e]
                    if (t) {
                        let {belongsTo: a} = t
                        ;(a = a?.filter(
                            (t) => !r.includes(t) || (l(t, e), !1),
                        )),
                            await itemUpdateBelongsTo(
                                {
                                    id: e,
                                    belongsTo: a,
                                    isInTrashcan: !1,
                                },
                                !0,
                            )
                    }
                }
                if (!Object.keys(s).length) return
                const c = await bn(),
                    d = []
                for (let e in s) {
                    const t = s[e]
                    if (t?.length) {
                        const a = c[e]
                        if (a) {
                            let n = a.tree
                            ;(n = In(n, t)),
                                await projectUpdateTree({id: e, tree: n})
                        } else d.push(e)
                    }
                }
                for (let e of d) await fs(e, s[e])
            })(n)
        "project" === n.type
            ? await (async (e) => {
                ye.info("restoreProject", e)
                let {data: t, next_id: a, path: n} = e
                const i = await ua()
                e.items_need_to_hide?.length &&
                (await Promise.all(
                    e.items_need_to_hide.map((e) =>
                        itemUpdateMiscContent({
                            id: e,
                            isInTrashcan: !1,
                        }),
                    ),
                ))
                let r = await i.collection.projects.insert({
                    ...t,
                    children: t.children?.map(({id: e}) => ({id: e})),
                })
                ye.info("project", r)
                let o = n && n.length > 0 ? n[n.length - 1].id : void 0
                ye.info(`insert project to: ${o}, ${a}`)
                const s = await trashcanAll(),
                    l = _s(s)
                o && (await projectGet(o, !0)) && !l.includes(o)
                    ? await en(o, r.id, {
                        siblingId: a || "",
                        insertTo: "before",
                    })
                    : await Ka(r.id, {siblingId: a || "", insertTo: "before"})
            })(n)
            : "item" === n.type
                ? await (async (e) => {
                    let {project_id: t, path: a, next_id: n} = e
                    if (!t) return
                    let i = await projectGet(t, !0)
                    if (!i) return
                    let {tree: r} = i,
                        o = r,
                        s = ""
                    if (a) {
                        let e = a.slice(1)
                        for (let t of e) {
                            let {id: e} = t
                            s = e
                            let a = o.find((t) => t.id === e)
                            a && (o = a.children || [])
                        }
                    }
                    let l = {children: gs(e.data)}
                    n
                        ? o.findIndex((e) => e.id === n) > -1 &&
                        ((l.relate_item_id = n), (l.relate_where = "before"))
                        : s &&
                        ((l.relate_item_id = s), (l.relate_where = "in")),
                        await projectAddItem(t, e.data.id, l)
                })(n)
                : "item_link" === n.type ||
                ("card" === n.type &&
                    (await (async (e) => {
                        const t = await ua()
                        e.data.id &&
                        (await t.list.card_ids.lpush(e.data.id),
                            be("card_updated", e.data.id))
                    })(n))),
            be(I, o),
            await a.collection.trashcan.delete((t) => t.id === e)
        for (let e of o) await relationToggleHideById(e, !1)
        if ("project" === n.type) {
            const e = n.data,
                t = e.children
                    ? e.children.flatMap(function e(t) {
                        return t.children
                            ? [t.id, ...t.children.flatMap(e)]
                            : []
                    })
                    : []
            await relationToggleHideById(n.data.id, !1)
            for (let e of t) await relationToggleHideById(e, !1)
        }
        return {success: !0}
    },
    bs = async (e, t, a, n) => {
        let i = await trashcanGet(e)
        if (!i) return !1
        let r = await ua()
        if ("articles" === t) {
            if (
                "item" !== i.type ||
                i.data.children.length > 1 ||
                "folder" === i.data.icon
            )
                return !1
            await r.collection.trashcan.delete((t) => t.id === e)
        } else if ("projects" === t) ;
        else if ("project" === t && a) {
            if ("item" !== i.type) return !1
            const t = await trashcanAll(),
                o = ft(t.filter((t) => t.id !== e))
            let s = ft([i])
            s = s.filter((e) => !o.includes(e))
            for (let e of s)
                await itemUpdateOther({id: e, isInTrashcan: !1}, !0)
            let l = gs(i.data)
            ;(n = Object.assign({}, n, {children: l})),
                await Promise.all(
                    we([i.data]).map((e) => on(e.id, i.project_id || "")),
                ),
                await projectAddItem(a, i.data.id, n),
                await r.collection.trashcan.delete((t) => t.id === e)
            for (let e of s) await relationToggleHideById(e, !1)
            return [i.data.id, ...Cn(i.data)]
        }
        return !1
    },
    trashcanRestoreItemsTo = async (e, t, a, n) => {
        let i = [],
            r = []
        for (let o of e) {
            let e = await bs(o, t, a, n)
            e ? r.push(e) : i.push(o)
        }
        return (
            be(I, r.flat()),
                0 === i.length ? {success: !0} : {success: !1, fail_ids: i}
        )
    },
    trashcanGetTargetProject = async (e) => {
        let t = await ua()
        return await t.collection.trashcan.find(
            (t) => "project" === t.type && t.data.id === e,
        )
    },
    cardAdd = async (e, t = "") => {
        const a = await ua()
        let n = await itemAdd({...e, rawType: "card"}, void 0, {
            needNotEditTitle: !0,
            is_card: !0,
        })
        if ((await a.list.card_ids.lpush(n.id), trackEvent("new", "card"), t)) {
            const e = (await graphGet("project", t)).data,
                a = {id: n.id, isExternal: !0, children: []}
            ;(e.externalItemList = [...(e.externalItemList || []), a]),
                await graphUpdate(e),
                be(r, t)
        }
        return be(O), be(f, n.id), n
    },
    cardAddMultiply = async (e, t) => {
        if (!e.length) return
        const a = await ua(),
            n = []
        for (let t of e) {
            let e = await itemAdd({...t, rawType: "card"})
            n.push(e.id),
                await a.list.card_ids.lpush(e.id),
                trackEvent("new", "card")
        }
        t && (await graphAddExternalCards(t, n, !0), be(r, t)), be(O)
    },
    As = (e, t) =>
        e.flatMap(
            (e) => (
                e.children && (e.children = As(e.children, t)),
                    t.includes(e.id) ? e.children || [] : [e]
            ),
        ),
    Ss = async (e, t) => {
        const a = await ua(),
            n = await a.collection.projects.find((t) => t.id === e)
        if (!n) return
        let i = n.tree
        ;(i = As(i, t)), await projectUpdateTree({id: e, tree: i})
    },
    cardAddFromArticles = async (e, {tagId: t, projectId: a}) => {
        if (!e.length) return
        const n = await ua(),
            i = await _r(n, (t) => e.includes(t.id) && "file" !== t.rawType)
        if (!(e = i.map((e) => e.id)).length) return
        const o = [...new Set(i.flatMap((e) => e.belongsTo || []))]
        for (let t of o) await Ss(t, e)
        for (let e of i) {
            let a = e.tags || []
            t && (a = a.includes(t) ? a : [...a, t]),
                await n.list.card_ids.lpush(e.id),
                await itemUpdateTag(
                    {
                        id: e.id,
                        rawType: "card",
                        tags: a,
                        belongsTo: void 0,
                    },
                    !0,
                )
        }
        be(O), be(B), a && (await graphAddExternalCards(a, e, !0), be(r, a))
    },
    cardAddCardBooks = async (e = "Card") => {
        const t = await ua(),
            a = new Date().getTime()
        let n = {id: (0, Ja.v4)(), name: e, add_time_ms: a, edit_time_ms: a}
        return await t.collection.cardbooks.insert(n), n
    },
    Cs = {break: !0, langPrefix: "language-", linkify: !1, xhtmlOut: !1},
    js = require("markdown-it")
var Ps = modulex.fn(js)

async function markdownToHtml(e, t = {}) {
    return await (async function (e, t = {}) {
        return (
            (t = {...Cs, ...t}),
                new (Ps())({
                    html: !0,
                    xhtmlOut: t.xhtmlOut,
                    breaks: t.break,
                    langPrefix: t.langPrefix,
                    linkify: t.linkify,
                    typographer: !1,
                }).render(e)
        )
    })(e, t)
}

const cardMoveToTrashcan = async (e) => {
    const t = await ua()
    Array.isArray(e) || (e = [e])
    for (let a of e) {
        if (
            (await trashcanAll()).find(
                (e) => "card" === e.type && e.data.id === a,
            )
        ) {
            ye.info("is in trashcan."),
                await t.list.card_ids.delete((e) => e === a)
            continue
        }
        let e = await cardGetById(a)
        e
            ? (await trashcanAdd({
                type: "card",
                data: e,
            }),
                ye.info("moveToTrashcan ok."),
                await t.list.card_ids.delete((e) => e === a))
            : (ye.error(`item #${a} not found.`),
                await t.list.card_ids.delete((e) => e === a))
    }
    be(O),
        be("card_deleted", e),
        be(L),
        be(E, e),
        trackEvent("move_to_trashcan", "card")
}

async function cardConvertToArticle(e, t, a, n) {
    console.warn("当前方法已废弃，请停止使用！ #actions.cards.convertToArticle")
    const i = await cardGetById(e)
    if (!i) return
    let r = {},
        o = i.content || ""
    ;(r.content = n || markdownToHtml(o)),
        (r.title = i.title || o.split("\n")[0].trim().substring(0, 50)),
        (r.rawType = "doc")
    let s = await itemAdd(r, t, {relate_item_id: a})
    return (
        await cardMoveToTrashcan(e),
            be(O),
            trackEvent("card", "convert_to_article"),
            s.id
    )
}

const cardDevAddMany = async (e) => {
        for (let t = 0; t < e; t++)
            await cardAdd({content: `rnd-${Math.random()}`})
    },
    cardGetById = async (e) => await itemGetWithLocalContent(e, !0),
    Bs = (e) => !!e && !!e.id && !e.isInTrashcan && "card" === e.rawType,
    cardGetByPage = async (e = 1, t = {}, a = 50) => {
        let n = await cardGetList(t),
            i = n.length,
            r = a * (e - 1),
            o = r + a,
            s = n.slice(r, o),
            l = o < i
        return {
            cards: (await Promise.all(s.map((e) => cardGetById(e)))).filter(Bs),
            page: e,
            page_size: a,
            has_next: l,
        }
    },
    cardAll = async ({excludeTrashcan: e} = {}) => {
        const t = await ua(),
            a = await t.collection.items.all()
        return e
            ? a.filter((e) => "card" === e.rawType && !e.isInTrashcan)
            : a.filter((e) => "card" === e.rawType)
    },
    cardGetCardBooks = async () => {
        const e = await ua()
        let t = await e.collection.cardbooks.all()
        if (0 === t.length) {
            let e = await cardAddCardBooks("Card")
            t.push(e)
        }
        return t
    },
    cardGetCards = async (e) => {
        const t = await ua()
        return await t.collection.cards.filter((t) => t.cardbook_id === e)
    }
const cardGetList = async (e = {}) => {
        if (e.project)
            return await (async function (e) {
                if (!e) return []
                const t = await projectGet(e, !0)
                if (!t) return []
                const a = await ua(),
                    n = await un(a),
                    i = we(t.tree)
                        .map((e) => e.id)
                        .reduce((e, t) => {
                            const a = n[t]
                            return (
                                a &&
                                a.forwards_cites &&
                                a.forwards_cites.forEach((t) => {
                                    "card" === t.citeType && e.push(t.id)
                                }),
                                    e
                            )
                        }, []),
                    r = await (async function (e) {
                        const t = await graphGet("project", e)
                        return t.isNewGraph
                            ? []
                            : t.data.externalItemList?.map((e) => e.id) || []
                    })(e)
                return [...new Set([...i, ...r])]
                    .map((e) => {
                        const t = n[e]
                        if (t && "card" === t.rawType)
                            return (0, W.pick)(t, ["id", "add_time_ms"])
                    })
                    .sort(
                        (e, t) =>
                            ((t && t.add_time_ms) || 0) -
                            ((e && e.add_time_ms) || 0),
                    )
                    .map((e) => e && e.id)
            })(e.project)
        const t = await ua()
        let a = await t.list.card_ids.all(),
            n = []
        if (e.tags?.length) {
            for (let t of e.tags) {
                const e = await getTargetIds(t.id)
                n.push(...e)
            }
            let i = await t.collection.items.filter((e) => {
                let t = [...(e.tags || []), ...(e.tags_in_content || [])]
                return a.includes(e.id) && t.some((e) => n.includes(e))
            })
            a = (0, W.intersection)(
                a,
                i.map((e) => e.id),
            )
        } else {
            let e = await t.collection.items.filter((e) => a.includes(e.id))
            a = (0, W.intersection)(
                a,
                e.map((e) => e.id),
            )
        }
        return a
    },
    cardOpenWindow = async (e) => {
        global.quick_edit_win
            ? be("quick_edit_win_open_tab", "card", e)
            : br("card", e),
            global.quick_edit_win?.show(),
            global.quick_edit_win?.focus()
    },
    createCardIfNeed = async (e, t = !0) => {
        const a = await ua(),
            n = await a.collection.items.find(
                (t) =>
                    !(
                        t.isInTrashcan ||
                        !e.title ||
                        "file" === t.rawType ||
                        t.title !== e.title
                    ),
            )
        if (n) {
            if (!n.rawType) {
                const e = await a.list.card_ids.find((e) => e === n.id)
                n.rawType = e ? "card" : "doc"
            }
            if (("card" !== n.rawType && !t) || "card" === n.rawType) return n
        }
        let i = await itemAdd({...e, rawType: "card"}, void 0, {
            needNotEditTitle: !0,
        })
        return (
            await a.list.card_ids.lpush(i.id),
                trackEvent("new", "card"),
                be(O),
                i
        )
    },
    Ws = require("ajv")
var $s = modulex.fn(Ws)
const Vs = {},
    Hs = async (e) => {
        if (!ea(e)) return null
        let t = le().join(e, "config.json")
        if (!ta(t)) return null
        let a,
            n = await te.promises.readFile(t, "utf-8")
        try {
            a = JSON.parse(n)
        } catch (_err) {
            return console.error(_err), null
        }
        let i = $().pick(a, [
                "name",
                "id",
                "version",
                "type",
                "icon",
                "entry",
                "authorities",
            ]),
            r = Vs[e] || (0, Ja.v4)()
        ;(Vs[e] = r), (i.token = r)
        const o = new ($s())().compile({
            type: "object",
            properties: {
                id: {type: "string"},
                name: {type: "string"},
                version: {type: "string"},
                type: {type: "string"},
                authorities: {type: "array", items: {type: "string"}},
                icon: {type: "string"},
                entry: {type: "string"},
            },
            required: ["id", "name", "version", "type", "authorities", "entry"],
            additionalProperties: !0,
        })
        if (!o(i)) return ye.info(o.errors), null
        if (i.icon) {
            i.icon = le().normalize(le().join(e, i.icon))
            let t = await te.promises.readFile(i.icon, "utf-8"),
                a = Buffer.from(t, "utf-8")
            ;(i.icon_svg = t), (i.icon_b64 = a.toString("base64"))
        }
        return i.entry && (i.entry = le().normalize(le().join(e, i.entry))), i
    },
    pluginAll = async () => {
        let e = [],
            t = await (async () => {
                let e,
                    t = []
                return (e = __dirname), t.push(re.join(e, "plugins")), t
            })()
        for (let a of Tt)
            for (let n of t) {
                let t = le().join(n, a)
                try {
                    let a = await Hs(t)
                    a && e.push(a)
                } catch (_err) {
                    console.error(_err)
                }
            }
        return e
    },
    prefClose = async () => {
        global.pref_win && global.pref_win.close()
    },
    prefShow = async () => {
        global.pref_win ||
        (async () => {
            const e = await configGet("theme").catch(ye.error)
            let t = new fe.BrowserWindow({
                parent: global.main_win || void 0,
                hasShadow: !0,
                backgroundColor: "red",
                frame: !1,
                width: 860,
                height: 658,
                minWidth: 300,
                minHeight: 200,
                maximizable: !1,
                minimizable: !1,
                resizable: !1,
                show: !1,
                fullscreen: !1,
                fullscreenable: !1,
                webPreferences: {
                    contextIsolation: !0,
                    sandbox: !1,
                    preload: le().join(__dirname, "preload.js"),
                    spellcheck: !0,
                    partition: jt,
                },
            })
            if (e) {
                const a =
                    Aa.find((t) => t.theme === e)?.mainBackground || ""
                t.setBackgroundColor(a)
            }
            t
                .loadURL(`${qt()}#/preferences`)
                .catch((e) => console.error(e)),
                (global.pref_win = t),
                t.on("close", (e) => {
                    Ot(t)
                }),
                t.on("closed", (e) => {
                    global.pref_win = null
                })
            try {
                t.show(), t.focus()
            } catch (_err) {
                console.error(_err)
            }
        })(),
            global.pref_win?.show(),
            global.pref_win?.focus(),
            trackEvent("preference", "show")
    }

function purchaseCheckOrderState(e) {
    return Ve("/api/order/state/", {id: e})
}

const purchaseClose = async () => {
    global.purchase_win && global.purchase_win.close()
}

async function purchaseGetProducts(e = !1) {
    let t = []
    ye.debug(zt)
    let a = await Ve("/api/products/sku/info/", {skus: zt.join(",")})
    if ((ye.info(`API return: ${JSON.stringify(a)}`), !a.success))
        return ye.error(`API return error: ${a.message}`), t
    let n = a.data
    return !Array.isArray(n) || n.length <= 0
        ? (ye.info("Unable to retrieve the products information."), t)
        : n.map((t) => ({
            productIdentifier: t.name,
            price: e ? t.price_usd : t.price_cny,
            formattedPrice:
                (e ? "$" : "￥") + (e ? t.price_usd : t.price_cny),
            currencyCode: e ? "USD" : "CNY",
            localizedTitle: t.name,
        }))
}

function purchaseMakeAlipayOrder(e, t) {
    return Ve("/api/order/alipay/buy/", {uid: e, sku: t})
}

function makePaypalOrder(e, t, a = !1) {
    return Ve(
        a ? "/api/order/paypal/creates" : "/api/order/paypal/plan/create",
        {uid: e, sku: t},
    )
}

async function cancelPaypalOrderPlan(e) {
    const {success: t, ...a} = await Ve("/api/order/paypal/plan/cancel/", {
        order_note: e,
    })
    return t
}

const nl = async (e) =>
    e && ta(e) ? (await ie().promises.readFile(e)).toString("base64") : ""

async function purchaseMASBuyProduct(e) {
    if ((ye.info(`buyProduct ${e}`), !fe.inAppPurchase.canMakePayments()))
        throw new Error("The user is not allowed to make in-app purchase.")
    if (!(await fe.inAppPurchase.purchaseProduct(e, 1)))
        throw new Error("The product is not valid.")
    ye.info("The payment has been added to the payment queue."),
        trackEvent("purchase", "buy_product", e)
}

async function purchaseMASGetProducts() {
    let e = []
    ye.debug(Ct),
    fe.inAppPurchase.canMakePayments() ||
    ye.error("The user is not allowed to make in-app purchase.")
    let t = await fe.inAppPurchase.getProducts(Ct)
    return (
        ye.info(`products: ${JSON.stringify(t)}`),
            !Array.isArray(t) || t.length <= 0
                ? (ye.info("Unable to retrieve the product informations."), e)
                : (t.forEach((t) => {
                    ye.info(
                        `The price of ${t.localizedTitle}(${t.productIdentifier}) is ${t.formattedPrice}.`,
                    ),
                        e.push({
                            productIdentifier: t.productIdentifier,
                            localizedTitle: t.localizedTitle,
                            formattedPrice: t.formattedPrice,
                            price: t.price,
                            currencyCode: t.currencyCode,
                            introductoryPrice: t.introductoryPrice,
                        })
                }),
                    e)
    )
}

async function purchaseMASRestore() {
    if ((ye.info("mas restore..."), !fe.inAppPurchase.canMakePayments()))
        throw new Error("The user is not allowed to make in-app purchase.")
    await fe.inAppPurchase.restoreCompletedTransactions(),
        ye.info("The restore has been added to the queue."),
        trackEvent("purchase", "restore")
}

fe.inAppPurchase.on("transactions-updated", async (e, t) => {
    if (!Array.isArray(t)) return
    ye.info("---", t.length), ye.info(JSON.stringify(t))
    let a = [],
        n = [],
        i = ""
    for (let e of t) {
        const t = e.payment
        switch (e.transactionState) {
            case "purchasing":
                ye.info(`Purchasing ${t.productIdentifier}...`)
                break
            case "purchased":
                ye.info(`${t.productIdentifier} purchased.`),
                    ye.info(`transaction: ${JSON.stringify(e)}`),
                    a.push(e),
                    fe.inAppPurchase.finishTransactionByDate(e.transactionDate)
                break
            case "failed":
                ye.info(`Failed to purchase ${t.productIdentifier}.`),
                    fe.inAppPurchase.finishTransactionByDate(e.transactionDate)
                break
            case "restored":
                ye.info(
                    `The purchase of ${t.productIdentifier} has been restored.`,
                ),
                    ye.info(`transaction: ${JSON.stringify(e)}`),
                    n.push(e)
                break
            case "deferred":
                ye.info(
                    `The purchase of ${t.productIdentifier} has been deferred.`,
                )
        }
    }
    ;(i = fe.inAppPurchase.getReceiptURL()),
        ye.info(`Receipt URL: ${i}`),
        n.length > 0
            ? (await (async (e, t) => {
                ye.info(`mas restore dealTransactions: ${e.length}`),
                    await (async function (e, t) {
                        let a = await nl(t)
                        try {
                            return await Ye(
                                "/api/order/apple-appstore/restore/",
                                {
                                    app: "lattics",
                                    transactions: e,
                                    body: a,
                                },
                                {
                                    headers: {
                                        Authorization: `Bearer ${global.access_token}`,
                                        "Content-Type": "application/json",
                                    },
                                },
                            )
                        } catch (_err) {
                            ye.error(
                                `[mas_buyProduct] notifyServerPurchased error: ${_err.message}`,
                            )
                        }
                    })(e, t)
            })(n, i),
                be(A, "restored"))
            : a.length > 0 &&
            (await (async (e, t) => {
                ye.info(`mas restore dealTransactions: ${e.length}`),
                    await (async function (e, t) {
                        let a = e[0]
                        if (a.errorCode)
                            return void ye.error(
                                `[mas_buyProduct] notifyServerPurchased errorCode: ${a.errorCode}`,
                            )
                        let n = await nl(t)
                        try {
                            return await Ye(
                                "/api/order/app-client/notify/",
                                {
                                    app: "lattics",
                                    product: a.payment.productIdentifier,
                                    receipt_id: a.transactionIdentifier,
                                    original_receipt_id:
                                    a.originalTransactionIdentifier,
                                    transactions: e,
                                    body: n,
                                },
                                {
                                    headers: {
                                        Authorization: `Bearer ${global.access_token}`,
                                        "Content-Type": "application/json",
                                    },
                                },
                            )
                        } catch (_err) {
                            ye.error(
                                `[mas_buyProduct] notifyServerPurchased error: ${_err.message}`,
                            )
                        }
                    })(e, t)
            })(a, i),
                be(A, "purchased"))
})
const purchaseShow = async () => {
    global.purchase_win ||
    (async () => {
        const e = await configGet("theme").catch(ye.error)
        let t = new fe.BrowserWindow({
            parent: global.main_win || void 0,
            hasShadow: !0,
            frame: !1,
            width: 898,
            height: 658,
            minWidth: 300,
            minHeight: 200,
            maximizable: !1,
            minimizable: !1,
            skipTaskbar: !0,
            show: !1,
            fullscreen: !1,
            fullscreenable: !1,
            resizable: !1,
            webPreferences: {
                contextIsolation: !0,
                sandbox: !1,
                preload: le().join(__dirname, "preload.js"),
                spellcheck: !0,
            },
        })
        if (e) {
            const a = Aa.find((t) => t.theme === e)?.mainBackground || ""
            t.setBackgroundColor(a)
        }
        t.loadURL(`${qt()}#/purchase`).catch((e) => console.error(e)),
            t.on("close", (e) => {
                Ot(t)
            }),
            t.on("closed", (e) => {
                global.purchase_win = null
            })
        try {
            t.show(), t.focus()
        } catch (_err) {
            console.error(_err)
        }
        global.purchase_win = t
        try {
            t.show(), t.focus()
        } catch (_err) {
            console.error(_err)
        }
    })(),
        global.purchase_win?.show(),
        global.purchase_win?.focus(),
        trackEvent("purchase", "show")
}

async function checkUpdateSetSkipVersion(e) {
    await globalKvSet("skip_version", e)
}

const log = async (e, ...t) => {
        await ye.log(e, ...t)
    },
    openUrl = async (e) => {
        await fe.shell.openExternal(e)
    },
    _l = require("form-data")
var ml = modulex.fn(_l)
const pl = require("os")
var ul = modulex.fn(pl)
const hl = async (e) => {
    const t = new (Jn())(),
        a = await ae().promises.readFile(e),
        n = le().basename(e)
    t.file(n, a)
    const i = le().join(ga(), n + ".zip")
    return new Promise((e, a) => {
        t.generateNodeStream({
            type: "nodebuffer",
            compression: "DEFLATE",
            compressionOptions: {level: 1},
            streamFiles: !0,
        })
            .pipe(ae().createWriteStream(i))
            .on("finish", () => {
                ye.success(".zip written."), e(i)
            })
            .on("error", (e) => {
                ye.error(e), a(e)
            })
    })
}

async function sendFeedback(e, t, a) {
    let n = global.account_info,
        i = n?.username || "N",
        r = n?.uid || "N",
        o = n?.membership?.role_name || "basic"
    e = `${e}\n\nVersion: ${Ne.join(".")}\nUA: ${global.ua}\nPlatform: ${
        ul().platform
    } / ${ul().arch} / ${ul().release}\nAccount: ${i} / ${r} / ${o}\n`
    let s = new (ml())()
    s.append("content", e),
        s.append("email", t),
        s.append("rename_file", "true")
    let l = []
    if (a) {
        l = await (async () => {
            let e = ye.root_dir,
                t = V.glob.sync(le().join(e, "*.log"))
            t = t.slice(t.length - 2)
            let a = []
            for (let e of t) a.push(await hl(e))
            return a
        })()
        for (let e of l) s.append("attachments", ae().createReadStream(e))
    }
    let c = new Promise((e, t) => {
        let a = new Rt.URL(Oe + "/api/feedback/")
        s.submit(
            {
                protocol: a.protocol,
                hostname: a.hostname,
                port: a.port,
                path: a.pathname,
                headers: {Authorization: `Bearer ${global.access_token}`},
            },
            (a, n) => {
                if (a) return ye.error(a), void t(a)
                n.resume(), e()
            },
        )
    })
    return (
        c.finally(() => {
            for (let e of l)
                try {
                    ye.info(`Removing ${e}`), ae().unlinkSync(e)
                } catch (_err) {
                    ye.error(_err)
                }
        }),
            c
    )
}

const gl = (e) => {
        try {
            if (ie().existsSync(e) && ie().statSync(e).isFile()) return !0
        } catch (_err) {
            console.log(_err)
        }
        return !1
    },
    yl = (e) => {
        try {
            if (ie().existsSync(e) && ie().statSync(e).isDirectory()) return !0
        } catch (_err) {
            console.log(_err)
        }
        return !1
    },
    bl = (e, t = !1) => {
        if (t)
            try {
                ie().ensureDirSync(e)
            } catch (_err) {
                return (
                    console.log(
                        `path not exist and can't be created: ${JSON.stringify(
                            e,
                        )}`,
                    ),
                        !1
                )
            }
        try {
            ie().accessSync(e, ie().constants.R_OK | ie().constants.W_OK)
        } catch (_err) {
            return console.log(`no access to: "${e}"`), !1
        }
        return !0
    },
    wl = (0, Y.promisify)(H())

function showItemOrFolder(e) {
    "win32" !== process.platform ||
    e.includes("\\") ||
    (e = e.replace(/\//g, "\\")),
        console.log(e),
        yl(e)
            ? (console.log("isDirectory"), fe.shell.openPath(e))
            : (console.log("is not a directory..."),
                fe.shell.showItemInFolder(e))
}

const xl = require("universal-analytics")
var kl = modulex.fn(xl)

class Al {
    constructor(e, t) {
        if (
            ((this.url = void 0),
                (this.enabled = void 0),
                (this.config = void 0),
                (this.userId = void 0),
                (this.userProperties = void 0),
                (this.screenName = void 0),
                (this.eventQueue = new Set()),
                (this.options = void 0),
                (this.flushEventsPromise = Promise.resolve()),
                (this.flushEventsTimer = void 0),
                !e.measurementId)
        )
            throw new Error(
                "No valid measurementId. Make sure to provide a valid measurementId with a G-XXXXXXXXXX format.",
            )
        if (!t.clientId)
            throw new Error(
                "No valid clientId. Make sure to provide a valid clientId with a UUID (v4) format.",
            )
                ;
        (this.url = "https://www.google-analytics.com/g/collect"),
            (this.enabled = !0),
            (this.config = e),
            (this.options = {
                customArgs: {},
                maxCacheTime: 5e3,
                strictNativeEmulation: !1,
                origin: "firebase",
                ...t,
            })
    }

    async send(e) {
        const {config: t, options: a} = this
        let n = {
            ...a.customArgs,
            v: 2,
            tid: t.measurementId,
            cid: this.options.clientId,
        }
        a.userLanguage && (n.ul = a.userLanguage),
        a.appName && (n.an = a.appName),
        a.appVersion && (n.av = a.appVersion),
        a.docTitle && (n.dt = a.docTitle),
        a.docLocation && (n.dl = a.docLocation),
        a.screenRes && (n.sr = a.screenRes)
        let i = ""
        e.size > 1
            ? ((i = ""),
                e.forEach((e) => {
                    i += Sl(e) + "\n"
                }))
            : 1 === e.size && (n = {...e.values().next().value, ...n})
        const r = Sl(n)
        await fetch(`${this.url}?${r}`, {
            method: "POST",
            cache: "no-cache",
            body: i,
        }).catch((e) => {
        })
    }

    async addEvent(e) {
        const {userId: t, userProperties: a, screenName: n} = this
        if ((t && (e.uid = t), n && (e["ep.screen_name"] = n), a)) {
            for (let t in a) e[t] = a[t]
            this.userProperties = void 0
        }
        this.eventQueue.add(e),
        this.flushEventsTimer ||
        (this.flushEventsTimer = setTimeout(async () => {
            this.flushEventsTimer = void 0
            try {
                await this.flushEventsPromise
            } catch (_err) {
            }
            this.flushEventsPromise = this.flushEvents()
        }, this.options.maxCacheTime))
    }

    async flushEvents() {
        if (!this.eventQueue.size) return
        const e = new Set(this.eventQueue)
        await this.send(e), e.forEach((e) => this.eventQueue.delete(e))
    }

    clearEvents() {
        this.eventQueue.clear(),
        this.flushEventsTimer &&
        (clearTimeout(this.flushEventsTimer),
            (this.flushEventsTimer = 0))
    }

    static parseEvent(e, t, a) {
        if (
            !t ||
            !t.length ||
            t.length > 40 ||
            "_" === t[0] ||
            !t.match(/^[A-Za-z_]+$/) ||
            t.startsWith("firebase_") ||
            t.startsWith("google_") ||
            t.startsWith("ga_")
        )
            throw new Error(
                "Invalid event-name specified. Should contain 1 to 40 alphanumeric characters or underscores. The name must start with an alphabetic character.",
            )
        const n = {en: t, _et: Date.now(), "ep.origin": e.origin}
        if (a)
            for (let e in a)
                n[Tl[e] || ("number" == typeof a[e] ? `epn.${e}` : `ep.${e}`)] =
                    a[e]
        return n
    }

    static parseUserProperty(e, t, a) {
        if (
            !t.length ||
            t.length > 24 ||
            "_" === t[0] ||
            !t.match(/^[A-Za-z_]+$/) ||
            "user_id" === t ||
            t.startsWith("firebase_") ||
            t.startsWith("google_") ||
            t.startsWith("ga_")
        )
            throw new Error(
                "Invalid user-property name specified. Should contain 1 to 24 alphanumeric characters or underscores. The name must start with an alphabetic character.",
            )
        if (
            null != a &&
            e.strictNativeEmulation &&
            ("string" != typeof a || a.length > 36)
        )
            throw new Error(
                "Invalid user-property value specified. Value should be a string of up to 36 characters long.",
            )
        return "number" == typeof a ? `upn.${t}` : `up.${t}`
    }

    async logEvent(e, t) {
        const a = Al.parseEvent(this.options, e, t)
        if (this.enabled) return this.addEvent(a)
    }

    async setAnalyticsCollectionEnabled(e) {
        this.enabled = e
    }

    async setCurrentScreen(e, t) {
        if (e && e.length > 100)
            throw new Error(
                "Invalid screen-name specified. Should contain 1 to 100 characters. Set to undefined to clear the current screen name.",
            )
        this.enabled && (this.screenName = e || void 0)
    }

    async setUserId(e) {
        this.enabled && (this.userId = e || void 0)
    }

    async setUserProperties(e) {
        if (this.enabled)
            for (let t in e) {
                const a = e[t],
                    n = Al.parseUserProperty(this.options, t, a)
                null == a
                    ? this.userProperties && delete this.userProperties[n]
                    : ((this.userProperties = this.userProperties || {}),
                        (this.userProperties[n] = a))
            }
    }

    async resetAnalyticsData() {
        this.clearEvents(),
            (this.screenName = void 0),
            (this.userId = void 0),
            (this.userProperties = void 0)
    }
}

function Sl(e) {
    const t = Date.now()
    return Object.keys(e)
        .map(
            (a) =>
                `${a}=${encodeURIComponent(
                    "_et" === a ? Math.max(t - e[a], 0) : e[a],
                )}`,
        )
        .join("&")
}

const Tl = {currency: "cu"},
    zl = Al
let Cl
const jl = qa.getItem("userid") || (0, Ja.v4)()
qa.setItem("userid", jl)
const Pl = kl()("UA-201476072-1", jl)

function Dl(e, t, a, n) {
    let i = {ec: e, ea: t}
    try {
        Cl ||
        (Cl = new zl(
            {measurementId: "G-Q1Q8W4HRY0"},
            {
                clientId: jl,
                appName: "Lattics Desktop",
            },
        )),
            Cl.logEvent(t, {category: e, label: a, value: n})
    } catch (_err) {
        ye.info("trackEvent ga4 error :", _err)
    }
    a && (i.el = a),
    n && (i.ev = n),
        ye.info(`trackEvent: ${JSON.stringify(i)}`),
        Pl.event(i).send()
}

function trackEvent(e, t, a, n) {
    Dl(e, t, a, n)
}

function trackPageView(e) {
    var t
    ;(t = e), ye.info(`trackPage: ${t}`), Pl.pageview(t).send()
}

function trackScreenView(e, t = "Lattics") {
    !(function (e, t) {
        ye.info(`trackScreen: ${e}, ${t}`), Pl.screenview(e, t).send()
    })(e, t)
}

async function getDataVersion() {
    const e = await ua()
    return (await e.dict.misc.get("data_version")) || 0.1
}

async function setDataVersion(e = 0.1) {
    const t = await ua()
    await t.dict.misc.set("data_version", e)
}

const getAppInstallTime = async () => {
    const e = ca(),
        t = await ie().stat(e)
    return new Date(t.birthtime).getTime()
}

async function writeImageToClipboard(e = "") {
    try {
        if (!(e = e.trim())) return
        let t
        if (e.startsWith("lattics-local")) {
            ye.info("write local image to clipboard", e)
            const a = e
                .replace("lattics-local://assets/", "")
                .trim()
                .split("/")[0]
            if (a) {
                const e = await fileGetFileData(a)
                e && (t = fe.nativeImage.createFromBuffer(e))
            }
        } else if (e.startsWith("data:image"))
            ye.info("write base64 url image to clipboard", e.slice(0, 30)),
                (t = fe.nativeImage.createFromDataURL(e))
        else {
            ye.info("write network image to clipboard", e)
            const a = await fetch(e).then((e) =>
                e.ok ? e.arrayBuffer() : void 0,
            )
            if (a) {
                const e = Buffer.from(a)
                t = fe.nativeImage.createFromBuffer(e)
            }
        }
        t && fe.clipboard.writeImage(t)
    } catch (_err) {
        ye.info("writeImageToClipboard error: ", _err)
    }
}

const Fl = /(?<=src=")lattics-local:\/\/assets\/([\w-]+)\/(?=")/g

async function handleCopiedLocalImages() {
    try {
        let e = fe.clipboard.readHTML()
        const t = fe.clipboard.readText(),
            a = [...e.matchAll(Fl)]
        if (a.length) {
            a.reverse()
            const n = a.map((e) => [e[0], e[1] || "", e.index || -1])
            ye.info("handleCopiedLocalImages: ", "images count", a.length)
            for (let [t, a, i] of n) {
                const n = await fileGetFileData(a),
                    r = await itemGet(a)
                if (n && r) {
                    const a = n.toString("base64"),
                        o = e.slice(0, i),
                        s = e.slice(i + t.length)
                    e =
                        o +
                        `data:image/${r.src?.slice(
                            r.src?.lastIndexOf(".") + 1,
                        )};base64,${a}` +
                        s
                }
            }
            fe.clipboard.write({html: e, text: t})
        }
    } catch (_err) {
        ye.error("Error in handleCopiedLocalImages: ", _err)
    }
}

const themeGetSource = async () => fe.nativeTheme.themeSource

async function themeSetSource(e) {
    let t
    return (
        (fe.nativeTheme.themeSource =
            "light" === e || "dark" === e || "system" === e ? e : "system"),
            (t =
                "system" === e
                    ? fe.nativeTheme.shouldUseDarkColors
                        ? "dark"
                        : "light"
                    : e),
            await configUpdate({
                theme_source: e,
                theme: t,
            }),
            be("theme_updated", t),
            t
    )
}

function closeExportWin() {
    if (global.exportPageWin)
        try {
            return global.exportPageWin.close(), !0
        } catch (_err) {
            return !1
        }
    return !1
}

const Wl = require("fs/promises"),
    $l = [
        {name: "Images", extensions: ["png", "jpg", "gif"]},
        {
            name: "Movies",
            extensions: ["mkv", "avi", "mp4"],
        },
        {name: "PDF", extensions: ["pdf"]},
        {name: "Custom File Type", extensions: ["as"]},
        {
            name: "All Files",
            extensions: ["*"],
        },
    ]

async function Vl(e = "Save File", t, a, n = "All Files", i = "utf8") {
    const r = fe.dialog.showSaveDialogSync({
        title: e,
        defaultPath: t,
        buttonLabel: "Save",
        filters: [$l.find((e) => e.name === n) || $l[0]],
    })
    if (!r) return !1
    console.log(r)
    try {
        return await (0, Wl.writeFile)(r, a, {encoding: i}), !0
    } catch (_err) {
        return console.error(_err), !1
    }
}

const Hl = require("pdf-lib")

async function exportAndSavePDF(e, t, a = "A4") {
    if (global.exportPageWin)
        try {
            let n = await global.exportPageWin.webContents.printToPDF({
                pageSize: a,
                marginsType: 1,
                printBackground: !0,
            })
            const i = await Hl.PDFDocument.load(n)
            if (
                (i.setAuthor(global.account_info?.email || ""),
                    i.setCreator(""),
                    i.setTitle(t),
                    i.setProducer(""),
                "A5" === a)
            ) {
                console.log("page size a5 need remove blank page")
                try {
                    const e = i.getPages()
                    let t = 0
                    for (let a = 0; a < e.length; a++)
                        a % 2 != 0 && (i.removePage(a - t), t++)
                } catch (_err) {
                    console.log(_err)
                }
            }
            return await Vl(e, t, Buffer.from(await i.save()), "PDF")
        } catch (_err) {
            return ye.info("exportAndSavePDF Error: ", _err.message), !1
        }
    return !1
}

const Jl = require("html-to-docx")
var Kl = modulex.fn(Jl)

async function exportArticleToDoc(e, t = !1) {
    let a = new fe.BrowserWindow({
        width: 1e3,
        height: 1e3,
        enableLargerThanScreen: !0,
        show: !1,
        webPreferences: {
            preload: le().join(__dirname, "preload.js"),
            nodeIntegration: !0,
        },
    })
    try {
        await a.loadURL(
            `${qt()}#/export/png/preview/${e}/?${t ? "with-comment=yes" : ""}`,
        ),
            ye.info("did-finish-load"),
            await (function (e = 0) {
                return new Promise((t) => setTimeout(t, e))
            })(2500)
        const n = a.webContents,
            i = await n.executeJavaScript(
                "\n        window.editor.getHTML()\n    ",
            )
        return (
            (await Kl()(i, {
                creator: "Lattics",
                keywords: ["Lattics", "advanced editor"],
                lastModifiedBy: "Lattics",
            }).catch(() => null)) || ""
        )
    } catch (_err) {
        return console.error(_err), ""
    } finally {
        a.close()
    }
    return ""
}

async function exportArticleToPDF(e, t = !1, a = "A4", n = !1, i = !1) {
    let r = new fe.BrowserWindow({
        width: 1e3,
        height: 1e3,
        enableLargerThanScreen: !0,
        show: !1,
        webPreferences: {
            preload: le().join(__dirname, "preload.js"),
            nodeIntegration: !0,
        },
    })
    try {
        const t = new Promise((e, t) => {
            const a = setTimeout(() => {
                    e("Timeout")
                }, 2e5),
                n = (t, n) => {
                    clearTimeout(a), e(n)
                }
            fe.ipcMain.once("export-to-pdf-done", n)
            const i = (e, n) => {
                clearTimeout(a),
                    ye.info("export-article-to-pdf-error > errorInfo: ", n),
                    t({total: 0})
            }
            fe.ipcMain.once("export-to-pdf-error", i),
                global.exportPageWin?.on("closed", () => {
                    clearTimeout(a),
                        fe.ipcMain.off("export-to-pdf-done", n),
                        fe.ipcMain.off("export-to-pdf-error", i),
                        e("closed")
                })
        })
        r.loadURL(
            `${qt()}#/export/pdf/paged/${e}/?pageSize=${a}${
                i ? "&with-page-number=yes" : ""
            }${n ? "&with-footnotes=yes" : ""}`,
        ).then(() => ye.info("did-finish-load"))
        const {total: o} = (await t.catch((e) => e)) || {}
        ye.info("export-article-to-pdf-done > total: ", o, " pages")
        const s = await r.webContents.printToPDF({
            pageSize: a,
            marginsType: 1,
            printBackground: !0,
        })
        if ("A5" !== a)
            return "data:application/pdf;base64," + s.toString("base64")
        console.log("page size a5 need remove blank page")
        try {
            const e = await Hl.PDFDocument.load(s),
                t = e.getPages()
            let a = 0
            for (let n = 0; n < t.length; n++)
                n % 2 != 0 && (e.removePage(n - a), a++)
            return await e.saveAsBase64({dataUri: !0})
        } catch (_err) {
            return (
                console.log(_err),
                "data:application/pdf;base64," + s.toString("base64")
            )
        }
    } catch (_err) {
        return console.error(_err), ""
    } finally {
        r.close()
    }
}

const Xl = {A4: {width: 21e4, height: 297e3}, A5: {width: 148e3, height: 21e4}}

async function exportArticleToPDFOrign(e, t = !1, a = "A4", n = !1, i = !1) {
    console.log(Xl[a])
    let r = new fe.BrowserWindow({
        width: 1e3,
        height: 1e3,
        enableLargerThanScreen: !0,
        show: !1,
        webPreferences: {
            preload: le().join(__dirname, "preload.js"),
            nodeIntegration: !0,
        },
    })
    try {
        await r.loadURL(
            `${qt()}#/export/pdf/preview/${e}/?pageSize=${a}${
                t ? "&with-comment=yes" : ""
            }${n ? "&with-footnotes=yes" : ""}`,
        ),
            ye.info("did-finish-load"),
            await tc(2500)
        const o = r.webContents,
            s = await o.executeJavaScript(
                "\n      document.body.style.overflow = 'hidden';\n      function getRect () {\n        const el = document.querySelector('[data-role=\"editor\"]');\n        const withComment = document.querySelector('[data-type=\"comment\"]')\n        if (el) {\n          if (!withComment) {\n            el.classList.add('withoutComment')\n          }\n          const {left, top, width, height} = el.getBoundingClientRect();\n          const x = left + document.scrollingElement.scrollLeft;\n          const y = top + document.scrollingElement.scrollTop;\n          return {x, y, width, height}\n        } else {\n          return {width: 1000, height: 1000}\n        }\n      }\n      getRect()\n    ",
            ),
            {width: l, height: c} = s
        ye.info(l, c),
            await (async function (e, t, a) {
                e.setContentSize(t, a, !1), await tc(500)
                for (let t = 0; t < 10; t++) {
                    let [t, n] = e.getContentSize()
                    if (n === a || Math.abs(a - n) <= 50) return
                    await tc(500)
                }
            })(r, Math.floor(l), Math.floor(c))
        const d = await r.webContents.printToPDF({
            pageSize: Xl[a],
            marginsType: 0,
            printBackground: !0,
        })
        if (!i) return "data:application/pdf;base64," + d.toString("base64")
        try {
            const e = await Hl.PDFDocument.load(d),
                t = e.getPages(),
                a = t[0],
                {width: n, height: i} = a.getSize()
            console.log(n, i)
            for (let e in t) {
                const a = t[e],
                    i = "" + (+e + 1)
                a.drawText(i, {
                    x: n / 2 - (12 * i.length) / 2,
                    y: 20,
                    size: 12,
                    lineHeight: 12,
                    color: (0, Hl.rgb)(0.1, 0.1, 0.1),
                })
            }
            return await e.saveAsBase64({dataUri: !0})
        } catch (_err) {
            return "data:application/pdf;base64," + d.toString("base64")
        }
    } catch (_err) {
        return console.error(_err), ""
    } finally {
        r.close()
    }
}

function tc(e = 0) {
    return new Promise((t) => setTimeout(t, e))
}

async function exportArticleToPNG(
    e,
    t = !1,
    a = "PC",
    n = !1,
    i = !1,
    r = !1,
    o = "",
) {
    let s = new fe.BrowserWindow({
        width: "MOBILE" === a ? 1080 : 1920,
        height: 1e3,
        enableLargerThanScreen: !0,
        show: !1,
        webPreferences: {
            preload: le().join(__dirname, "preload.js"),
            nodeIntegration: !0,
            partition: jt,
        },
    })
    try {
        const l = new Promise((e, t) => {
            const a = setTimeout(() => {
                    e("Timeout")
                }, 2e5),
                n = (t, n) => {
                    clearTimeout(a), e(n)
                }
            fe.ipcMain.once("export-to-png-done", n)
            const i = (e, n) => {
                clearTimeout(a),
                    ye.info("export-project-to-png-error > errorInfo: ", n),
                    t({total: 0})
            }
            fe.ipcMain.once("export-to-png-error", i),
                global.exportPageWin?.on("closed", () => {
                    clearTimeout(a),
                        fe.ipcMain.off("export-to-png-done", n),
                        fe.ipcMain.off("export-to-png-error", i),
                        e("closed")
                })
        })
        await s.loadURL(
            `${qt()}#/export/png/preview/${e}/?pageSize=${a}${
                n ? "&with-footnotes=yes" : ""
            }${t ? "&with-comment=yes" : ""}${i ? "&is-project=yes" : ""}${
                o ? "&multipleKey=" + o : ""
            }${r ? "&is-hierarchy-title-show=yes" : ""}`,
        ),
            ye.info("did-finish-load")
        const {total: c} = (await l.catch((e) => e)) || {}
        ye.info("export-article-to-png-done > total: ", c)
        const d = s.webContents,
            _ = await d.executeJavaScript(
                "\n      // document.body.style.overflow = 'hidden';\n      function getRect () {\n        const el = document.querySelector('[data-role=\"editor\"]');\n        const dpr = window.devicePixelRatio || 1;\n        const withComment = document.querySelector('[data-type=\"comment\"]')\n        if (el) {\n          if (!withComment) {\n            el.classList.add('withoutComment')\n          }\n          const {left, top, width, height} = el.getBoundingClientRect();\n          const x = left + document.scrollingElement.scrollLeft;\n          const y = top + document.scrollingElement.scrollTop;\n          return {x, y, width, height, dpr}\n        } else {\n          return {width: 1000, height: 1000, dpr}\n        }\n      }\n      getRect()\n    ",
            ),
            {width: m, height: p, dpr: u} = _
        if ((ye.info(m, p, u), p * u > 15e3)) {
            const e = 15e3 / u
            s.setContentSize(Math.floor(m), Math.floor(e), !1)
            const t = Math.floor(p / e),
                n = p % e,
                i = []
            for (let n = t; n > 0; n--)
                i.push(await s.capturePage()),
                n > 1 &&
                (await d.executeJavaScript(
                    `document.querySelector('[data-role="editor"]').style.transform='${
                        "MOBILE" === a
                            ? `scale(${3 / u}) `
                            : `scale(${2 / u}) `
                    }translateY(-${
                        "MOBILE" === a
                            ? ((e * (t - n + 1)) / 3) * u
                            : ((e * (t - n + 1)) / 2) * u
                    }px)'`,
                ),
                    await nc(100))
            return (
                s.setContentSize(Math.floor(m), Math.floor(n), !1),
                    await d.executeJavaScript(
                        `document.querySelector('[data-role="editor"]').style.transform='${
                            "MOBILE" === a ? `scale(${3 / u}) ` : `scale(${2 / u}) `
                        }translateY(-${
                            "MOBILE" === a ? ((p - n) / 3) * u : ((p - n) / 2) * u
                        }px)'`,
                    ),
                    await nc(100),
                    i.push(await s.capturePage()),
                    ye.info(t, i.length),
                    i.map((e) => e.toDataURL())
            )
        }
        s.setContentSize(Math.floor(m), Math.floor(p), !1)
        const h = await s.capturePage()
        return console.log(h.getSize()), h.toDataURL()
    } catch (_err) {
        return console.error(_err), ""
    } finally {
        s.close()
    }
}

function nc(e = 0) {
    return new Promise((t) => setTimeout(t, e))
}

const ic = {A4: {width: 21e4, height: 297e3}, A5: {width: 148e3, height: 21e4}}

async function exportProjectToPDF(e, t = !1, a = "A4", n = !1, i = !1) {
    let r = new fe.BrowserWindow({
        width: 1e3,
        height: 1e3,
        enableLargerThanScreen: !0,
        show: !1,
        webPreferences: {
            preload: le().join(__dirname, "preload.js"),
            nodeIntegration: !0,
        },
    })
    try {
        const t = new Promise((e, t) => {
            const a = setTimeout(() => {
                e("Timeout")
            }, 2e5)
            fe.ipcMain.once("export-to-pdf-done", (t, n) => {
                clearTimeout(a), e(n)
            }),
                fe.ipcMain.once("export-to-pdf-error", (e, n) => {
                    clearTimeout(a),
                        ye.info("export-project-to-pdf-error > errorInfo: ", n),
                        t({total: 0})
                })
        })
        r.loadURL(
            `${qt()}#/export/pdf/project/${e}/?pageSize=${a}${
                i ? "&with-page-number=yes" : ""
            }${n ? "&with-footnotes=yes" : ""}`,
        ).then(() => ye.info("did-finish-load"))
        const {total: o} = (await t.catch((e) => e)) || {}
        ye.info("export-project-to-pdf-done > total: ", o, " pages")
        const s = await r.webContents.printToPDF({
            pageSize: ic[a],
            marginsType: 1,
            printBackground: !0,
        })
        if ("A5" !== a)
            return "data:application/pdf;base64," + s.toString("base64")
        console.log("page size a5 need remove blank page")
        try {
            const e = await Hl.PDFDocument.load(s),
                t = e.getPages()
            let a = 0
            for (let n = 0; n < t.length; n++)
                n % 2 != 0 && (e.removePage(n - a), a++)
            return await e.saveAsBase64({dataUri: !0})
        } catch (_err) {
            return (
                console.log(_err),
                "data:application/pdf;base64," + s.toString("base64")
            )
        }
    } catch (_err) {
        return console.error(_err), ""
    } finally {
        r.close()
    }
}

function hideExportView() {
    return (
        !!global.exportPageWin &&
        (global.exportPageWin.getBrowserView()?.setBounds({
            x: 0,
            y: 0,
            width: 0,
            height: 0,
        }),
            !0)
    )
}

const openExportPreviewWin = async (e, t, a = !1, n = "", i) => {
    await (async (e, t, a = !1, n = "", i) => {
        const r = await configGet("theme").catch(ye.error)
        let o = new fe.BrowserWindow({
            parent:
                i ||
                fe.BrowserWindow.getFocusedWindow() ||
                global.main_win ||
                void 0,
            hasShadow: !0,
            frame: !1,
            width: "image" === t ? 860 : 883,
            height: 720,
            minWidth: 300,
            minHeight: 200,
            maximizable: !1,
            minimizable: !1,
            resizable: !1,
            show: !1,
            fullscreen: !1,
            fullscreenable: !1,
            webPreferences: {
                contextIsolation: !0,
                sandbox: !1,
                preload: le().join(__dirname, "preload.js"),
                spellcheck: !0,
                partition: jt,
            },
        })
        if (r) {
            const e = Aa.find((e) => e.theme === r)?.mainBackground || ""
            o.setBackgroundColor(e)
        }
        const s = o.webContents.session
        ye.info(s.getUserAgent())
        const l = a
            ? n
                ? `?exportProject=yes&multipleKey=${n}`
                : "?exportProject=yes"
            : n
                ? `?multipleKey=${n}`
                : ""
        return (
            o
                .loadURL(`${qt()}#/export/${t}/${e}/${l}`)
                .catch((e) => console.error(e)),
                o.once("ready-to-show", () => {
                    o.show()
                }),
                o.on("close", (e) => {
                    Ot(o)
                }),
                o.on("closed", (e) => {
                    global.exportPageWin = null
                }),
                (global.exportPageWin = o),
                o
        )
    })(e, t, a, n, i)
}

function resizeExportView({
                              x: e = 138,
                              y: t = 106,
                              width: a = 362,
                              height: n = 457,
                          }) {
    global.exportPageWin &&
    global.exportPageWin
        .getBrowserView()
        ?.setBounds({x: e, y: t, width: a, height: n})
}

async function saveExportFile(e, t, a, n, i = "base64") {
    return await Vl(e, t, a, n, i)
}

const dc =
    /(?:lattics-local:\/\/assets\/([\w-]+)\/|data:image\/([\w-]+);base64,[\w+/=]+)/g

async function exportWithImagesAndSave(e, t, a = "md") {
    const n = [...e.matchAll(dc)]
    if (!n.length) {
        const n = await pc(a, t)
        if (!n) return
        return await ie().outputFile(n, e)
    }
    n.reverse()
    const i = n.map((e) => [e[0], e[1] || "", e.index || -1])
    ye.info("markdown export: ", "images count", n.length, "filename", t)
    const r = (
        await Promise.all(
            i.map(async ([e, t, a]) => {
                if (e.startsWith("data:image")) {
                    const t = e.slice(e.indexOf(",") + 1),
                        n = Buffer.from(t, "base64")
                    return {
                        name: `./assets/image-${a}.${e.slice(
                            e.indexOf("/") + 1,
                            e.indexOf(";"),
                        )}`,
                        buf: n,
                        url: e,
                        index: a,
                    }
                }
                {
                    const n = await fileGetFileData(t || ""),
                        i = await itemGet(t || "")
                    return i
                        ? {
                            name:
                                "./" +
                                i.src?.replace(
                                    /^assets\//,
                                    `assets/No-${a}-`,
                                ),
                            buf: n,
                            url: e,
                            index: a,
                            md5: i.md5,
                        }
                        : null
                }
            }),
        )
    ).filter((e) => null !== e)
    ye.info("markdown export: ", "images real count", r.length)
    const o = new (Jn())(),
        s = o.folder("assets")
    let l = {}
    for (let {name: t, buf: a, index: n, url: i, md5: o} of r) {
        o && l[o] && (t = l[o])
        const r = e.slice(0, n),
            c = e.slice(n + i.length)
        ;(e = r + t + c),
        !a ||
        (o && l[o]) ||
        (s?.file(t.replace("./assets/", ""), a), o && (l[o] = t))
    }
    o.file(`${t}.${a}`, e)
    const c = await pc("zip", t)
    c &&
    (await new Promise((e, t) => {
        o.generateNodeStream({
            type: "nodebuffer",
            streamFiles: !0,
        })
            .pipe(ie().createWriteStream(c))
            .on("finish", () => {
                ye.success(".zip written in ", c), e()
            })
            .on("error", (e) => {
                ye.error(e), t(e)
            })
    }))
}

const mc = {
    md: [{name: "Markdown", extensions: ["md", "MD"]}],
    zip: [{name: "Compress", extensions: ["zip", "ZIP"]}],
    txt: [{name: "Text", extensions: ["txt", "TXT"]}],
}

async function pc(e, t) {
    const a = mc[e],
        n = await configGetLocale(),
        i = new Ie(n),
        {lang: r} = i
    return (
        fe.dialog.showSaveDialogSync({
            title: r.export,
            defaultPath: t + "." + e,
            buttonLabel: r.save,
            filters: a,
        }) || ""
    )
}

async function openStandaloneWindow(e, t) {
    const a = new Kt()
    await a.createOrShowWindow(e, t)
}

async function closeStandaloneWindow(e) {
    new Kt().closeWindow(e)
}

const fc = require("font-list"),
    getFonts = async (e = 0, t = !0, a = !1) => {
        if (a || !global.fonts) {
            const a = await (0, fc.getFonts)({disableQuoting: t}).catch(
                (e) => (ye.error("Load Fonts Error", e), []),
            )
            global.fonts = e ? a.slice(0, e) : a
        }
        return global.fonts
    },
    yc = require("md5")
var bc = modulex.fn(yc)

async function wc(e, t) {
    ye.info(`saveBookmark: ${e}`)
    let a = bc()(e),
        n = (await globalKvGet("bookmarks")) || {}
    "object" != typeof n && (n = {}),
        (n[a] = t),
        await globalKvSet("bookmarks", n)
}

async function vc(e) {
    let t = (await globalKvGet("bookmarks")) || {}
    "object" != typeof t && (t = {}),
    t.hasOwnProperty(e) && (delete t[e], await globalKvSet("bookmarks", t))
}

async function xc(e) {
    ye.info(`getBookmark: ${e}`)
    let t,
        a = bc()(e),
        n = ((await globalKvGet("bookmarks")) || {})[a]
    if (!n || "string" != typeof n)
        return (
            n && (await vc(a)),
                e.match(/[\\\/]$/)
                    ? ((e = e.substring(0, e.length - 1)), await xc(e))
                    : void 0
        )
    ye.info("bookmark got.")
    try {
        t = fe.app.startAccessingSecurityScopedResource(n)
    } catch (_err) {
        return ye.info("bookmark invalid."), ye.error(_err), void (await vc(a))
    }
    Array.isArray(global.stopAccessingSecurityScopedResources) ||
    (global.stopAccessingSecurityScopedResources = []),
    t && global.stopAccessingSecurityScopedResources.push(t)
}

function kc() {
    try {
        process.mas &&
        Array.isArray(global.stopAccessingSecurityScopedResources) &&
        (ye.info(
            "stopAccessingSecurityScopedResources: ",
            global.stopAccessingSecurityScopedResources.length,
        ),
            global.stopAccessingSecurityScopedResources.forEach((e) => e()),
            (global.stopAccessingSecurityScopedResources.length = 0))
    } catch (_err) {
        ye.error(_err)
    }
}

async function backupGetDir() {
    let e = await configGet("backup_dir")
    return (
        (e = e || le().join(await pa(), "backup")),
        process.mas && !bl(e, !0) && (await xc(e)),
            await ie().ensureDir(e),
            ye.info(`backup_dir: ${e}`),
            e
    )
}

async function backupDelete(e) {
    let t = le().normalize(await backupGetDir())
    if (!(e = le().normalize(e)).startsWith(t) || !ta(e)) return !1
    try {
        await ae().promises.unlink(e)
    } catch (_err) {
        return ye.error(_err), !1
    }
    return trackEvent("backup", "delete"), !0
}

const Tc = require("v8")

async function backupDo(e, t = {}) {
    const a = await ua()
    if (!a) throw new Error("datadb is null")
    const n = await ha(),
        i = (await a.dict.misc.get("data_version")) || 0.1
    let r = {
        meta: {
            app_version: Ne.join("."),
            bson_version: 1,
            data_version: 1,
            data_version_task: i,
        },
        data: await a.toJSON(),
        Y_CHANGES: [],
    }
    !0 !== t.skip_assets && (r.assets_dir = n)
    const o = await a.collection.items.filter(
        (e) => "file" !== e.rawType && e.currentVersion,
    )
    let s = []
    for (const e of o.filter((e) => e.currentVersion)) {
        const t = {id: e.id}
        if (
            ((t.baseState = Buffer.from(await getBaseState(e.id))),
                (t.localChanges = Zn(await getLocalChanges(e.id))),
                (t.versions = {}),
                e.receivedVersions)
        )
            for (const a of e.receivedVersions)
                t.versions[a.version] = await getVersion(e.id, a.version, !1)
        s.push(t)
    }
    ;(r.Y_CHANGES = s),
        (e = e || (await backupGetDir())),
        await ie().ensureDir(e)
    let l = ee()().format("YYYYMMDD_HHmmss.zip")
    await (async function (e, t) {
        const a = new (Jn())()
        if (
            (a.file("meta.json", JSON.stringify(t.meta)),
                a.file(
                    "data.json",
                    (0, Tc.serialize)(
                        ((n = t.data)?.collection?.items?.data?.length &&
                        n.collection.items.data.forEach((e) => {
                            e.currentVersion &&
                            e.content &&
                            "file" !== e.rawType &&
                            "card" !== e.rawType &&
                            (e.content = "")
                        }),
                            n),
                    ),
                ),
                t.Y_CHANGES.length)
        ) {
            const e = a.folder("Y_CHANGES")
            for (let a of t.Y_CHANGES) {
                if (!e) continue
                const t = e.folder(a.id)
                if (t) {
                    t.file("baseState", a.baseState),
                        t.file("localChanges", a.localChanges)
                    for (let [e, n] of Object.entries(a.versions))
                        n && t.file(e, n)
                }
            }
        }
        var n
        if (t.assets_dir && yl(t.assets_dir)) {
            const e = a.folder("assets")
            let n = await wl(le().join(t.assets_dir, "**")),
                i = t.assets_dir.length
            for (let t of n) {
                if (!gl(t)) continue
                let n = await ie().promises.readFile(t),
                    r = t.substring(i)
                r.match(/^[\\\/]/) && (r = r.substring(1)),
                    e ? e.file(r, n) : a.file(le().join("assets", r), n)
            }
        }
        await ie().ensureDir(le().dirname(e)),
            await new Promise((t, n) => {
                a.generateNodeStream({
                    type: "nodebuffer",
                    streamFiles: !0,
                })
                    .pipe(ie().createWriteStream(e))
                    .on("finish", () => {
                        ye.success(".zip written."), t()
                    })
                    .on("error", (e) => {
                        ye.error(e), n(e)
                    })
            })
    })(le().join(e, l), r),
        trackEvent("backup", "new")
}

const Cc = (e) => {
    let t = e.match(/^(\d{4})(\d{2})(\d{2})_(\d{2})(\d{2})(\d{2})/)
    if (!t) return
    let a = [t[1], t[2], t[3], t[4], t[5], t[6]]
    return new Date(`${a[0]}-${a[1]}-${a[2]} ${a[3]}:${a[4]}:${a[5]}`).getTime()
}

async function backupGetList(e) {
    return (
        (e = e || (await backupGetDir()) || le().join(await pa(), "backup")),
            await (async function (e) {
                let t = [],
                    a = await wl(le().join(e, "*.zip"))
                for (let e of a) {
                    let a = await ae().promises.stat(e),
                        n = le().parse(e).base
                    t.push({
                        path: e,
                        filename: n,
                        size: a.size,
                        ctime_ms: Cc(n) ?? a.mtimeMs,
                    })
                }
                return t.sort((e, t) => t.ctime_ms - e.ctime_ms), t
            })(e)
    )
}

const Pc = async (e, t = "") => {
    const a = await fa()
    return le().join(a, e, t)
}

async function addVersion(e, t, a) {
    const n = await Pc(e, "received_changes")
    try {
        return (
            await ie().outputFile(
                le().join(n, t),
                Array.isArray(a) ? Zn(a) : a,
            ),
                !0
        )
    } catch (_err) {
        return ye.error("add version error, id: " + t, _err), !1
    }
}

const Mc = async (e, t) =>
    new Promise((a, n) => {
        e.nodeStream()
            .pipe(ie().createWriteStream(t))
            .on("finish", () => {
                a()
            })
            .on("error", (e) => {
                ye.error(e), n(e)
            })
    })

async function backupRestoreFrom(e) {
    const t = await ua(),
        a = await pa()
    ye.info(`restore from "${e}"`)
    let n = await (async function (e, t, a) {
        let n = await ie().promises.readFile(t)
        const i = await Jn().loadAsync(n)
        let r,
            o = i.file("meta.json")
        if (!o) return {success: !1, code: "invalid_meta"}
        try {
            r = JSON.parse(await o.async("string"))
        } catch (_err) {
            return ye.error(_err), {success: !1, code: "invalid_meta"}
        }
        if (r.data_version > 1) return {success: !1, code: "need_to_upgrade"}
        let s,
            l = i.file("data.json")
        if (!l) return {success: !1, code: "invalid_data"}
        try {
            s = r.bson_version
                ? (0, Tc.deserialize)(await l.async("nodebuffer"))
                : JSON.parse(await l.async("string"))
        } catch (_err) {
            return ye.error(_err), {success: !1, code: "invalid_data"}
        }
        try {
            await e.loadJSON(s)
        } catch (_err) {
            return ye.error(_err), {success: !1, code: "invalid_data"}
        }
        try {
            const e = await fa()
            await ie().emptyDir(e)
            const t = i.folder("Y_CHANGES")
            t &&
            t.forEach((e, t) => {
                if (t.dir) return
                const [a, n, i] = [
                    ...(t.name.match(/Y_CHANGES\/(.*)\/(.*)/) || []),
                ]
                console.log(n, i),
                    "baseState" === i
                        ? t
                            .async("uint8array")
                            .then((e) => addBaseState(n, e))
                        : "localChanges" === i
                            ? t.async("nodebuffer").then((e) => {
                                const t = Kn(e)
                                let a = 1
                                for (const e of t) addLocalUpdate(n, a++, e)
                            })
                            : t
                                .async("nodebuffer")
                                .then((e) => addVersion(n, i, e))
            })
        } catch (_err) {
            return ye.error(_err), {success: !1, code: "invalid_data"}
        }
        await (async (e, t) => {
            await ie().ensureDir(t)
            let a = e.folder("assets")
            a &&
            (await ie().emptyDir(le().join(t, "assets")),
                a.forEach(async (e, a) => {
                    if (a.dir) return
                    const n = le().join(t, a.name)
                    await ie().ensureDir(le().dirname(n)), await Mc(a, n)
                }))
        })(i, a)
        const c = r.data_version_task || 0.1
        return (
            await e.dict.misc.set("data_version", c),
                ye.info("current data version:", c),
                Qt(),
                {success: !0}
        )
    })(t, e, a)
    return (
        ye.info(n),
        n.success && be("restore_done"),
            trackEvent("backup", "restore"),
            n
    )
}

async function backupSetDir() {
    let {lang: e} = await qe(),
        t = {
            title: e.open_dir,
            defaultPath: void 0,
            properties: ["openDirectory", "createDirectory", "promptToCreate"],
            securityScopedBookmarks: !0,
        },
        a = await fe.dialog.showOpenDialog(t)
    if (a.canceled) return {success: !1}
    const {filePaths: n, bookmarks: i, canceled: r} = a
    if (r || 0 === n.length) return {success: !1}
    let o = n[0]
    var s
    return (
        i && i[0] && (await wc(o, i[0])),
            (s = o),
            !0,
        (s = le().normalize(s)).endsWith(le().sep) || (s += le().sep),
            (o = s),
            await configSet("backup_dir", o),
            ye.info(`set backup dir to ${o}`),
            {
                success: !0,
                data: {dir: o},
            }
    )
}

const Lc = require("electron/main")

async function winClose() {
    const {sender: e} = this,
        t = Lc.BrowserWindow.fromWebContents(e)
    t && (await t.close())
}

async function winMaximize() {
    const {sender: e} = this,
        t = Lc.BrowserWindow.fromWebContents(e)
    if (t) {
        if (t.isFullScreen()) return t.setFullScreen(!1), void t.unmaximize()
        t.isMaximized() ? t.unmaximize() : t.maximize()
    }
}

async function winMinimize() {
    const {sender: e} = this,
        t = Lc.BrowserWindow.fromWebContents(e)
    t && t.minimizable && (await t.minimize())
}

async function accountDelete() {
    let e,
        t = global.access_token
    if (!t) return {success: !1, code: "no_access_token"}
    try {
        e = await Ve(
            "/api/user/deactivate/",
            {},
            {headers: {Authorization: `Bearer ${t}`}},
        )
    } catch (_err) {
        return _err.response && 401 === _err.response.status
            ? {success: !1, code: "unauthorized"}
            : {
                success: !1,
                code: "unknown",
            }
    }
    if ((ye.info("main/actions/account/delete.ts:", e), e.success)) {
        let e = global.uid
        setTimeout(async () => {
            await (async function (e) {
                if (!e || "guest" === e) return
                let t = [await pa(e), await _a(e)]
                for (let e of t) {
                    ye.info(`delete local data dir: ${e}`)
                    try {
                        await ae().promises.rm(e, {recursive: !0, force: !0})
                    } catch (_err) {
                        ye.error(_err)
                    }
                }
            })(e)
        }, 3e3),
            (global.access_token = void 0),
            (global.account_info = void 0),
            (global.uid = void 0),
            await st({}),
            await ya(),
            be(j),
            trackEvent("account", "delete")
    }
    return e
}

async function accountGetInfo() {
    return global.account_info || null
}

async function accountGetUid() {
    return global.uid || "guest"
}

const Uc = require("node-machine-id")
let Gc = "",
    Wc = "--lattics-mid-unknown--"
try {
    ;(Wc = (0, Uc.machineIdSync)()), ye.info("mid:", Wc)
} catch (_err) {
    console.log(_err)
}
try {
    Gc = ul().cpus()[0].model
} catch (_err) {
    console.log(_err)
}
const $c = {
    mn: ul().hostname(),
    mid: Wc,
    platform: ul().platform(),
    os_type: ul().type(),
    os_arch: ul().arch(),
    os_release: ul().release(),
    os_totalmem: ul().totalmem(),
    cpu_0: Gc,
}

function Vc() {
    return $c
}

async function Hc(e) {
    ;(global.access_token = e.access_token),
    e.expires_in &&
    !e.expires_at_ms &&
    (e.expires_at_ms = Math.floor(Date.now() + 1e3 * e.expires_in))
    let t = {token: e},
        a = await accountGetInfoFromServer()
    a.success && (t.info = a.data), await st(t), await ya()
    let n = await pa(),
        i = !ea(n)
    ye.info(`sign_in db_dir: ${n}, is_new_login: ${i}`)
    let r = {uid: global.uid || "guest", is_new_login: i}
    ye.info(`sign_in state: ${JSON.stringify(r)}`), be(C, r)
}

async function accountSignIn(e, t) {
    let a = Vc(),
        n = await Ye("/api/account/login/email/", {
            email: e,
            password: t,
            client_id: Re,
            client_secret: Fe,
            device_id: a.mid,
        })
    return (
        ye.info("main/actions/account/signIn.ts:", JSON.stringify(n, null, 2)),
            n.success
                ? ("guest" === global.uid && (await backupDo()),
                    await Hc(n.data),
                    trackEvent("account", "sign_in"),
                    n)
                : n
    )
}

async function accountGuestSignIn() {
    let e = Vc()
    ye.info(`client_info: ${JSON.stringify(e)}`)
    let t = await Ye(
        "/api/account/login/guest/",
        {
            client_id: Re,
            client_secret: Fe,
            device_id: e.mid,
        },
        {headers: {"Content-Type": "application/json"}},
    )
    return (
        ye.info(
            "main/actions/account/guestSignIn.ts:",
            JSON.stringify(t, null, 2),
        ),
            t.success && t.data
                ? (await Hc(t.data),
                    trackEvent("account", "guest_sign_in"),
                    {success: !0})
                : t
    )
}

async function accountHasGuestData() {
    const e = global.uid
    if (!e || "guest" === e)
        return (
            ye.info("hasGuestData: current is guest account, return false"), !1
        )
    let t = await pa("guest"),
        a = le().join(t, "collection"),
        n = ea(a)
    return ye.info(`hasGuestData: ${n}, ${a}`), n
}

async function Zc(e, t, a) {
    let n = t,
        i = a
    t.edit_time_ms > a.edit_time_ms && ((n = a), (i = t))
    let r = n.tree || [],
        o = i.tree || []
    ;(i.tree = (function (e, t) {
        let a = we(e).map((e) => e.id),
            n = we(t).map((e) => e.id),
            i = ((r = n), a.filter((e) => !r.includes(e)))
        var r
        if (a.length <= n.length && 0 === i.length) return t
            ;
        (e = $().cloneDeep(e)), (t = $().cloneDeep(t))
        let o = e.filter((e) => i.includes(e.id))
        return [...t, ...o]
    })(r, o)),
        await e.collection.projects.update((e) => e.id === i.id, i)
}

async function Qc(e, t, a, n, i) {
    if (!t.link_to && !a.link_to) {
        if (
            ((t.item_ids = t.item_ids
                ? t.item_ids.concat(a.item_ids || [])
                : a.item_ids),
            t.item_ids && (t.item_ids = [...new Set(t.item_ids)]),
                a.child?.length)
        ) {
            t.child || (t.child = [])
            const e = t.child.map((e) => n[e].split("/").at(-1))
            for (let n of a.child)
                t.child.includes(n) ||
                e.includes(i[n].split("/").at(-1)) ||
                t.child.push(n)
        }
        await e.collection.tags.update((e) => e.id === t.id, t)
    }
}

async function Xc(e, t, a) {
    let n = t.tags,
        i = a.tags
    "string" == typeof n && (n = n.split(",")),
    "string" == typeof i && (i = i.split(",")),
        (n = n ? n.concat(i || []) : i),
    n && (t.tags = [...new Set(n)]),
    a.color && (t.color = a.color),
        await e.collection.items.update(["id", t.id], t)
}

async function ed(e, t, a) {
    let n = {...t.nodeMap, ...a.nodeMap},
        i = [...a.linkList]
    for (let e of t.linkList)
        i.find(
            (t) =>
                e.from === t.from && e.to === t.to && e.linkType === t.linkType,
        ) || i.push(e)
    let r = a.externalItemList ? [...a.externalItemList] : []
    if (t.externalItemList)
        if (r.length)
            for (let e of t.externalItemList)
                r.find((t) => e.id === t.id) || r.push(e)
        else r = [...t.externalItemList]
    await e.collection.graphs.update(
        (e) => e.typedId === t.typedId && e.graphType === t.graphType,
        {
            scale: a.scale,
            position: a.position,
            nodeMap: n,
            linkList: i,
            externalItemList: r,
            sortList: Array.from(
                new Set([...a.sortList, ...t.sortList].filter((e) => n[e])),
            ),
        },
    )
}

async function td(e, t, a = !0) {
    const n = ft(t)
    for (let t of n)
        await e.collection.items.update(["id", t], {isInTrashcan: a})
}

const ad = (e) => {
    const t = e.reduce((e, t) => ((e[t.id] = t), e), {}),
        a = {},
        n = (e, i) => {
            if (!i) return e
            const r = t[i]
            let o = a[i]
            return o || ((o = n(r.name, r.parent)), (a[i] = o)), o + "/" + e
        }
    return (
        e.forEach(({id: e, name: t, parent: i}) => {
            a[e] || (a[e] = n(t, i))
        }),
            a
    )
}

async function accountMergeFromGuest() {
    await (async function () {
        ye.info(`merging data from guest to ${global.uid}...`)
        let e = await pa("guest"),
            t = await ua()
        if (e === t.dir)
            return void ye.info(
                `current_db.dir is the same as guest data dir (${e}).`,
            )
        let a = new (q())(e)
        const n = ad(await a.collection.tags.all()),
            i = ad(await t.collection.tags.filter((e) => !e.link_to)),
            r = {}
        let o = [
            "trashcan",
            "tags",
            "items",
            "cards",
            "projects",
            "graphs",
            "cardbooks",
        ]
        for (let e of o) {
            ye.info(`to merge collection.${e}...`)
            let o = await a.collection[e].all(),
                s = 0
            for (let a of o) {
                let o = await t.collection[e].find(
                    "graphs" === e
                        ? (e) =>
                            e.typedId === a.typedId &&
                            e.graphType === a.graphType
                        : "trashcan" === e
                            ? (e) => e.data.id === a.data.id
                            : (e) => e.id === a.id,
                )
                if (o)
                    if ("projects" === e) await Zc(t, o, a)
                    else if ("tags" === e) {
                        const e = o.link_to
                        e && (r[a.id] = e), await Qc(t, o, a, i, n)
                    } else
                        "items" === e
                            ? await Xc(t, o, a)
                            : "graphs" === e && (await ed(t, o, a))
                else if ("trashcan" === e)
                    "project" === a.type &&
                    !(await t.collection.projects.find(
                        (e) => e.id === a.data.id,
                    )) &&
                    (await t.collection[e].insert(a)),
                    "card" === a.type &&
                    ((await t.collection.items.find([
                            "id",
                            a.data.id,
                        ])) ||
                        (await t.collection[e].insert(a))),
                    "item" === a.type && (await t.collection[e].insert(a))
                else if ("projects" === e)
                    !(await t.collection.trashcan.find(
                        (e) => e.data.id === a.id,
                    )) && (await t.collection[e].insert(a))
                else if ("tags" === e)
                    if (a.link_to) await t.collection[e].insert(a)
                    else {
                        const o = await t.collection[e].find(
                            (e) => i[e.id] === n[a.id],
                        )
                        o
                            ? ((r[a.id] = o.id),
                                await t.collection[e].insert({
                                    ...a,
                                    link_to: o.id,
                                }))
                            : await t.collection[e].insert(a)
                    }
                else await t.collection[e].insert(a)
                s++
            }
            ye.info(`merged ${s} ${e}`)
        }
        let s = await t.collection.tags.all()
        for (let e of s)
            if (e.link_to)
                r[e.link_to] &&
                (await t.collection.tags.update((t) => t.id === e.id, {
                    link_to: r[e.link_to],
                }))
            else if (e.parent && r[e.parent]) {
                const a = r[e.parent]
                await t.collection.tags.update((t) => t.id === e.id, {
                    parent: a,
                })
                const n = await t.collection.tags.find((e) => e.id === a)
                n &&
                (await t.collection.tags.update((e) => e.id === a, {
                    child: n.child ? [...n.child, e.id] : [e.id],
                }))
            }
        let l = await t.collection.trashcan.all()
        for (let e of l) {
            if ("item" === e.type && e.project_id) {
                const a = e.project_id,
                    n = await t.collection.projects.find((e) => e.id === a)
                if (n && ve(n.tree, (t) => t.id === e.data.id)) {
                    t.collection.trashcan.delete((t) => t.id === e.id),
                        td(t, [e], !1)
                    continue
                }
            }
            td(t, [e])
        }
        o = ["card_ids"]
        for (let e of o) {
            ye.info(`to merge list.${e}...`)
            let n = await a.list[e].all(),
                i = await t.list[e].all()
            if ("card_ids" === e)
                for (let a of n)
                    i.includes(a) ||
                    (await t.collection.trashcan.find(
                        (e) => e.data.id === a,
                    )) ||
                    (await t.list[e].push(a))
            else for (let a of n) i.includes(a) || (await t.list[e].push(a))
        }
        const c = await (async function (e, t) {
            const a = await e.list.root_project_ids.all(),
                n = await t.list.root_project_ids.all(),
                i = await e.collection.projects.all(),
                r = i.flatMap((e) =>
                    e.children ? e.children.map((e) => e.id) : [],
                ),
                o = i.map((e) => e.id).filter((e) => !r.includes(e))
            return Array.from(
                new Set([
                    ...a.filter((e) => o.includes(e)),
                    ...n.filter((e) => o.includes(e)),
                    ...o,
                ]),
            )
        })(t, a)
        await t.list.root_project_ids.clear(),
            await t.list.root_project_ids.rextend(...c)
        const d = (await t.dict.misc.get("data_version")) || 0.1,
            _ = (await a.dict.misc.get("data_version")) || 0.1,
            m = Math.min(d, _)
        t.dict.misc.set("data_version", m),
            ye.info("current data version:", m),
            Qt()
    })(),
        await (async function () {
            ye.info("merging assets from guest...")
            let e = le().join(await pa("guest"), "assets"),
                t = await ha()
            if (e === t)
                return void ye.info(
                    "current_assets_dir is the same as guest assets dir.",
                )
            let a = H().sync(le().join(e, "*"))
            ye.info(`assets count: ${a.length}`)
            for (let e of a) {
                let a = le().join(t, le().basename(e))
                ;(await ie().pathExists(a)) || (await ie().copy(e, a))
            }
        })(),
        await (async function () {
            ye.info("merging Y changes from guest...")
            let e = le().join(await pa("guest"), "Y_CHANGES"),
                t = await fa()
            if (e === t)
                return void ye.info(
                    "current_y_changes_dir is the same as guest Y changes dir.",
                )
            let a = H().sync(le().join(e, "*"))
            ye.info(`Y changes count: ${a.length}`)
            for (let e of a) {
                let a = le().join(t, le().basename(e))
                ;(await ie().pathExists(a)) || (await ie().copy(e, a))
            }
        })(),
        await (async function () {
            let e = await pa("guest"),
                t = H().sync(le().join(e, "*"))
            const a = ["backup", "assets"]
            for (let e of t)
                if (!a.includes(le().basename(e)))
                    try {
                        await ie().remove(e)
                    } catch (_err) {
                        ye.error(_err)
                    }
        })(),
        trackEvent("account", "merge_data_from_guest")
}

async function accountRefreshToken(e) {
    try {
        if ((ye.info(`Refreshing token "${e}"...`), !e))
            return ye.warning("Refresh token is empty."), null
        let t = await He(
            Be + "/o/token/",
            {
                client_id: Re,
                client_secret: Fe,
                grant_type: "refresh_token",
                refresh_token: e,
            },
            {
                is_form: !0,
                headers: {
                    "Content-Type":
                        "application/x-www-form-urlencoded; charset=utf-8",
                },
            },
        )
        if (200 !== t.status)
            return void ye.warning(`Refresh token failed. Status: ${t.status}`)
        ye.info(
            `Refresh token success, data: ${JSON.stringify(t.data, null, 2)}`,
        )
        let a = t.data
        if (!a.access_token)
            return void ye.warning(
                "Refresh token failed, access_token is empty.",
            )
        a.expires_in &&
        !a.expires_at_ms &&
        (a.expires_at_ms = Date.now() + 1e3 * a.expires_in)
        let n = {token: a, info: global.account_info}
        await st(n), trackEvent("account", "refresh_token")
    } catch (_err) {
        throw (
            (ye.error("refresh_token failed", _err),
                (global.is_refresh_token_failed = !0),
                _err)
        )
    }
}

async function accountResetPassword_check(e, t) {
    let a = await Ye("/api/account/reset-password/check-code/", {
        email: e,
        short_code: t,
    })
    return console.log("main/actions/account/resetPassword_check.ts:", a), a
}

async function accountResetPassword_request(e) {
    let t = await Ye("/api/account/reset-password/request/", {email: e})
    return console.log("main/actions/account/resetPassword_request.ts:", t), t
}

async function accountResetPassword_set(e, t, a) {
    let n = await Ye("/api/account/reset-password/with-code/", {
        email: e,
        short_code: t,
        password: a,
    })
    return (
        console.log("main/actions/account/resetPassword_set.ts:", n),
            trackEvent("account", "reset_password"),
            n
    )
}

async function accountSignOut() {
    ;(global.uid = "guest"),
        (global.access_token = void 0),
        (global.account_info = void 0),
        await st({}),
        await ya(),
        be(j),
        trackEvent("account", "sign_out"),
        await globalKvSet("auto_migrate_from_guest_after_sign_in", !0),
        Ve("/api/logout/", {device_id: ""}).then((e) => {
            console.log("main/actions/account/signOut.ts:", e)
        })
}

async function accountSignUp(e, t) {
    let a = Vc(),
        n = await Ye("/api/account/register/email/", {
            email: e,
            password: t,
            client_id: Re,
            client_secret: Fe,
            device_id: a.mid,
        })
    return (
        ye.info("main/actions/account/signUp.ts:", n),
            be("sign_up"),
            trackEvent("account", "sign_up"),
            n
    )
}

async function accountUpdateInfo(e) {
    if (!global.access_token) return {success: !1, code: "invalid_user"}
    e.username &&
    !e.username.endsWith("@lattics") &&
    (e.username = `${e.username}@lattics`)
    let t = await Ye("/api/user/info/", e, {
        headers: {
            Authorization: `Bearer ${global.access_token}`,
            "Content-Type": "application/json",
        },
    })
    if ((console.log("main/actions/account/updateInfo.ts:", t), !t.success))
        return t
    let a = (await lt()) || {},
        n = await accountGetInfoFromServer()
    return (
        n.success && (a.info = n.data),
            await st(a),
            trackEvent("account", "update_info"),
            t
    )
}

async function accountVerifyEmail(e, t) {
    let a = await Ye("/api/account/email/verify/", {
        client_id: Re,
        client_secret: Fe,
        email: e,
        short_code: t,
    })
    if ((ye.info("main/actions/account/verifyEmail.ts:", a), !a.success))
        return a
    global.access_token = a.data.access_token
    let n = a.data
    n.expires_in &&
    !n.expires_at_ms &&
    (n.expires_at_ms = Date.now() + 1e3 * n.expires_in)
    let i = {token: n},
        r = await accountGetInfoFromServer()
    r.success && (i.info = r.data), await st(i)
    let o = await pa(),
        s = {uid: global.uid || "guest", is_new_login: yl(o)}
    return (
        ye.info(`sign_in state: ${JSON.stringify(s)}`),
            await ya(),
            be(C, s),
            trackEvent("account", "verify_email"),
            a
    )
}

async function getIsRefreshTokenFailed() {
    return !!global.is_refresh_token_failed
}

const tagAdd = async (e) => {
        const t = await ua()
        if (!(e = e.trim())) return null
        let a = await t.collection.tags.find((t) => t.name === e)
        return (
            a ||
            ((a = {
                id: (0, Ja.v4)(),
                name: e,
                item_ids: [],
            }),
                await t.collection.tags.insert(a),
                be(P, "add"),
                a)
        )
    },
    tagAll = async (e = "name") => {
        const t = await ua()
        let a = await t.collection.tags.all()
        return (
            "name" === e
                ? (a = a.sort((e, t) => e.name.localeCompare(t.name)))
                : "count" === e &&
                (a = a.sort(
                    (e, t) =>
                        (t.item_ids?.length || 0) - (e.item_ids?.length || 0),
                )),
                a
        )
    }

async function hd(e, t) {
    const a = await getTargetIds(t)
    await e.collection.tags.delete((e) => e.id === t || e.link_to === t),
        console.log(a)
    let n = await e.collection.items.filter(
        (e) => e.tags && e.tags.some((e) => a.includes(e)),
    )
    for (let t of n) {
        if (!t) continue
        let n = t.tags || []
        if (!n.length) continue
        const i = (0, W.difference)(n, a)
        console.log(i),
        i.length !== n.length &&
        ((t.tags = i), await e.collection.items.update(["id", t.id], t))
    }
    be(P, "delete", "", t)
}

const tagDelete = async (e) => {
        const t = await ua(),
            a = await t.collection.tags.all(),
            n = a.find((t) => t.id === e)
        if (n) {
            if (n.parent) {
                const e = a.find((e) => e.id === n.parent)
                if (e && e.child && e.child.includes(n.id)) {
                    const a = e.child.indexOf(n.id)
                    e.child.splice(a, 1),
                        await t.collection.tags.update((t) => t.id === e.id, {
                            child: e.child,
                        })
                }
            }
            const e = [n]
            !(function e(t, n = []) {
                t.child?.forEach((t) => {
                    const i = a.find((e) => e.id === t)
                    n.push(i), i.child && e(i, n)
                })
            })(n, e)
            for (let a of e) await hd(t, a.id)
        }
    },
    tagGet = async (e) => {
        const t = await ua()
        return await t.collection.tags.find((t) => t.id === e)
    },
    tagGetByName = async (e) => {
        const t = await ua()
        return await t.collection.tags.find((t) => t.name === e && !t.link_to)
    },
    tagScan = async (e) => {
        const t = await ua()
        ye.info("tag scan")
        let a = await t.collection.items.filter((e) => !!e.tags),
            n = await t.collection.tags.filter((e) => !e.link_to),
            i = n.reduce((e, t) => ((e[t.name] = t), e), {}),
            r = !1
        for (let o of a) {
            if ("string" != typeof o.tags) continue
            let a = o.tags?.split(",") || []
            const s = []
            for (let e of a) {
                if (((e = e.trim()), !e)) continue
                let a = i[e]
                if (a) {
                    let e = a.item_ids || []
                    e.includes(o.id) ||
                    (e.push(o.id),
                        (a.item_ids = e),
                        await t.collection.tags.update((e) => e.id === a.id, a),
                        (r = !0))
                } else {
                    let a = {id: (0, Ja.v4)(), name: e, item_ids: [o.id]}
                    ye.info(`new tag from scan: "${a.name}"`),
                        (a = await t.collection.tags.insert(a)),
                        n.push(a),
                        (i[e] = a),
                        (r = !0)
                }
                i[e] && s.push(i[e].id)
            }
            e
                ? e.update(o.id, {tags: s})
                : (await t.collection.items.update(["id", o.id], {tags: s}),
                    be(f, o.id))
        }
        r && be(P)
    },
    tagUpdateName = async (e, t) => {
        const a = await ua()
        let n = await a.collection.tags.find((t) => t.id === e)
        if (!n) return !1
        if (
            n.link_to &&
            ((n = await a.collection.tags.find((e) => e.id === n?.link_to)), !n)
        )
            return !1
        if (n.name === t) return !1
        if (
            await a.collection.tags.find(
                (e) =>
                    e.name === t &&
                    !e.link_to &&
                    (n?.parent ? e.parent == n?.parent : !e.parent),
            )
        )
            return !1
        await a.collection.tags.update((e) => e.id === n?.id, {name: t})
        const i = await a.collection.tags.filter(
            (e) => !(!n || e.link_to !== n.id),
        )
        if ((console.log(i), i.length))
            for (let e of i)
                await a.collection.tags.update((t) => t.id === e.id, {name: t})
        return be(P, "updateName", t, e, n.name), !0
    }

async function addHierarchicalTags(e) {
    const t = await ua()
    if (!(e = e.trim())) return null
    const a = e
            .split("/")
            .map((e) => e.trim())
            .filter((e) => !!e),
        n = [],
        i = [],
        r = []
    for (let e = 0, o = null; e < a.length; e++) {
        let s = await t.collection.tags.find(
            (t) =>
                !t.link_to &&
                t.name === a[e] &&
                (o ? t.parent === o.id : !t.parent),
        )
        console.log(s),
            s
                ? i.push(s)
                : ((s = {
                    id: (0, Ja.v4)(),
                    name: a[e],
                    item_ids: [],
                    parent: o ? o.id : void 0,
                }),
                    r.push(s)),
        o && (o.child = [...new Set([...(o.child || []), s.id])]),
            (o = s),
            n.push(s)
    }
    console.log(i, r)
    for (let e of i)
        await t.collection.tags.update((t) => t.id === e.id, {child: e.child})
    for (let e of r) await t.collection.tags.insert(e)
    return be(P, "add"), n[n.length - 1] || null
}

async function filterTags(e = "", t = !1) {
    const a = await ua()
    if (t) {
        const t = await tagGetByName(e)
        e = t?.id || ""
    }
    return await a.collection.tags.filter((t) =>
        e ? t.parent === e : !t.parent,
    )
}

async function getHierarchicalTag(e, t = !1) {
    const a = await ua()
    let n = await a.collection.tags.find((t) => t.id === e)
    if (
        (n?.link_to &&
        (n = await a.collection.tags.find((e) => e.id === n?.link_to)),
        !t || !n)
    )
        return n
    let i = n
    const r = [n.name]
    for (; i?.parent;) {
        const e = await a.collection.tags.find((e) => e.id === i?.parent)
        if (!e) break
        r.unshift(e.name), (i = e)
    }
    return {...n, hierarchicalTagName: r.join("/")}
}

async function getHierarchicalTags(e) {
    const t = await ua()
    let a = await t.collection.tags.find((t) => t.id === e)
    if (
        (a?.link_to &&
        (a = await t.collection.tags.find((e) => e.id === a?.link_to)),
            !a)
    )
        return []
    const n = [a]
    let i = a
    for (; i?.parent;) {
        const e = await t.collection.tags.find((e) => e.id === i?.parent)
        if (!e) break
        n.unshift(e), (i = e)
    }
    return n
}

async function allHierarchicalTags() {
    const e = await ua()
    let t = await e.collection.tags.filter((e) => !e.link_to)

    function a(e, n = [], i = []) {
        e &&
        e?.child?.forEach((e) => {
            const r = t.find((t) => t.id === e)
            r &&
            ((r.hierarchicalTagName =
                n.join("/") + (n.length ? "/" : "") + r.name),
                i.push(r),
            r.child && ((r.hasChild = !0), a(r, [...n, r.name], i)))
        })
    }

    return t
        .filter((e) => e && !e.parent)
        .reduce(
            (e, t) => (
                e.push(t),
                    (t.hierarchicalTagName = t.name),
                t.child && ((t.hasChild = !0), a(t, [t.name], e)),
                    e
            ),
            [],
        )
}

async function getTargetIds(e, t = !0) {
    const a = await ua(),
        n = await a.collection.tags.filter(
            (a) => (t && a.id === e) || a.link_to === e,
        )
    return n.length ? n.map((e) => e.id) : []
}

const tagUpdateColor = async (e, t) => {
        const a = await ua()
        return (
            !!(await a.collection.tags.update((t) => t.id === e, {color: t}))
                .length && (be(P, "updateColor", t, e), !0)
        )
    },
    tagGetHierarchicalName = async (e) => {
        if (!e) return
        const t = await ua()
        let a = await t.collection.tags.find((t) => t.id === e)
        if (!a) return
        const n = [a.name]
        for (
            ;
            a.parent &&
            ((a = await t.collection.tags.find((e) => e.id === a?.parent)), a);
        )
            n.unshift(a.name)
        return n.join("/")
    }

async function tagUpdateParent(e, t) {
    if (!e || !t || e === t) return !1
    const a = await ua(),
        n = await a.collection.tags.find((t) => t.id === e)
    if (!n) return !1
    if (n.parent === t) return !1
    if (
        await a.collection.tags.find((e) => e.parent === t && e.name === n.name)
    )
        return !1
    const i = await a.collection.tags.find((e) => e.id === t)
    if (!i) return !1
    if (n.parent) {
        const t = await a.collection.tags.find((e) => e.id === n.parent)
        if (t) {
            const n = (t.child || []).filter((t) => t !== e)
            await a.collection.tags.update((e) => e.id === t.id, {child: n})
        }
    }
    const r = [...(i.child || []), e]
    return (
        await a.collection.tags.update((e) => e.id === i.id, {child: r}),
            await a.collection.tags.update((t) => t.id === e, {parent: t}),
            be(P, "updateParent", t, e),
            !0
    )
}

async function tagMoveToRoot(e) {
    if (!e) return !1
    const t = await ua(),
        a = await t.collection.tags.find((t) => t.id === e)
    if (!a || !a.parent) return !1
    if (
        await t.collection.tags.find(
            (e) => e.name === a.name && !e.link_to && !e.parent,
        )
    )
        return !1
    if (a.parent) {
        const n = await t.collection.tags.find((e) => e.id === a.parent)
        if (n) {
            const a = (n.child || []).filter((t) => t !== e)
            await t.collection.tags.update((e) => e.id === n.id, {child: a})
        }
    }
    return (
        await t.collection.tags.update((t) => t.id === e, {parent: ""}),
            be(P, "moveToRoot", "", e),
            !0
    )
}

const graphAdd = async (e, t = "") => {
        const a = await ua(),
            n = new Date().getTime()
        let i = {
            id: (0, Ja.v4)(),
            createTime: n,
            updateTime: n,
            scale: 1,
            position: {x: 0, y: 0},
            graphType: e,
            typedId: t,
            graphViewType: "mind-map",
            filter: Tn,
            nodeMap: {},
            linkList: [],
            sortList: [],
        }
        return await a.collection.graphs.insert(i), i
    },
    graphUpdate = async (e) => {
        const t = await ua(),
            a = new Date().getTime()
        await t.collection.graphs.update(
            (t) => t.graphType === e.graphType && t.typedId === e.typedId,
            {
                ...e,
                updateTime: a,
            },
        )
    },
    graphGet = async (e, t) => {
        t && "all-cards" === e && (t = "")
        const a = await ua()
        let n = await a.collection.graphs.find((a) =>
                t
                    ? a.typedId === t && a.graphType === e
                    : "all-cards" === a.graphType,
            ),
            i = !1
        if (n) {
            if ("project" === e && n.externalItemList?.length) {
                const e = []
                for (let t of n.externalItemList) {
                    const a = await itemGet(t.id)
                    a && "card" === a.rawType && !a.isInTrashcan && e.push(t)
                }
                ;(n.externalItemList = e), graphUpdate(n)
            }
        } else (n = await graphAdd(e, t)), (i = !0)
        return {data: n, isNewGraph: i}
    },
    graphGetTagItems = async (e) => {
        if (!e) return []
        const t = await ua()
        let a = await t.collection.tags.all(),
            n = (
                await t.collection.tags.filter(
                    (t) => t.id === e || t.link_to === e,
                )
            ).map((e) => e.id)
        const i = (
            await t.collection.items.filter((e) => {
                let t = e.tags ? e.tags : []
                if (e.tags_in_content?.length) {
                    let i = e.tags_in_content.flatMap((e) => {
                        const t = a.find((t) => t.id === e)
                        return t ? t.id : []
                    })
                    i.some((e) => n.includes(e)) &&
                    (i = pt("tag", e.content).flatMap(
                        (e) => e?.attrs?.id || [],
                    )),
                        (t = t.concat(i))
                }
                return !e.isInTrashcan && t.some((e) => n.includes(e))
            })
        ).map((e) => ({
            id: e.id,
            type:
                "card" === e.rawType
                    ? "card"
                    : "file" === e.rawType
                        ? "file"
                        : "article",
        }))
        return a
            .filter((e) => !e.link_to && e.parent && n.includes(e.parent))
            .map(({id: e}) => ({
                id: e,
                type: "tag",
            }))
            .concat(i)
    },
    graphGetTagData = async (e) => {
        if (!e) return
        const t = await ua()
        let a = await t.collection.tags.find((t) => t.id === e)
        if (!a) return
        const n = [a.name]
        for (
            ;
            a.parent &&
            ((a = await t.collection.tags.find((e) => e.id === a?.parent)), a);
        )
            n.unshift(a.name)
        const i = await graphGetTagItems(e)
        return {hierarchicalName: n.join("/"), tagItems: i}
    }

function Bd(e, t, a) {
    let n, i
    return (
        (e = e.filter(function e(r) {
            return r.id === t
                ? ((n = r), !1)
                : (a && r.id === a && (i = r),
                r.children && (r.children = r.children.filter(e)),
                    !0)
        })),
        n &&
        (a && i
            ? (i.children = i.children ? [...i.children, n] : [n])
            : e.push(n)),
            e
    )
}

const graphUpdateProject = async (e, t, a, n = {}) => {
    const i = await ua(),
        r = await i.collection.projects.find((t) => t.id === e)
    if (!r) return
    const o = a === e ? Bd(r.tree, t) : Bd(r.tree, t, a)
    await projectUpdateTree({id: e, tree: o}, n)
}
const graphUpdateProjectItemOrder = async (e, t, a, n) => {
        const i = await ua(),
            r = await i.collection.projects.find((t) => t.id === e)
        if (!r) return
        const o = (function (e, t, a, n) {
            let i,
                r,
                o,
                s = -1
            return (
                (e = e.filter(function e(l, c) {
                    return (
                        n && l.id === n && (s = void 0 === o ? c : c - 1),
                        a && l.id === a && (r = l),
                            l.id === t
                                ? !(!c || s !== c - 1) || ((i = l), (o = c), !1)
                                : (l.children &&
                                (l.children = l.children.filter(e)),
                                    !0)
                    )
                })),
                i &&
                (a && r && r.children
                    ? n
                        ? r.children.splice(s + 1, 0, i)
                        : (r.children = [i, ...r.children])
                    : n
                        ? e.splice(s + 1, 0, i)
                        : (e = [i, ...e])),
                    e
            )
        })(r.tree, t, a === e ? "" : a, n)
        await projectUpdateTree({id: e, tree: o}, {fromGraph: !0})
    },
    graphCopyCiteLink = (e, t, a) => {
        fe.clipboard.writeText(
            `<span data-type="inline-citation" data-display-name="" data-cite-type="${t}" data-cite-id="${e}" data-is-full=""><span data-node-type="title-citation" data-cite-type="${t}" data-cite-id="${e}">${a}</span></span>`,
        )
    },
    graphAddExternalCards = async (e, t, a = !1) => {
        const n = (await graphGet("project", e)).data,
            i = t.map((e) => ({id: e, isExternal: !0, children: []}))
        ;(n.externalItemList = n.externalItemList
            ? n.externalItemList.concat(i)
            : i),
            await graphUpdate(n),
        !a && be(m, e)
    },
    graphRemoveExternalCards = async (e, t) => {
        const a = (await graphGet("project", e)).data
        ;(a.externalItemList = a.externalItemList?.filter(
            (e) => !t.includes(e.id),
        )),
            await graphUpdate(a),
            be(m, e)
    },
    graphGetExternalCards = async (e) => {
        const t = await graphGet("project", e)
        return t.isNewGraph
            ? []
            : t.data.externalItemList?.map((e) => e.id) || []
    },
    graphGetProjectGraphById = async (e) => {
        if (!e) throw new Error("id is required")
        const t = await ua()
        return await t.collection.graphs.find(
            (t) => "project" === t.graphType && t.typedId === e,
        )
    },
    graphAddFromProjectPackage = async (e) => {
        if (!e) throw new Error("graph is required")
        const t = await ua()
        let a = await t.collection.graphs.find((t) => t.id === e.id)
        a ? await ed(t, e, a) : await t.collection.graphs.insert(e)
    }

async function graphExport(
    e,
    t,
    {
        type: a,
        title: n = "Export",
        fileName: i = "untitled",
        width: r,
        height: o,
        offset: s = {x: 0, y: 0},
        scale: l = 1,
        skipWait: c = !1,
    },
) {
    const d = new fe.BrowserWindow({
        width: r,
        height: o,
        enableLargerThanScreen: !0,
        frame: !1,
        resizable: !1,
        show: !1,
        webPreferences: {
            offscreen: !0,
            preload: le().join(__dirname, "preload.js"),
            nodeIntegration: !0,
            partition: jt,
        },
    })
    d.setSize(r, o)
    try {
        const _ = new Promise((e, t) => {
            const a = setTimeout(() => {
                    t("graph export timeout")
                }, 3e4),
                n = () => {
                    clearTimeout(a), e()
                }
            fe.ipcMain.once("graph_export_loaded", n),
                d.on("closed", () => {
                    clearTimeout(a),
                        fe.ipcMain.off("graph_export_loaded", n),
                        e()
                })
        })
        await d.loadURL(
            `${qt()}#/exportGraph/${a}/${t}/${e || "allCards"}?offsetX=${
                s.x
            }&offsetY=${s.y}&scale=${l}`,
        ),
        c || (await _, await N(2e3)),
            (i = i + "." + a),
            "pdf" === a
                ? Yd(d, i, r, o)
                    .then((e) => {
                        Vl(n, i, e, "PDF")
                    })
                    .catch((e) => ye.error(e))
                    .finally(() => d.close())
                : "jpeg" === a
                    ? Hd(d)
                        .then((e) => {
                            Vl(n, i, e, "JPEG")
                        })
                        .catch((e) => ye.error(e))
                        .finally(() => d.close())
                    : Vd(d)
                        .then((e) => {
                            Vl(n, i, e, "PNG")
                        })
                        .catch((e) => ye.error(e))
                        .finally(() => d.close())
    } catch (_err) {
        ye.error(_err), d.close()
    }
}

const Vd = async (e) => {
        const t = await e.webContents.capturePage(),
            a = Dn(t.getSize())
        return t.resize(a).toPNG()
    },
    Hd = async (e) => {
        const t = await e.webContents.capturePage(),
            a = Dn(t.getSize())
        return t.resize(a).toJPEG(100)
    },
    Yd = async (e, t, a, n) => {
        const {
                width: i,
                height: r,
                scale: o,
            } = ((e) => {
                const t = ((e) => {
                    const {width: t, height: a} = e,
                        n = Mn(8.5) / t,
                        i = Mn(11) / a
                    return Math.max(Math.min(n, i, 2), 0.1)
                })(e)
                let {width: a, height: n} = e
                return (
                    (a = En(a * t)),
                        (n = En(n * t)),
                        {width: a, height: n, scale: t}
                )
            })({width: a, height: n}),
            s = await e.webContents.printToPDF({
                pageSize: {width: i, height: r},
                margins: {top: 0, bottom: 0, left: 0, right: 0},
                printBackground: !0,
                scale: o,
            }),
            l = await Hl.PDFDocument.load(s)
        return (
            l.setAuthor(global.account_info?.email || ""),
                l.setCreator(""),
                l.setTitle(t),
                l.setProducer(""),
                Buffer.from(await l.save())
        )
    },
    flashcardGetTagItems = async (e) => {
        if (!e) return []
        const t = await ua()
        let a = await t.collection.tags.all(),
            n = (
                await t.collection.tags.filter(
                    (t) => t.id === e || t.link_to === e,
                )
            ).map((e) => e.id)
        return (
            await t.collection.items.filter((e) => {
                let t = e.tags ? e.tags : []
                if (e.tags_in_content?.length) {
                    let i = e.tags_in_content.flatMap((e) => {
                        const t = a.find((t) => t.id === e)
                        return t ? t.id : []
                    })
                    i.some((e) => n.includes(e)) &&
                    (i = pt("tag", e.content).flatMap(
                        (e) => e?.attrs?.id || [],
                    )),
                        (t = t.concat(i))
                }
                return !e.isInTrashcan && t.some((e) => n.includes(e))
            })
        ).filter((e) => es(e))
    },
    flashcardGetTagData = async (e) => {
        if (!e) return
        const t = await ua()
        let a = await t.collection.tags.find((t) => t.id === e)
        if (!a) return
        const n = [a.name]
        for (
            ;
            a.parent &&
            ((a = await t.collection.tags.find((e) => e.id === a?.parent)), a);
        )
            n.unshift(a.name)
        const i = await flashcardGetTagItems(e)
        return {
            hierarchicalName: n.join("/"),
            tagItems: i,
            lastItemId: a?.flashcardLastItemId,
        }
    },
    flashcardUpdateLastId = async (e, t, a) => {
        try {
            "project" === t && (await Qd(e, a)), "tag" === t && (await Xd(e, a))
        } catch (_err) {
            ye.error("update flashcard last id error:", _err)
        }
    },
    Qd = async (e, t) => {
        const a = Date.now()
        t
            ? await projectUpdateOther({
                id: e,
                flashcardLastItemId: t,
                flashcardLastItemIdEditTimeMs: a,
            })
            : await projectUpdateOther({
                id: e,
                flashcardLastItemIdEditTimeMs: a,
            })
    },
    Xd = async (e, t) => {
        const a = Date.now(),
            n = await ua()
        t
            ? await n.collection.tags.update((t) => t.id === e, {
                flashcardLastItemId: t,
                flashcardLastItemIdEditTimeMs: a,
            })
            : await n.collection.tags.update((t) => t.id === e, {
                flashcardLastItemIdEditTimeMs: a,
            })
    },
    flashcardStatisticsGetHistory = async () => {
        const e = (await Dr()).filter(
                (e) => e && es(e) && e.showAsFlashcardHistory,
            ),
            t = {}
        return (
            e.forEach((e) => {
                const {showAsFlashcardHistory: a = []} = e
                if (a.length) {
                    let e = a.map((e) =>
                            Pr().utc(e, "YYYYMMDDHH").local().format("YYYYMMDD"),
                        )
                    ;(e = [...new Set(e)]),
                        e.forEach((e) => {
                            t[e] = (t[e] || 0) + 1
                        })
                }
            }),
                t
        )
    },
    t_ = async (e, t) => {
        if ("project" === e.type) {
            const a = await a_(e.id, t)
            ;(e.learned = a.learned), (e.total = a.total)
        }
        if ("tag" === e.type) {
            const t = await n_(e.id)
            ;(e.learned = t.learned), (e.total = t.total)
        }
    },
    a_ = async (e, t) => {
        const a = await projectGetTreeItem(e)
        if (!a) return {learned: 0, total: 0}
        const n = ((e) => {
            const {tree_for_show: t} = e,
                a = [],
                n = (e) => {
                    e.forEach((e) => {
                        e.is_in_trashcan ||
                        ("file" !== e.type &&
                        a.push({
                            id: e.id,
                            title: e.title,
                            type: "article",
                            isGot: !!e.is_got_flashcard,
                            isEnhanced: !!e.is_enhanced_flashcard,
                            ebbinghausLevel: e.ebbinghausLevel,
                            showLastTimeMs: e.showAsFlashcardLastTimeMs,
                            add_time_ms: 0,
                            edit_time_ms: 0,
                        }),
                            n(e.children))
                    })
                }
            return n(t), a
        })(a)
        return {
            learned: n.filter((e) => t[e.id]?.showAsFlashcardLastTimeMs).length,
            total: n.length,
        }
    },
    n_ = async (e) => {
        const t = await flashcardGetTagItems(e)
        return {
            learned: t.filter((e) => e.showAsFlashcardLastTimeMs).length,
            total: t.length,
        }
    },
    flashcardStatisticsGetOpenRecently = async () => {
        const e = await trashcanAll(),
            t = _s(e),
            a = await (async () => {
                const e = await ua()
                return await un(e)
            })(),
            n = await (async () => {
                const e = await ua()
                return await e.collection.projects.all()
            })(),
            i = await (async () => {
                const e = await ua()
                return await e.collection.tags.all()
            })(),
            r = ((e, t, a = 5) =>
                [
                    ...e.map((e) => ({
                        type: "project",
                        id: e.id,
                        data: e,
                        learned: 0,
                        total: 0,
                    })),
                    ...t.map((e) => ({
                        type: "tag",
                        id: e.id,
                        data: e,
                        learned: 0,
                        total: 0,
                    })),
                ]
                    .sort(
                        (e, t) =>
                            (t.data.flashcardLastItemIdEditTimeMs || 0) -
                            (e.data.flashcardLastItemIdEditTimeMs || 0),
                    )
                    .slice(0, 5))(
                n
                    .filter(
                        (e) =>
                            !t.includes(e.id) &&
                            e.flashcardLastItemIdEditTimeMs,
                    )
                    .sort(
                        (e, t) =>
                            (t.flashcardLastItemIdEditTimeMs || 0) -
                            (e.flashcardLastItemIdEditTimeMs || 0),
                    ),
                i
                    .filter((e) => e.flashcardLastItemIdEditTimeMs)
                    .sort(
                        (e, t) =>
                            (t.flashcardLastItemIdEditTimeMs || 0) -
                            (e.flashcardLastItemIdEditTimeMs || 0),
                    ),
            )
        for (let e of r) await t_(e, a)
        return r
    },
    flashcardStatisticsGetShowRecently = async (e = 0) =>
        (await Dr())
            .filter(
                (t) =>
                    t &&
                    es(t) &&
                    !t.isInTrashcan &&
                    (t.showAsFlashcardLastTimeMs || 0) > e,
            )
            .sort(
                (e, t) =>
                    (t.showAsFlashcardLastTimeMs || 0) -
                    (e.showAsFlashcardLastTimeMs || 0),
            )
            .slice(0, 10)
            .map((e) => ({
                id: e.id,
                type: "card" === e.rawType ? "card" : "article",
                title: e.title,
                icon: e.icon,
            })),
    o_ = (e) => ({
        total: e.filter((e) => e && es(e) && e.showAsFlashcardLastTimeMs)
            .length,
        gotItTotal: e.filter(
            (e) => e && es(e) && e.isGotFlashcard && e.isGotFlashcardTimeMs,
        ).length,
    }),
    s_ = (e, t) => {
        const a = +Pr()(t)
        return {
            total: e.filter(
                (e) =>
                    e &&
                    es(e) &&
                    e.showAsFlashcardLastTimeMs &&
                    e.showAsFlashcardLastTimeMs > a,
            ).length,
            gotItTotal: e.filter(
                (e) =>
                    e &&
                    es(e) &&
                    e.isGotFlashcard &&
                    e.isGotFlashcardTimeMs &&
                    e.isGotFlashcardTimeMs > a,
            ).length,
        }
    },
    flashcardStatisticsGetTotal = async () => {
        const e = await Dr(),
            t = await getAppInstallTime(),
            a = +Pr()().subtract(1, "month")
        return {total: o_(e), sinceInstall: s_(e, t), LastMonth: s_(e, a)}
    },
    relationGet = async (e, t) => {
        const a = await ua()
        return await a.collection.relations.find((a) =>
            t ? a.source === e && a.target === t : a.id === e,
        )
    },
    relationAdd = async ({source: e, target: t, id: a, color: n}, i = {}) => {
        const r = await ua(),
            o = new Date().getTime(),
            s = await relationGet(e, t)
        if (s) return s
        const l = {
            id: a || (0, Ja.v4)(),
            createTime: o,
            updateTime: o,
            color: n || "#eb5757",
            relationType: "forward",
            source: e,
            target: t,
        }
        return (
            await r.collection.relations.insert(l), be("relation_add", l, i), l
        )
    },
    relationUpdate = async (e, t, a = {}) => {
        const n = await ua(),
            i = new Date().getTime(),
            r = await relationGet(e)
        if (!r) return
        const o = r.fieldModifyTimes || {}
        Mt.forEach((e) => {
            t[e] && (o[e] = i)
        })
        const s = {...r, updateTime: i, fieldModifyTimes: o, ...t}
        await n.collection.relations.update((t) => t.id === e, s),
            be("relation_update", s, a)
    },
    relationDelete = async (e, t = {}) => {
        const a = await ua()
        await a.collection.relations.delete((t) => t.id === e), be(S, [e], t)
    },
    relationGetAll = async () => {
        const e = await ua()
        return await e.collection.relations.all()
    },
    relationGetById = async (e) => {
        const t = await ua()
        return await t.collection.relations.filter(
            (t) => t.source === e || t.target === e,
        )
    },
    relationDeleteById = async (e) => {
        const t = await ua(),
            a = await relationGetById(e)
        if (a.length) {
            for (let {id: e} of a)
                await t.collection.relations.delete((t) => t.id === e)
            be(T),
                be(
                    S,
                    a.map((e) => e.id),
                    {},
                )
        }
    },
    relationToggleHideById = async (e, t = !0) => {
        const a = await ua(),
            n = new Date().getTime(),
            i = await relationGetById(e)
        if (i.length) {
            for (let e of i)
                if (e.isHidden !== t) {
                    const i = e.fieldModifyTimes || {}
                    i.isHidden = n
                    const r = {
                        ...e,
                        updateTime: n,
                        fieldModifyTimes: i,
                        isHidden: t,
                    }
                    await a.collection.relations.update((t) => t.id === e.id, r)
                }
            be(T)
        }
    }

function g_(e, t, a, n = 0, i = 0) {
    const r = e.fieldModifyTimes,
        o = t.fieldModifyTimes
    return a.reduce(
        (e, a) => ((o?.[a] ?? i) > (r?.[a] ?? n) && (e[a] = t[a]), e),
        {},
    )
}

async function relationMergeOrAdd(e) {
    const t = await ua(),
        a = await (async function (e) {
            const t = await ua()
            return await t.collection.relations.find((t) => t.id === e)
        })(e.id)
    if (a) {
        if (a.updateTime === e.updateTime) return
        const n = g_(a, e, Mt, a.updateTime, e.updateTime)
        await t.collection.relations.update((t) => t.id === e.id, {...n})
    } else await t.collection.relations.insert(e)
}

const docImportGetMarkdown = async (e) =>
        (await ie().promises.readFile(e)).toString(),
    w_ = (e) => e.match(/[\/|\\]([^\/|\\]+)$/)?.[0].slice(1) || "",
    v_ = async (e) => ({
        data: await ie().promises.readFile(e),
        filename: w_(e),
        path: e,
    })

async function docImportByDialog(e, t = !0) {
    let {lang: a} = await qe()
    e = e || [{name: a.all_files, extensions: ["*"]}]
    let n = {
            title: a.import,
            buttonLabel: a.import,
            defaultPath: void 0,
            properties: ["openFile", ...(t ? ["multiSelections"] : [])],
            securityScopedBookmarks: !0,
            filters: e,
        },
        i = await fe.dialog.showOpenDialog(n)
    try {
        if (process.mas) {
            const {filePaths: e, bookmarks: t, canceled: a} = i
            if (!a && e.length > 0 && t)
                for (let a = 0; a < e.length; a++) await wc(e[a], t[a])
        }
    } catch (_err) {
        ye.error("importByDialog mac error:", _err)
    }
    const r = await Promise.all(i.filePaths.map(v_))
    return (
        ye.info(`import by dialog: ${JSON.stringify(i.filePaths, null, 2)}`), r
    )
}

const fileAddAssetFile = async ({
                                    filename: e,
                                    ext: t,
                                    size: a,
                                    filePath: n,
                                }) => {
        if (!ie().existsSync(n)) return
        const {base: i} = le().parse(n),
            r = (0, Ja.v4)(),
            o = await ha(),
            s = le().join(o, r, i)
        return (
            await ie().copy(n, s),
                ye.info(`add asset file: from ${n} to ${s}`),
                {
                    data: {
                        title: e,
                        titled: !0,
                        type: "file",
                        rawType: "file",
                        is_in_assets: !0,
                        src: `assets/${i}`,
                        ext: t,
                        size: a,
                        local_import_from: n,
                    },
                    uuid: r,
                }
        )
    },
    fileOpen = async (e) => {
        try {
            if (!e || !ie().existsSync(e))
                return {success: !1, message: "file not exist"}
            try {
                if (process.mas && !bl(le().dirname(e)))
                    await xc(e), await fe.shell.openPath(e), kc()
                else {
                    const t = await fe.shell.openPath(e)
                    console.log(t)
                }
            } catch (_err) {
                console.log(_err)
                const a = Ft().format({
                    pathname: e,
                    protocol: "file",
                    slashes: !0,
                })
                await fe.shell.openExternal(a)
            }
            return ye.info("open file:", e), {success: !0}
        } catch (_err) {
            return (
                ye.error("open file error:", _err),
                    {success: !1, message: _err?.message}
            )
        }
    },
    fileOpenDir = async (e) => {
        try {
            return e && ie().existsSync(e)
                ? (fe.shell.showItemInFolder(e),
                    ye.info("open file dir:", e),
                    {success: !0})
                : {
                    success: !1,
                    message: "path not exist",
                }
        } catch (_err) {
            return (
                ye.error("open file dir error:", _err),
                    {success: !1, message: _err?.message}
            )
        }
    },
    fileOpenItem = async (e) => {
        const t = await itemGet(e)
        if (t && "file" === t.type) {
            let e = t.local_import_from || ""
            if (
                (t.is_in_assets && (e = await fileGetAssetPath(t.id, t.src)), e)
            )
                return await fileOpen(e)
        }
    },
    fileOpenItemDir = async (e) => {
        const t = await itemGet(e)
        if (t && "file" === t.type) {
            let e = t.local_import_from || ""
            if (
                (t.is_in_assets && (e = await fileGetAssetPath(t.id, t.src)), e)
            )
                return await fileOpenDir(e)
        }
    },
    fileGetAssetPath = async (e, t = "") => {
        if (!t) return ""
        const a = await ha()
        return le().join(a, e, t.replace(/^assets/, ""))
    },
    fileImportToAssets = async (e) => {
        const t = await itemGet(e)
        if (t && "file" === t.type && !t.is_in_assets) {
            if (!t.local_import_from || !ie().existsSync(t.local_import_from))
                return
            const {base: a} = le().parse(t.local_import_from),
                n = await ha(),
                i = le().join(n, e, a)
            try {
                process.mas && (await xc(t.local_import_from))
            } catch (_err) {
                console.log(_err),
                    ye.error("fileImportToAssets getBookmark error:", _err)
            }
            await ie().copy(t.local_import_from, i),
                kc(),
                await itemUpdateOther(
                    {
                        id: e,
                        is_in_assets: !0,
                        src: `assets/${a}`,
                    },
                    !0,
                ),
                be(l, e),
                ye.info("file import to assets:", i)
        }
    },
    P_ = (e) => {
        const t = ie().readFileSync(e),
            a = nt().createHash("md5")
        return a.update(t), a.digest("hex")
    },
    fileUpdateAsset = async (e) => {
        const t = await itemGet(e)
        if (!t) return {success: !1}
        const a = await fileGetAssetPath(t.id, t.src)
        try {
            if (t && "file" === t.type && t.is_in_assets) {
                if (
                    !t.local_import_from ||
                    !ie().existsSync(t.local_import_from)
                )
                    return {
                        success: !1,
                        msg: "本地文件不存在",
                    }
                try {
                    process.mas && (await xc(t.local_import_from))
                } catch (_err) {
                    console.log(_err),
                        ye.error("fileUpdateAsset getBookmark error:", _err)
                }
                return (
                    (n = t.local_import_from),
                        (i = a),
                        P_(n) === P_(i)
                            ? (kc(),
                                {
                                    success: !1,
                                    msg: "本地文件未更新",
                                })
                            : (await ie().copy(t.local_import_from, a),
                                kc(),
                                {success: !0})
                )
            }
        } catch (_err) {
            if ((ye.error("update asset error:", _err), process.mas)) {
                let {lang: n} = await qe(),
                    i = await fe.dialog.showOpenDialog({
                        title: n.import_document,
                        defaultPath: t?.local_import_from,
                        properties: ["openFile"],
                        securityScopedBookmarks: !0,
                    })
                if (i.canceled) return {success: !1, msg: _err?.message}
                const [r] = i.filePaths,
                    [o] = i.bookmarks || []
                await wc(r, o), await ie().copy(r, a)
            }
        }
        var n, i
        return {success: !1}
    },
    fileGetFileData = async (e) => {
        const t = await itemGet(e)
        if (t && "file" === t.type) {
            let e = t.local_import_from || ""
            if (
                ((t.is_in_assets || Et.includes(t.ext || "")) &&
                (e = await fileGetAssetPath(
                    t.id,
                    Et.includes(t.ext || "") ? t.attachSrc : t.src,
                )),
                    e)
            )
                try {
                    process.mas && (await xc(e))
                    const t = await ie().promises.readFile(e)
                    return kc(), t
                } catch (_err) {
                    ye.error("getFileData error:", _err)
                }
        }
    }

async function writeFileToAssets(e, t) {
    if (!t.local_import_from) return
    const {base: a} = le().parse(t.local_import_from),
        n = await ha(),
        i = le().join(n, t.id, a)
    await (0, ne.ensureFile)(i),
        await (0, ne.writeFile)(i, Buffer.from(e)),
        await itemUpdateOther(
            {
                id: t.id,
                is_in_assets: !0,
                src: `assets/${a}`,
            },
            !0,
        ),
        be(l, t.id)
}

async function addAssetsInArticle(e, t) {
    if (e && t)
        for (const a of e) {
            const e = await itemGet(a)
            e &&
            (await itemUpdateMiscContent({
                id: a,
                fileItemInArticle: [...(e.fileItemInArticle || []), t],
            }))
        }
}

async function getImageBufferAndType(e) {
    if (!e) return null
    if (e.startsWith("lattics-local://assets")) {
        const t = e.replace("lattics-local://assets/", "").replace("/", ""),
            a = await itemGet(t),
            n = await fileGetFileData(t)
        return a && n ? n : null
    }
    if (e.startsWith("data:image")) {
        const t = e.replace(/^data:image\/\w+;base64,/, "")
        return Buffer.from(t, "base64")
    }
    return (
        (
            await Ge()
                .get(e, {responseType: "arraybuffer"})
                .catch((e) => (console.error(e), null))
        )?.data || null
    )
}

const attachFileToItem = async (e) => {
        const t = await itemGet(e)
        if (
            !t ||
            "file" !== t.type ||
            !t.ext ||
            !["pdf", ...Et].includes(t.ext)
        )
            return
        const [a] = await docImportByDialog(
            [{name: "PDF", extensions: [".pdf"]}],
            !1,
        )
        if (a) {
            if ("pdf" === t.ext)
                if (t.is_in_assets) {
                    const e = await fileGetAssetPath(t.id, t.src)
                    await (0, ne.ensureFile)(e),
                        await (0, ne.writeFile)(e, a.data)
                } else
                    await itemUpdateOther({
                        id: e,
                        local_import_from: a.path,
                        size: a.data.length,
                    })
            else {
                if (t.attachSrc) {
                    const e = await fileGetAssetPath(t.id, t.attachSrc)
                    await (0, ne.remove)(e).catch(ye.error)
                }
                const n = le().parse(a.path).base,
                    i = await fileGetAssetPath(t.id, n)
                await (0, ne.ensureFile)(i),
                    await (0, ne.writeFile)(i, a.data),
                    await itemUpdateOther({
                        id: e,
                        attachSrc: `assets/${n}`,
                        ext: "pdf",
                        local_import_from: a.path,
                        is_in_assets: !0,
                        src: `assets/${n}`,
                        size: a.data.length,
                    }),
                    ye.info(`attach pdf to ${t.ext}:`, i)
            }
            be("reload_current_item", e)
        }
    },
    O_ = {
        header: {
            spacing: 0,
            text: "",
            image: "",
            position: "left",
            isActive: !1,
        },
        footer: {
            spacing: 0,
            pageNumber: "decimal",
            position: "center",
            isActive: !1,
        },
        margin: {top: 2.5, bottom: 2.5, left: 2.5, right: 2.5},
        facingPages: !1,
        pageNumber: !0,
        pageSize: "A4",
        pageOrientation: "portrait",
        footnotes: !1,
        footnotesPosition: "page",
        splitPage: "hr",
    },
    stylesAll = async () => {
        const e = await ua()
        let t = await e.dict.styles.all()
        return Object.assign({}, O_, t)
    },
    stylesSet = async (e, t) => {
        let a = await ua()
        await a.dict.styles.set(e, t)
    },
    stylesGet = async (e) => {
        const t = await ua()
        return await t.dict.styles.get(e)
    },
    templateAdd = async (e, t = !0) => {
        const a = await ua()
        return e
            ? (t &&
            (e = {
                ...e,
                id: (0, Ja.v4)(),
            }),
                await a.collection.template.insert(e),
                be(D, e.id),
                e)
            : null
    }

async function templateAddIfNotExist(e) {
    e.id
        ? (await templateGet(e.id)) || (await templateAdd(e, !1))
        : await templateAdd(e)
}

const templateGet = async (e) => {
        const t = await ua()
        return await t.collection.template.find((t) => t.id === e)
    },
    W_ = {
        title: "Default",
        isDefault: !0,
        paragraph: {
            textStyles: {font: "", fontSize: 0, align: "left"},
            spacing: {lineHeight: 1.5, marginTop: 0, marginBottom: 0},
            firstLineIndent: 0,
            isFirstLineIndentActive: !1,
        },
        heading1: {
            borderStyles: {
                type: "",
                lineStyle: "solid",
                borderColor: "#282828",
                borderWidth: 1,
                borderOffset: 0,
            },
            headingLevel: 1,
            spacing: {lineHeight: 1.5, marginTop: 0, marginBottom: 0},
            textStyles: {
                font: "",
                fontSize: 21,
                align: "left",
                isBold: !0,
                isItalic: !1,
                isUnderline: !1,
            },
        },
        heading2: {
            borderStyles: {
                type: "",
                lineStyle: "solid",
                borderColor: "#282828",
                borderWidth: 1,
                borderOffset: 0,
            },
            headingLevel: 2,
            spacing: {lineHeight: 1.5, marginTop: 0, marginBottom: 0},
            textStyles: {
                color: "",
                font: "",
                fontSize: 18,
                align: "left",
                isBold: !0,
                isItalic: !1,
                isUnderline: !1,
            },
        },
        heading3: {
            borderStyles: {
                type: "",
                lineStyle: "solid",
                borderColor: "#282828",
                borderWidth: 1,
                borderOffset: 0,
            },
            headingLevel: 3,
            spacing: {lineHeight: 1.5, marginTop: 0, marginBottom: 0},
            textStyles: {
                font: "",
                fontSize: 15,
                align: "left",
                isBold: !0,
                isItalic: !1,
                isUnderline: !1,
            },
        },
        heading4: {
            borderStyles: {
                type: "",
                lineStyle: "solid",
                borderColor: "#282828",
                borderWidth: 1,
                borderOffset: 0,
            },
            headingLevel: 4,
            spacing: {lineHeight: 1.5, marginTop: 0, marginBottom: 0},
            textStyles: {
                font: "",
                fontSize: 12,
                align: "left",
                isBold: !0,
                isItalic: !1,
                isUnderline: !1,
            },
        },
        heading5: {
            borderStyles: {
                type: "",
                lineStyle: "solid",
                borderColor: "#282828",
                borderWidth: 1,
                borderOffset: 0,
            },
            headingLevel: 5,
            spacing: {lineHeight: 1.5, marginTop: 0, marginBottom: 0},
            textStyles: {
                font: "",
                fontSize: 12,
                align: "left",
                isBold: !0,
                isItalic: !1,
                isUnderline: !1,
            },
        },
        heading6: {
            borderStyles: {
                type: "",
                lineStyle: "solid",
                borderColor: "#282828",
                borderWidth: 1,
                borderOffset: 0,
            },
            headingLevel: 6,
            spacing: {lineHeight: 1.5, marginTop: 0, marginBottom: 0},
            textStyles: {
                font: "",
                fontSize: 12,
                align: "left",
                isBold: !0,
                isItalic: !1,
                isUnderline: !1,
            },
        },
        numberedList: {
            textStyles: {font: "", fontSize: 0, isBold: !1, isItalic: !1},
            listStyles: {listStyleType: "decimal", listStyleColor: "#282828"},
            spacing: {lineHeight: 1.5, marginTop: 0, marginBottom: 0},
        },
        bulletedList: {
            textStyles: {font: "", fontSize: 0, isBold: !1, isItalic: !1},
            listStyles: {listStyleType: "disc", listStyleColor: "#282828"},
            spacing: {lineHeight: 1.5, marginTop: 0, marginBottom: 0},
        },
        todoList: {
            textStyles: {font: "", fontSize: 0, isBold: !1, isItalic: !1},
            listStyles: {
                listStyleType: "",
                listStyleColor: "#875AF2",
                deletedLine: !1,
            },
            spacing: {lineHeight: 1.5, marginTop: 0, marginBottom: 0},
        },
        quote: {
            textStyles: {
                font: "",
                fontSize: 0,
                align: "left",
                isBold: !1,
                isItalic: !1,
                isUnderline: !1,
            },
            spacing: {lineHeight: 1.5, marginTop: 0, marginBottom: 0},
            quoteStyles: {
                quoteStyleType: "single",
                quoteStyleColor: "#C1C3CD",
                quoteStyleOffset: 1,
                quoteStyleWidth: 3,
            },
        },
        bibliography: {
            textStyles: {
                font: "Time New Roman",
                fontSize: 12,
                isBold: !1,
                isItalic: !1,
            },
            spacing: {lineHeight: 1.5, marginTop: 0, marginBottom: 0},
            csl: {template: "american-chemical-society", lang: "en-US"},
        },
    },
    templateAll = async () => {
        const e = await ua(),
            t = await e.collection.template.all()
        if (t.length) return t
        {
            const t = {...W_, id: (0, Ja.v4)(), title: "__DEFAULT__"}
            return [await e.collection.template.insert(t)]
        }
    }

async function getDefaultTemplate() {
    return (await templateAll()).find((e) => e.isDefault)
}

const templateDelete = async (e) => {
        const t = await ua()
        await t.collection.template.delete((t) => t.id === e), be(D, e)
    },
    templateUpdate = async (e) => {
        new Date().getTime()
        const t = await ua()
        let a = await t.collection.template.update((t) => t.id === e.id, {...e})
        if (0 !== a.length) return be(D, a[0].id), a[0]
    },
    templateMarkDefault = async (e) => {
        const t = await ua(),
            a = (await t.collection.template.all()).find((e) => e.isDefault)
        if (a && a.id === e) return a
        a &&
        (await t.collection.template.update((e) => e.id === a.id, {
            isDefault: !1,
        }))
        const [n] = await t.collection.template.update((t) => t.id === e, {
            isDefault: !0,
        })
        return be(D, e), n
    }

async function resetProjectChildrenTemplate(e) {
    let t = await projectGet(e, !0)
    if (!t) return !1
    let {tree: a} = t,
        n = we(a).map((e) => e.id)
    return (
        await Promise.all(
            n.map((e) =>
                itemUpdateOther({id: e, template: "", own_template: {}}, !0),
            ),
        )
    ).every((e) => !!e)
}

const Z_ = (e) => {
        if (1 === e.length) return Zi(e[0])
        const t = {
            textCount: 0,
            charCount: 0,
            charCountWithoutSpaces: 0,
            asianCharCount: 0,
            nonAsianCharCount: 0,
            paragraphCount: 0,
            punctuationsCount: 0,
        }
        for (let a of e) {
            const e = Zi(a)
            let n
            for (n in e) t[n] += e[n]
        }
        return t
    },
    countGetItemsWordsDetail = async (e) => {
        if (!e || !e.length) return
        const t = (
            await Promise.all(e.map((e) => itemGetWithLocalContent(e)))
        ).flatMap((e) => (e && "file" !== e.rawType ? e : []))
        return t.length ? Z_(t) : void 0
    },
    countGetProjectWordsAndChars = async (e) => {
        const t = await ua(),
            a = await t.collection.projects.find((t) => t.id === e)
        if (!a) return {words: 0, chars: 0}
        const n = ((e) => we(e.tree).map((e) => e.id))(a)
        return countGetItemsWordsAndChars(n)
    }

async function countGetProjectDetailInfo(e) {
    if (!e) throw new Error("projectId is required")
    const t = await ua(),
        a = await t.collection.projects.find((t) => t.id === e)
    if (!a) return 0
    const n = we(a.tree).map((e) => e.id)
    if (!n || !n.length) return
    const i = (
        await Promise.all(n.map((e) => itemGetWithLocalContent(e)))
    ).filter((e) => !!e)
    if (!i.length) return
    const r = Z_(i.filter((e) => "file" !== e.rawType))
    for (const {rawType: e} of i)
        "file" === e
            ? r.fileCount
                ? r.fileCount++
                : (r.fileCount = 1)
            : r.articleCount
                ? r.articleCount++
                : (r.articleCount = 1)
    return r
}

const goalGetItem = async (e) => {
        const t = await itemGet(e)
        return t && t.goal ? t.goal : {}
    },
    goalGetProject = async (e) => {
        const t = await ua(),
            a = await t.collection.projects.find((t) => t.id === e)
        return a && a.goal ? a.goal : {}
    },
    goalUpdate = async (e, t, a = !1) => {
        if (!t.id) return e
        if ("project" === t.type)
            await projectUpdateOther({id: t.id, goal: e}),
                be("goal_update_project", t.id)
        else {
            if (a) {
                const a = await itemGet(t.id),
                    n = e?.words || 0
                a &&
                n &&
                (e =
                    "character" === e.wordsCountType
                        ? Ji(a.content) >= n
                            ? {
                                ...e,
                                isAchieved: !0,
                            }
                            : {...e, isAchieved: !1}
                        : Yi(a.content) >= n
                            ? {...e, isAchieved: !0}
                            : {...e, isAchieved: !1})
            }
            await itemUpdateOther({id: t.id, goal: e}, !0), be(_, t.id)
        }
        return e
    },
    statisticsGetTotal = async () => {
        const e = await Dr(),
            t = await Ur(),
            a = e.filter((e) => "card" === e.rawType).length,
            n = e.length - a
        return {words: Or(e), card: a, article: n, project: t.length}
    },
    statisticsGetTotalSinceInstall = async () =>
        statisticsGetTotalByDate(await getAppInstallTime()),
    om = (e, t) => Er(e, Ir(t), {}),
    statisticsGetTotalByDate = async (e) => {
        const t = Pr()(e),
            a = +t,
            n = await Dr(),
            i = await Ur(),
            r = n.filter((e) => e.add_time_ms >= a),
            o = i.filter((e) => e.add_time_ms >= a),
            s = r.filter((e) => "card" === e.rawType).length,
            l = r.length - s
        return {
            words: om(n, Pr()()) - om(n, t),
            card: s,
            article: l,
            project: o.length,
        }
    },
    statisticsGetRecentlyModifiedContents = async (e = 0) =>
        (await Dr())
            .filter(
                (t) =>
                    !t.isInTrashcan &&
                    (t.content_edit_time_ms || t.add_time_ms) > e,
            )
            .sort(
                (e, t) =>
                    (t.content_edit_time_ms || t.add_time_ms) -
                    (e.content_edit_time_ms || e.add_time_ms),
            )
            .slice(0, 10)
            .map((e) => ({
                type: "card" === e.rawType ? "card" : "doc",
                id: e.id,
                title: e.title,
                icon: e.icon,
            })),
    cm = (e, t) => Er(e, Ir(t), mm),
    dm = (e) => {
        const t = e.filter((e) => "card" === e.rawType).length,
            a = e.length - t
        return {words: Or(e), card: t, article: a}
    },
    _m = (e, t) => {
        const a = Pr()(t),
            n = +a,
            i = e.filter((e) => e.add_time_ms >= n),
            r = i.filter((e) => "card" === e.rawType).length,
            o = i.length - r
        return {words: cm(e, Pr()()) - cm(e, a), card: r, article: o}
    }
let mm = {}
const statisticsGetItems = async () => {
        const e = await Dr(),
            t = await getAppInstallTime(),
            a = +Pr()().subtract(1, "month")
        return (
            (mm = {}),
                {total: dm(e), sinceInstall: _m(e, t), LastMonth: _m(e, a)}
        )
    },
    statisticsGetProjects = async () => {
        const e = await getAppInstallTime(),
            t = await Ur(),
            a = t.filter((t) => t.add_time_ms >= e)
        return {project: t.length, projectSinceInstall: a.length}
    },
    itemAddFromImport = async (e, t, a) => {
        const n = await ua()
        ye.info("addFromImport items total: ", e.length)
        for (let i of e) {
            const e = await n.collection.items.find((e) => e.id === i.id)
            if (
                (e && e.edit_time_ms === i.edit_time_ms) ||
                (e?.baseStateCreateMs ?? 0) > (i.baseStateCreateMs ?? 0)
            )
                continue
            const r = [
                ...new Set([
                    ...(e?.backwards_cites ?? []),
                    ...(i.backwards_cites || []),
                ]),
            ]
            let o = e?.footnotes ?? void 0
            i.footnotes?.length &&
            (o = [...new Set([...(o || []), ...i.footnotes])])
            const s = e?.forwards_cites ?? []
            if (i.forwards_cites?.length)
                for (let e of i.forwards_cites)
                    s.find((t) => t.id === e.id) || s.push(e)
            const l = [...new Set([...(e?.tags ?? []), ...(i.tags || [])])],
                c = [
                    ...new Set([
                        ...(e?.tags_in_content ?? []),
                        ...(i.tags_in_content || []),
                    ]),
                ]
            if ("file" === i.rawType) {
                if (e) {
                    const a = g_(e, i, Pt)
                    await n.collection.items.update((e) => e.id === i.id, {
                        backwards_cites: r,
                        currentVersion: t.version,
                        ...a,
                        tags: l,
                        tags_in_content: c,
                    })
                } else await n.collection.items.insert({...i})
                continue
            }
            const d = await a(i.id)
            ;(e && e.currentVersion) || !d
                ? e &&
                (e.baseStateCreateMs ?? 0) < (i.baseStateCreateMs ?? 0) &&
                d &&
                (await deleteYChangesById(i.id),
                    await addBaseState(i.id, d),
                    (e.receivedVersions = []),
                    (e.unSyncedVersions = []))
                : await addBaseState(i.id, d)
            const _ = i.packagedLocalChanges,
                m = e?.receivedVersions || [],
                p = [
                    ...new Set([
                        ...(e?.unSyncedVersions ?? []),
                        ...(i.unSyncedVersions || []),
                    ]),
                ]
            let u = (0, W.differenceWith)(
                i.receivedVersions || [],
                m,
                (e, t) => e.version === t.version,
            )
            if (_) {
                m.push(_), p.push(_.version)
                const e = await a(i.id, _.version)
                await addVersion(i.id, _.version, e)
            }
            if (u.length) {
                for (let e of u) {
                    const t = await a(i.id, e.version)
                    await addVersion(i.id, e.version, t)
                }
                m.push(...u)
            }
            if (
                (m.sort((e, t) => (e.time || 0) - (t.time || 0)),
                    delete i.packagedReceivedChanges,
                    delete i.packagedLocalChanges,
                    e)
            ) {
                const a = e.belongsTo || [],
                    s = [...new Set([...a, ...(i.belongsTo || [])])],
                    d = g_(e, i, Pt)
                await n.collection.items.update((e) => e.id === i.id, {
                    backwards_cites: r,
                    receivedVersions: m,
                    unSyncedVersions: p,
                    currentVersion: t.version,
                    ...d,
                    tags: l,
                    tags_in_content: c,
                    belongsTo: s,
                    footnotes: o,
                    baseStateCreateMs: i.baseStateCreateMs,
                })
            } else
                await n.collection.items.insert({
                    ...i,
                    backwards_cites: r,
                    receivedVersions: m,
                    unSyncedVersions: p,
                    currentVersion: t.version,
                    tags: l,
                    tags_in_content: c,
                    footnotes: o,
                }),
                "card" === i.rawType &&
                ((await n.list.card_ids.find((e) => e === i.id)) ||
                    (await n.list.card_ids.lpush(i.id)))
        }
        be(O)
    },
    tagAddFromImport = async (e, t = {}) => {
        const a = await ua(),
            n = ad(await a.collection.tags.filter((e) => !e.link_to)),
            i = ad(e.filter((e) => !e.link_to)),
            r = {},
            o = []
        for (let s of e) {
            const e = await a.collection.tags.find((e) => e.id === s.id)
            if (e)
                (s.item_ids = [
                    ...new Set([...(e.item_ids || []), ...(s.item_ids || [])]),
                ]),
                    (s.versions = [
                        ...new Set([
                            ...(e.versions || []),
                            ...(s.versions || []),
                        ]),
                    ]),
                    (s.child = [
                        ...new Set([...(e.child || []), ...(s.child || [])]),
                    ]),
                    await a.collection.tags.update((e) => e.id === s.id, {
                        ...s,
                        ...t,
                    })
            else if (s.link_to) o.push(s)
            else {
                const e = await a.collection.tags.find(
                    (e) => n[e.id] === i[s.id],
                )
                e && (ye.info(`tag link ${s.id} to ${e.id}`), (r[s.id] = e)),
                    o.push({
                        ...s,
                        link_to: e ? e.id : void 0,
                    })
            }
        }
        for (let e of o.filter(
            (e, t, a) => a.findIndex((t) => t.id === e.id) === t,
        )) {
            if (e.parent && r[e.parent]) {
                const t = r[e.parent]
                e.parent = r[e.parent].id
                const n = [...new Set([...(t.child ?? []), e.id])]
                await a.collection.tags.update((e) => e.id === t.id, {
                    child: n,
                }),
                    (t.child = n)
            }
            await a.collection.tags.insert(e)
        }
        be(P)
    },
    projectAddFromImport = async (e) => {
        const t = await ua()
        return (
            await t.collection.projects.insert(e),
                await Ka(e.id),
                trackEvent("new", "project", "from_import"),
                e
        )
    },
    projectUpdateMetaData = async (e, t = !0) => {
        const a = await ua()
        await a.collection.projects.update((t) => t.id === e.id, {...e}),
        t || be("project_update_meta_data", e.id)
    }

function bm(e, t) {
    if (!Object.prototype.hasOwnProperty.call(e, t))
        throw new TypeError("attempted to use private field on non-instance")
    return e
}

var wm = 0

function vm(e) {
    return "__private_" + wm++ + "_" + e
}

var xm = vm("project"),
    km = vm("metadata"),
    Am = vm("items"),
    Sm = vm("tags"),
    Tm = vm("templates"),
    zm = vm("relations"),
    Cm = vm("files"),
    jm = vm("yChanges"),
    Pm = vm("graph")

class Dm extends ai {
    constructor(e, t, a, n) {
        if (
            (super(),
                Object.defineProperty(this, xm, {
                    writable: !0,
                    value: void 0,
                }),
                Object.defineProperty(this, km, {
                    writable: !0,
                    value: void 0,
                }),
                Object.defineProperty(this, Am, {
                    writable: !0,
                    value: void 0,
                }),
                Object.defineProperty(this, Sm, {
                    writable: !0,
                    value: void 0,
                }),
                Object.defineProperty(this, Tm, {
                    writable: !0,
                    value: void 0,
                }),
                Object.defineProperty(this, zm, {
                    writable: !0,
                    value: void 0,
                }),
                Object.defineProperty(this, Cm, {
                    writable: !0,
                    value: void 0,
                }),
                Object.defineProperty(this, jm, {
                    writable: !0,
                    value: void 0,
                }),
                Object.defineProperty(this, Pm, {
                    writable: !0,
                    value: null,
                }),
            !e || !t)
        )
            throw new Error("Invalid data")
                ;
        (bm(this, km)[km] = e),
            (bm(this, Am)[Am] = t.items),
            (bm(this, Sm)[Sm] = t.tags),
            (bm(this, Tm)[Tm] = t.templates || []),
            (bm(this, zm)[zm] = t.relations || []),
            (bm(this, xm)[xm] = t.project),
            (bm(this, Cm)[Cm] = a),
            (bm(this, jm)[jm] = n),
        t.graph && (bm(this, Pm)[Pm] = t.graph)
    }

    async writeProject() {
        const e = await projectGet(bm(this, xm)[xm].id)
        if (e) {
            if (
                Array.isArray(e.versions) &&
                e.versions.includes(bm(this, km)[km].version)
            )
                return void be("goto_item", {project_id: e.id})
                    ;
            (bm(this, xm)[xm].versions = [
                ...new Set([
                    ...bm(this, xm)[xm].versions,
                    ...(Array.isArray(e.versions) ? e.versions : []),
                ]),
            ]),
                (bm(this, xm)[xm].package_authors = bm(this, xm)[xm]
                    .package_authors
                    ? {
                        ...bm(this, xm)[xm].package_authors,
                        [bm(this, km)[km].version]: bm(this, km)[km],
                    }
                    : {[bm(this, km)[km].version]: bm(this, km)[km]})
        } else {
            const e = await trashcanGetTargetProject(bm(this, xm)[xm].id)
            e && (await trashcanDelete(e.id))
        }
        try {
            if (
                (await Promise.all([
                    this.writeTags(),
                    this.writeGraph(),
                    this.writeItems(),
                    this.writeFiles(),
                    this.writeTemplates(),
                    this.writeRelations(),
                ]),
                    e)
            ) {
                if (bm(this, xm)[xm].tree_y_state && e.tree_y_state) {
                    const t = new di(bm(this, xm)[xm].tree, void 0, [
                        new Uint8Array(e.tree_y_state),
                    ])
                    t.applyUpdate([
                        new Uint8Array(bm(this, xm)[xm].tree_y_state),
                    ])
                    const a = t.tree,
                        n = we(e.tree),
                        i = we(a)
                    for (let e of i) {
                        const t = n.find((t) => t.id === e.id)
                        e.is_collapsed = t?.is_collapsed ?? !1
                    }
                    ;(bm(this, xm)[xm].tree = a),
                        (bm(this, xm)[xm].tree_y_state = [...t.state])
                }
                const t = g_(
                    bm(this, xm)[xm],
                    e,
                    Dt.filter((e) => "tree" !== e),
                )
                await projectUpdateOther({...bm(this, xm)[xm], ...t})
            } else await projectAddFromImport(bm(this, xm)[xm])
            this.markTime("process end")
        } catch (_err) {
            throw _err
        }
    }

    async writeRelations() {
        if (
            (this.markTime("write relations start"),
            Array.isArray(bm(this, zm)[zm]) && bm(this, zm)[zm].length)
        )
            for (let e of bm(this, zm)[zm]) await relationMergeOrAdd(e)
        this.markTime("write relations end")
    }

    async writeTemplates() {
        if (
            (this.markTime("write templates start"),
            Array.isArray(bm(this, Tm)[Tm]) && bm(this, Tm)[Tm].length)
        )
            for (let e of bm(this, Tm)[Tm]) await templateAddIfNotExist(e)
        this.markTime("write templates end")
    }

    async writeGraph() {
        this.markTime("write graph start"),
        bm(this, Pm)[Pm] &&
        (await graphAddFromProjectPackage(bm(this, Pm)[Pm])),
            this.markTime("write graph end")
    }

    async writeItems() {
        this.markTime("write items start"),
        Array.isArray(bm(this, Am)[Am]) &&
        bm(this, Am)[Am].length &&
        (await itemAddFromImport(
            bm(this, Am)[Am],
            bm(this, km)[km],
            async (e, t) => {
                const a = bm(this, jm)[jm]?.folder(e)
                if (t) {
                    const e = a.file(t)
                    return e
                        ? await e.async("nodebuffer")
                        : Buffer.from([])
                }
                {
                    const e = a.file("baseState")
                    return e
                        ? await e.async("nodebuffer")
                        : Buffer.from([])
                }
            },
        )),
            this.markTime("write items end")
    }

    async writeTags() {
        this.markTime("write tags start")
        try {
            Array.isArray(bm(this, Sm)[Sm]) &&
            bm(this, Sm)[Sm].length &&
            (await tagAddFromImport(bm(this, Sm)[Sm], {}))
        } catch (_err) {
            ye.error(_err)
        }
        this.markTime("write tags end")
    }

    async writeFiles() {
        if ((this.markTime("write files start"), bm(this, Cm)[Cm])) {
            const e = await pa()
            bm(this, Cm)[Cm].forEach((t, a) => {
                if (a.dir) return
                const n = le().join(e, a.name)
                ie()
                    .ensureDir(le().dirname(n))
                    .then(() => {
                        Mc(a, n)
                    })
            })
        }
        this.markTime("write files end")
    }
}

async function projectLoadPackage(e) {
    try {
        global.open_file_path && (global.open_file_path = "")
        const t = await configGetLocale(),
            a = new Ie(t),
            {lang: n} = a
        be(d, {info: n.project_opening})
        const i = Date.now(),
            {
                meta: r,
                data: o,
                files: s = null,
                yChanges: l = null,
            } = (await (async function (e) {
                const t = Date.now()
                ye.info("start uncompress data")
                let a = e
                if ("string" == typeof e) {
                    if (!(0, ne.existsSync)(e))
                        throw new Error("File not found")
                    a = await ie().promises.readFile(e)
                }
                const n = await Jn().loadAsync(a)
                ye.info("Load project package", n.comment)
                let i = n.file("meta.json")
                if (!i) throw new Error("invalid_meta")
                const r = JSON.parse(await i.async("string"))
                ye.info("uncompress meta data")
                let o = n.file("project.json")
                if (!o) throw new Error("invalid_data")
                const s = JSON.parse(await o.async("string"))
                ye.info("end uncompress data")
                const l = n.folder("assets"),
                    c = n.folder("Y_CHANGES")
                if (s && Array.isArray(s.items))
                    for (let e in s.items) {
                        const t = s.items[e]
                        if ("string" == typeof t) {
                            const a = n.file(`${t}.json`)
                            if (a) {
                                const t = await a.async("string")
                                s.items[e] = JSON.parse(t)
                            }
                        }
                    }
                const d = n.file("templates.json")
                if (s && d)
                    try {
                        s.templates = JSON.parse(await d.async("string"))
                    } catch (_err) {
                        ye.error(_err)
                    }
                const _ = n.file("relations.json")
                if (s && _)
                    try {
                        s.relations = JSON.parse(await _.async("string"))
                    } catch (_err) {
                        ye.error(_err)
                    }
                return (
                    ye.info("uncompress package cost: ", Date.now() - t, "ms"),
                        {
                            meta: r,
                            data: s,
                            files: l,
                            yChanges: c,
                        }
                )
            })(e)) || {}
        if (r && o) {
            const e = new Dm(r, o, s, l)
            await e.writeProject(),
                be(x),
                be(v, o.project?.id),
                be(T),
                ye.info(
                    `serialize project ${o.project.title} done, cost ${
                        Date.now() - i
                    }ms`,
                )
        }
    } catch (_err) {
        fe.dialog.showErrorBox("Error", _err.message), ye.error(_err)
    } finally {
        be(c)
    }
}

async function checkAppOpenByLatticsFile() {
    return global.open_file_path || ""
}

async function markProjectLoaded() {
    global.is_project_loaded = !0
}

const itemUpdateMiscContent = async (e) => {
        const t = await ua()
        try {
            await t.collection.items.update(["id", e.id], {...e})
        } catch (_err) {
            ye.error("itemUpdate error", _err)
        }
    },
    addChanges = async (e, t) => {
        try {
            const a = await ua(),
                n = await itemGet(e, !0)
            if (!n) return
            const i = n.currentYDocChange || []
            i.push(t),
                await a.collection.items.update((t) => t.id === e, {
                    currentYDocChange: i,
                })
        } catch (_err) {
            ye.error("itemUpdate changes error", _err)
        }
    }

async function getBaseState(e) {
    const t = await Pc(e, "base_state")
    try {
        return await ie().readFile(t)
    } catch (_err) {
        return ye.error("getBaseState error, id: " + e, _err), new Uint8Array()
    }
}

async function getLocalChanges(e, t = !0) {
    const a = await Pc(e, "local_changes")
    try {
        let e = await wl(le().join(a, "*")),
            t = []
        for (let a of e) {
            const e = await ie().readFile(a)
            e && t.push(e)
        }
        return t
    } catch (_err) {
        return ye.error("getLocalChanges error, id: " + e, _err), []
    }
}

async function getVersion(e, t, a = !0) {
    const n = await Pc(e, "received_changes")
    try {
        const e = await ie().readFile(le().join(n, `${t}`))
        return a ? Kn(e) : e
    } catch (_err) {
        return ye.error("getVersion error, id: " + t, _err), []
    }
}

async function addBaseState(e, t) {
    const a = await Pc(e, "base_state")
    try {
        return await ie().outputFile(a, Buffer.from(t)), !0
    } catch (_err) {
        return ye.error("add base state error, id: " + e, _err), !1
    }
}

async function addLocalUpdate(e, t, a) {
    const n = await Pc(e, "local_changes"),
        i = le().join(n, `${t}`)
    try {
        await ie().outputFile(i, Buffer.from(a)),
            itemUpdateMiscContent({id: e, currentYDocChangeIndex: t}).catch(
                ye.error,
            )
    } catch (_err) {
        ye.error("addLocalUpdate error, id: " + e + " index: " + t, _err)
    }
}

const Um = require("y-prosemirror"),
    Gm = new (so())()

function jsonToProsemirrorNode(e) {
    const t = ro.nodeFromJSON(e),
        a = (0, Um.prosemirrorJSONToYDoc)(ro, e)
    console.log(ni.encodeStateAsUpdate(a))
    const n = (0, Um.yDocToProsemirror)(ro, a)
    console.log(n.textContent === t.textContent)
    const i = Gm.document.createElement("div")
    return (
        i.appendChild(
            Xr.DOMSerializer.fromSchema(ro).serializeFragment(t.content),
        ),
            console.log(i.innerHTML),
            (global.window = null),
            ""
    )
}

global.window = Gm
const $m = {
    type: "doc",
    content: [
        {
            type: "paragraph",
            attrs: {paddingLeft: 0, lineHeight: "inherit", align: "left"},
        },
    ],
}

async function getYStateFromJSON(e) {
    e || (e = $m),
    "string" == typeof e &&
    (e = {
        type: "doc",
        content: [
            {
                type: "paragraph",
                attrs: {
                    paddingLeft: 0,
                    lineHeight: "inherit",
                    align: "left",
                },
                content: [{type: "text", text: e}],
            },
        ],
    }),
        ro.nodeFromJSON(e)
    const t = (0, Um.prosemirrorJSONToYDoc)(ro, e)
    return ni.encodeStateAsUpdate(t)
}

async function getProsemirrorJSONFromState(e, t = []) {
    const a = new ni.Doc()
    return (
        ni.transact(a, () => {
            e.forEach((e) => {
                ni.applyUpdate(a, e)
            }),
                t.forEach((e) => {
                    ni.applyUpdate(a, e)
                })
        }),
            (0, Um.yDocToProsemirrorJSON)(a)
    )
}

async function getCachedLocalChangesState(e) {
    if (!e) throw new Error("item id is required")
    const t = await fa(),
        a = le().join(t, e, "cached_local_changes")
    try {
        const e = await ie().readFile(a)
        return [e.readUInt32BE(0), [e.slice(4)]]
    } catch (_err) {
        const a = await getBaseState(e),
            n = await getLocalChanges(e)
        return a.length && n.unshift(a), [n.length, n]
    }
}

async function addCachedLocalChangesState(e, t, a) {
    if (!e) throw new Error("item id is required")
    if (!t) throw new Error("index is required")
    if (!a) throw new Error("changes is required")
    const n = await fa(),
        i = le().join(n, e, "cached_local_changes")
    try {
        const e = Buffer.allocUnsafe(4)
        return (
            e.writeUInt32BE(t, 0),
                await ie().outputFile(i, Buffer.concat([e, Buffer.from(a)])),
                !0
        )
    } catch (_err) {
        return (
            ye.error(
                "addCachedLocalChangesState error, id: " + e + " index: " + t,
                _err,
            ),
                !1
        )
    }
}

async function getLocalContentFromState(e, t = []) {
    let a = []
    t.length > 0 &&
    (a = (await Promise.all(t.map((t) => getVersion(e, t)))).reduce(
        (e, t) => (e.push(...t), e),
        [],
    ))
    const [, n] = await getCachedLocalChangesState(e)
    return getProsemirrorJSONFromState(n, a)
}

async function deleteYChangesById(e) {
    try {
        const t = await fa(),
            a = le().join(t, e)
        await ie().remove(a)
    } catch (_err) {
    }
}

async function hasLocalUpdate(e, t = 1) {
    const a = await Pc(e, "local_changes"),
        n = le().join(a, `${t}`)
    try {
        return await ie().pathExists(n)
    } catch (_err) {
        return ye.error("hasLocalUpdate error, id: " + e, _err), !1
    }
}

async function getItemsByTagRootId(e, t) {
    const a = await ua(),
        n = await getTargetIds(e),
        i = (await Promise.all(t.map((e) => getTargetIds(e)))).reduce(
            (e, t) => e.concat(t),
            [],
        ),
        r = [...n, ...i],
        o = await a.collection.items.filter(
            (e) =>
                !e.isInTrashcan &&
                (e.tags?.length || e.tags_in_content?.length) &&
                [
                    ...new Set([
                        ...(e.tags || []),
                        ...(e.tags_in_content || []),
                    ]),
                ].some((e) => r.includes(e)),
            [
                "tags",
                "tags_in_content",
                "id",
                "title",
                "icon",
                "type",
                "rawType",
                "add_time_ms",
                "edit_time_ms",
                "content_edit_time_ms",
                "src",
                "ext",
                "size",
                "is_in_assets",
                "link_to",
                "goal",
                "content",
                "currentVersion",
                "unSyncedVersions",
            ],
        )
    ye.info("filter items by tags: ", o.length)
    for (let e of o) {
        e.isBelongToRoot = [
            ...new Set([...(e.tags || []), ...(e.tags_in_content || [])]),
        ].some((e) => n.includes(e))
        try {
            if (!e.tags || !e.tags.some((e) => r.includes(e))) {
                !e.content &&
                e.currentVersion &&
                "file" !== e.rawType &&
                "file" !== e.type &&
                (e.content = await getLocalContentFromState(
                    e.id,
                    e.unSyncedVersions || [],
                ))
                const t = pt("tag", e.content)
                ;(t.length && !t.every((e) => !r.includes(e.attrs.id))) ||
                (e.notInArticleTags = !0)
            }
        } catch (_err) {
            ye.error("get tag_in_article error: ", _err)
        }
        delete e.content, delete e.unSyncedVersions
    }
    return o.filter((e) => !e.notInArticleTags)
}

async function getTagAndSubIds(e) {
    getTargetIds(e)
}

const tp = require("electron-updater")
let ap
!(function (e) {
    ;(e.checking = "checking"),
        (e.update_available = "update_available"),
        (e.update_not_available = "update_not_available"),
        (e.error = "error"),
        (e.download_progress = "download_progress"),
        (e.update_downloaded = "update_downloaded")
})(ap || (ap = {})),
    ye.info(
        "autoUpdater setFeedURL",
        `https://releases.zine.la/lattics/${process.platform}/`,
    ),
    (tp.autoUpdater.autoDownload = !1),
    (tp.autoUpdater.autoInstallOnAppQuit = !0)
const np = new (class {
    constructor() {
        ;(this._status = ap.checking),
            (this.updateInfo = null),
            (this.cancellationToken = null),
            tp.autoUpdater.on("update-available", (e) => {
                ye.info("update-available", e),
                    (this.updateInfo = e),
                    (this._status = ap.update_available),
                    be("auto_update_update_available", e)
            }),
            tp.autoUpdater.on("update-not-available", (e) => {
                ye.info("update-not-available", e),
                    (this.updateInfo = e),
                    (this._status = ap.update_not_available),
                    be("auto_update_not_available", e)
            }),
            tp.autoUpdater.on("update-downloaded", (e) => {
                ;(this._status = ap.update_downloaded),
                    ye.info("update-downloaded", e),
                    be("auto_update_downloaded", e)
            }),
            tp.autoUpdater.on("download-progress", (e) => {
                ;(this._status = ap.download_progress),
                    ye.info("download-progress", e.percent),
                    be("auto_update_progress", e)
            })
    }

    async check() {
        await tp.autoUpdater.checkForUpdates()
    }

    async download() {
        ye.info("download: ", this.status),
        this._status === ap.update_available &&
        ((this.cancellationToken = new tp.CancellationToken()),
            await tp.autoUpdater.downloadUpdate(this.cancellationToken))
    }

    cancelDownload() {
        ye.info("cancelDownload: ", this.status),
        this.cancellationToken && this.cancellationToken.cancel(),
            (this._status = ap.update_available)
    }

    install() {
        ye.info("install: ", this.status),
        this._status === ap.update_downloaded &&
        tp.autoUpdater.quitAndInstall(!0, !0)
    }

    get info() {
        return this.updateInfo
    }

    get status() {
        return this._status
    }
})()

async function autoUpdateCheck() {
    return await np.check(), np.info
}

async function autoUpdateDownload() {
    await np.download()
}

async function autoUpdateCancelDownload() {
    np.cancelDownload()
}

async function autoUpdateInstall() {
    np.install()
}

async function autoUpdateStatus() {
    return np.status
}

async function autoUpdateOpenProgressWin() {
    global.autoUpdateWin
        ? global.autoUpdateWin.show()
        : (global.autoUpdateWin = ((
            e = "",
            t = {},
            a = ap.update_available,
        ) => {
            let n = new fe.BrowserWindow({
                titleBarStyle: "hidden",
                autoHideMenuBar: !0,
                fullscreen: !1,
                fullscreenable: !0,
                hasShadow: !0,
                height: 181,
                maximizable: !1,
                minimizable: !1,
                resizable: !1,
                show: !1,
                title: e,
                webPreferences: {
                    contextIsolation: !0,
                    sandbox: !1,
                    preload: le().join(__dirname, "preload.js"),
                    spellcheck: !0,
                },
                width: 483,
            })
            return (
                n
                    .loadURL(`${qt()}#/auto-update?status=${a}`)
                    .catch((e) => console.error(e)),
                    n.on("close", (e) => {
                        ;(global.autoUpdateWin = null),
                            autoUpdateCancelDownload().catch(ye.error),
                            Ot(n)
                    }),
                    n.show(),
                    n.focus(),
                    n
            )
        })(""))
}

async function autoUpdateCloseProgressWin() {
    global.autoUpdateWin && global.autoUpdateWin.close()
}

async function autoUpdateInfo() {
    return np.info
}

const imagePreviewShow = async (e) => {
        const t = new Da()
        await t.createOrShowWindow(e)
    },
    imagePreviewClose = async (e) => {
        const t = new Da()
        await t.closeWindow(e)
    },
    pdfHighlightAdd = async (e) => {
        if (!e.belongsTo)
            throw new Error("highlight belongs to item id is required")
        const t = await ua(),
            a = new Date().getTime()
        return (
            e.id || (e.id = (0, Ja.v4)()),
            e.created || (e.created = a),
                (e.modified = a),
                await t.collection.pdf_highlight.insert(e)
        )
    },
    pdfHighlightGetAll = async () => {
        const e = await ua()
        return await e.collection.pdf_highlight.all()
    },
    pdfHighlightDeleteById = async (e) => {
        const t = await ua()
        return (
            !!(await t.collection.pdf_highlight.find((t) => t.id === e)) &&
            (await t.collection.pdf_highlight.delete((t) => t.id === e), !0)
        )
    },
    pdfHighlightDeleteByBelongs = async (e) => {
        const t = await ua()
        await t.collection.pdf_highlight.delete((t) => t.belongsTo === e)
    },
    pdfHighlightGetById = async (e) => {
        const t = await ua()
        if (e) return await t.collection.pdf_highlight.find((t) => t.id === e)
    },
    pdfHighlightsGetByFileId = async (e) => {
        const t = await ua()
        return e
            ? await t.collection.pdf_highlight.filter((t) => t.belongsTo === e)
            : []
    }

async function pdfHighlightsGetByFileIdAndPage(e, t = 1) {
    const a = await ua()
    return e
        ? a.collection.pdf_highlight.filter(
            (a) =>
                a.belongsTo === e &&
                !(Math.abs(a.position?.pageNumber - t) > 1) &&
                a.position.rects.some((e) => e.pageNumber === t),
        )
        : []
}

const pdfHighlightUpdate = async (e, t) => {
    const a = await ua()
    if (!(await a.collection.pdf_highlight.find((t) => t.id === e))) return null
    const n = new Date().getTime(),
        [i] = await a.collection.pdf_highlight.update((t) => t.id === e, {
            ...t,
            modified: n,
        })
    return i
}

function xp(e) {
    let t = e.split("\n")
    const a = {type: "doc", content: []}
    return (
        t.forEach((e) => {
            a.content?.push({
                type: "paragraph",
                content: [{type: "text", text: e}],
            })
        }),
            a
    )
}

async function pdfExistHighlightAddToCard(e, t) {
    const a = await ua()
    if (await a.collection.items.find((t) => t?.reference === e, ["id"]))
        return !1
    const n = xp(t),
        i = await cardAdd({content: n, title: "", reference: e})
    return await pdfHighlightUpdate(e, {derivedCard: i.id}), !0
}

async function pdfHighlightAddToCard(e) {
    const t = xp(e.content?.text || ""),
        a = (0, Ja.v4)(),
        n = await cardAdd({content: t, title: "", reference: a})
    return (e.id = a), (e.derivedCard = n.id), await pdfHighlightAdd(e)
}

const sciGetMetadata = async (e) => {
        const t = await ua()
        return await t.collection.sci_metadata.find((t) => t.id === e)
    },
    sciGetMetadataByItemId = async (e) =>
        (await ua()).collection.sci_metadata.find((t) => t.itemId === e)

async function zp(e) {
    if (("string" == typeof e && (e = e.split(",")), !Array.isArray(e)))
        return []
    if (
        0 ===
        (e = [
            ...new Set(
                e.map((e) => e.trim().replace(/ - /g, "/")).filter((e) => !!e),
            ),
        ]).length
    )
        return []
    const t = []
    for (const a of e) {
        const e = await addHierarchicalTags(a)
        e && t.push(e.id)
    }
    return t
}

async function sciAddMetadata(e) {
    const t = await ua(),
        a = new Date().getTime()
    if (
        (e.id || (e.id = (0, Ja.v4)()),
        e.created || (e.created = a),
            (e.modified = a),
            e.keywords?.length)
    ) {
        const t = await zp(e.keywords)
        t.length && (e.tags = t)
    }
    return (
        e.itemId &&
        (await t.collection.items.update(["id", e.itemId], {
            metadataId: e.id,
            tags: e.tags,
        })),
            (e.keywords = e.tags = void 0),
            await t.collection.sci_metadata.insert(e)
    )
}

const jp = require("cheerio")
var Pp = modulex.fn(jp)

function Dp(e) {
    return e?.includes("mml:math") ? Pp().load(e).text() : e
}

function Mp(e) {
    if (!e)
        return {title: "", authors: [{name: "", role: "author"}], type: "other"}
    const t = {
        title: Dp(e.title),
        authors:
            e.author?.map((e, t) => ({
                name: e.given + " " + e.family,
                role: "author",
                order: t + 1,
            })) || [],
        publication: e.publisher,
        type: e.type || "journal-article",
        journal: Ip(e["container-title"]) || e["publisher-place"],
        time: Ep(e.issued),
        issue: e.issue,
        issn: Ip(e.ISSN),
        url: e.URL,
        page: e.page,
        volume: e.volume,
        abstract: e.abstract,
        keywords: e.keyword,
        doi: e.DOI,
    }
    return (
        e.page?.startsWith("arXiv:") &&
        (t.pmid = {type: "arXiv", value: e.page.replace("arXiv:", "")}),
            t
    )
}

function Ep(e) {
    if (!e) return ""
    const t = e["date-parts"]?.[0]
    return t ? t.join("-") : e.raw || ""
}

function Ip(e) {
    return Array.isArray(e) ? e[0] : e
}

async function addMetadataFromRIS(e, t, a = "", n = []) {
    const i = await ua(),
        r = new Date().getTime(),
        o = {generateGraph: !1, strict: !1}
    a && (o.forceType = a)
    const s = Mp(new ko(t, o).data?.[0]),
        l = {id: (0, Ja.v4)(), ...s, created: r, modified: r, itemId: e}
    if (l.keywords?.length) {
        const e = await zp(l.keywords)
        e.length && (l.tags = [...new Set([...n, ...e])])
    }
    return (
        l.itemId &&
        (await i.collection.items.update(["id", l.itemId], {
            tags: l.tags,
            metadataId: l.id,
        })),
            (l.keywords = l.tags = void 0),
            await i.collection.sci_metadata.insert(l)
    )
}

async function sciUpdateMetadata(e, t) {
    const a = await ua()
    if (!(await a.collection.sci_metadata.find((t) => t.id === e))) return null
    const n = new Date().getTime(),
        [i] = await a.collection.sci_metadata.update((t) => t.id === e, {
            ...t,
            modified: n,
        })
    return i
}

const sciDelMetadataById = async (e) => {
        const t = await ua()
        return (
            !!(await t.collection.sci_metadata.find((t) => t.id === e)) &&
            (await t.collection.sci_metadata.delete((t) => t.id === e), !0)
        )
    },
    sciDelMetadataByItemId = async (e) => {
        const t = await ua()
        return (
            !!(await t.collection.sci_metadata.find((t) => t.itemId === e)) &&
            (await t.collection.sci_metadata.delete((t) => t.itemId === e), !0)
        )
    }

async function sciGetMetadataByDoi({dio: e, type: t}, a) {
    if ("doi" === t) {
        const t = await ko.async(e, {generateGraph: !1}),
            [n] = t.data,
            i = Mp(n)
        return i.doi || (i.doi = e), {...i, itemId: a}
    }
    if ("arxiv" === t) {
        const t = await Ge()
            .get(`http://export.arxiv.org/api/query?id_list=${e}`)
            .then((e) => e.data)
            .catch(() => null)
        return t
            ? {
                pmid: {type: "arXiv", value: e},
                ...(function (e) {
                    const t = Pp().load(e),
                        a = t("entry title").text(),
                        n = t("summary").text(),
                        i = t("author")
                            .map((e, t) => ({
                                name: Pp()(t).find("name").text(),
                                role: "author",
                                order: e + 1,
                            }))
                            .get(),
                        r = t("published")?.text(),
                        o =
                            ((s = t("arxiv\\:journal_ref")?.text()),
                                {journal: s || ""})
                    var s
                    const l = t("arxiv\\:doi")?.text(),
                        c =
                            t("arxiv\\:primary_category")?.attr("term") ||
                            t("category")?.attr("term"),
                        d = t('link[type="text/html"]')?.attr("href"),
                        _ = t("arxiv\\:issn")?.text()
                    return {
                        title: Dp(a),
                        abstract: n,
                        authors: i,
                        type: "journal-article",
                        time: r?.split("T")?.[0],
                        issn: _,
                        ...o,
                        doi: l,
                        url: d,
                        primaryClass: c,
                    }
                })(t),
                itemId: a,
            }
            : null
    }
    return null
}

const sciGetMetadataByCardReference = async (e) => {
    const t = await ua(),
        a = await t.collection.pdf_highlight.find((t) => t.id === e)
    return (
        (a &&
            a.belongsTo && {
                ...(await t.collection.sci_metadata.find(
                    (e) => e.itemId === a.belongsTo,
                )),
                reference: e,
            }) ||
        null
    )
}
fe.ipcMain.on("x_popup_menu", (e, t) => {
    const a = new fe.Menu()
    t.items.map((e) => {
        if ("string" == typeof e._click_evt) {
            let t = e._click_evt
            e.click = () => {
                be(t)
            }
        }
        const t = new fe.MenuItem(e)
        a.append(t)
    }),
        a.on("menu-will-close", () => {
            be(`popup_menu_close:${t.menu_id}`)
        }),
        a.popup()
}),
    process.on("uncaughtException", function (e) {
        console.error(e), ye.error("UnCaughtException", e.message, e)
    })
const Np = [
    async function () {
        const e = await ua()
        let t = await e.collection.items.all()
        const a = t.filter(
                (e) =>
                    ("file" === e.rawType || "file" === e.type) &&
                    e.md5 &&
                    !e.belongsTo?.length,
            ),
            n = []
        for (const e of t) {
            if ("file" === e.type || "file" === e.rawType) continue
            !e.content &&
            e.currentVersion &&
            (e.content = await getLocalContentFromState(
                e.id,
                e.unSyncedVersions || [],
            ))
            const t = pt("image", e.content)
            t.length &&
            t.forEach((e) => {
                e.attrs?.src?.startsWith("lattics-local://assets/") &&
                n.push(
                    e.attrs.src
                        .replace("lattics-local://assets/", "")
                        .trim()
                        .split("/")[0],
                )
            })
        }
        ye.info("in article images", n.length),
            ye.info("in assets images", a.length)
        let i = 0
        for (const t of a)
            try {
                if (n.includes(t.id)) continue
                i++
                const a = await ha(),
                    r = le().join(a, t.id)
                await ie().remove(r),
                    await e.collection.items.delete((e) => e.id === t.id)
            } catch (_err) {
                ye.error("cleanUnusedImages", _err)
            }
        ye.info("cleanUnusedImages", i)
    },
    function () {
        new Kt().destroy(), new Da().destroy()
    },
]
let Up = !1
"win32" == process.platform &&
(ye.info("win32 with --no-sandbox"),
    fe.app.commandLine.appendSwitch("no-sandbox")),
    console.log("main init:", Date.now())
const Gp = async () => {
    await Ma()
}

function Wp(e) {
    e &&
    e.endsWith(".lattics") &&
    (ye.info("handle open lattics file", e, global.is_project_loaded, Up),
        global.is_project_loaded
            ? be("project_package_open_win32", e)
            : (global.open_file_path = e))
}

process.mas ||
(fe.app.requestSingleInstanceLock()
    ? fe.app.on("second-instance", (e, t) => {
        const a = t.find((e) => e.endsWith(".lattics"))
        ye.info("second-instance", t),
            Wp("win32" == process.platform && a ? a : ""),
            Gp().catch((e) => console.error(e))
    })
    : fe.app.quit()),
    fe.app.on("ready", async () => {
        ye.info("app ready:", Date.now()),
            ye.info(`app:ready VERSION: ${Ne.join(".")}`),
            ye.info(`API server: ${Oe}`),
            fe.session
                .fromPartition(jt)
                .protocol.registerFileProtocol(
                "lattics-local",
                async ({url: e}, t) => {
                    if (e.startsWith("lattics-local://assets/")) {
                        let a = e.replace("lattics-local://assets/", "")
                        a && (a = a.endsWith("/") ? a.slice(0, -1) : a)
                        const n = await itemGet(a)
                        n && "file" === n.type
                            ? t({path: await fileGetAssetPath(n.id, n.src)})
                            : t({path: e})
                    }
                },
            ),
            await (async function () {
                const e = [Le, mt]
                for (let t of e)
                    try {
                        await t()
                    } catch (_err) {
                        ye.error(_err)
                    }
                Qt(), ye.info("tick task start..."), setTimeout(Pe, 5e3)
            })(),
            (async () => {
                const e = await configGetLocale()
                Ia(e),
                Up ||
                "win32" !== process.platform ||
                Wp(
                    process.argv.find((e) => e.endsWith(".lattics")) ||
                    "",
                ),
                    (Up = !0)
            })()
        const e = fe.nativeTheme.shouldUseDarkColors
        let t = await configGet("theme_source"),
            a = await configGet("theme")
        if ("system" === t) {
            let t = e ? "dark" : "light"
            a !== t && (await configSet("theme", t))
        }
        "darwin" === process.platform &&
        (fe.systemPreferences.setUserDefault(
            "NSDisabledDictationMenuItem",
            "boolean",
            !0,
        ),
            fe.systemPreferences.setUserDefault(
                "NSDisabledCharacterPaletteMenuItem",
                "boolean",
                !0,
            )),
            await Ma(),
            Dl("app", "ready", process.platform)
    }),
    fe.app.on("open-file", async (e, t) => {
        "win32" == process.platform &&
        process.argv.length >= 2 &&
        (t = process.argv[1]),
        t &&
        t.endsWith(".lattics") &&
        (ye.info("handle open lattics file", t, process.argv),
            e.preventDefault(),
            global.is_project_loaded
                ? await projectLoadPackage(t)
                : (global.open_file_path = t))
    }),
    fe.app.on("window-all-closed", () => {
        "darwin" !== process.platform && fe.app.quit()
    }),
    fe.app.on("before-quit", async (e) => {
        global.is_will_quit ||
        (e.preventDefault(),
            await (async function () {
                ye.info("start beforeQuite tasks..."), await N(100)
                for (let e of Np)
                    try {
                        await e()
                    } catch (_err) {
                        ye.error(`beforeQuit task error: ${_err.message}`)
                    }
                ye.info("end beforeQuite tasks.")
            })(),
            (global.is_will_quit = !0),
            fe.app.quit(),
            Dl("app", "quit"))
    }),
    fe.app.on("activate", Gp),
    fe.ipcMain.handle(
        "dark-mode:toggle",
        () => (
            fe.nativeTheme.shouldUseDarkColors
                ? (fe.nativeTheme.themeSource = "light")
                : (fe.nativeTheme.themeSource = "dark"),
                fe.nativeTheme.shouldUseDarkColors
        ),
    ),
    fe.app.setAboutPanelOptions({
        applicationName: "Lattics",
        applicationVersion: Ne.join("."),
    }),
    fe.nativeTheme.on("updated", async () => {
        const e = fe.nativeTheme.shouldUseDarkColors
        let t = await configGet("theme_source"),
            a = await configGet("theme")
        console.log("nativeTheme.on:updated", e, t, a),
        "system" === t &&
        (e && "dark" !== a
            ? (ye.info("THEME: set theme to dark"),
                await themeSetSource("system"))
            : e ||
            "light" === a ||
            (ye.info("THEME: set theme to light"),
                await themeSetSource("system")))
    })
